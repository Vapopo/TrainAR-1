id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: Editor.Scripts
  commentId: N:Editor.Scripts
  language: CSharp
  name:
    CSharp: Editor.Scripts
    VB: Editor.Scripts
  nameWithType:
    CSharp: Editor.Scripts
    VB: Editor.Scripts
  qualifiedName:
    CSharp: Editor.Scripts
    VB: Editor.Scripts
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Editor.Scripts.ConvertToTrainARObject
    commentId: T:Editor.Scripts.ConvertToTrainARObject
    language: CSharp
    name:
      CSharp: ConvertToTrainARObject
      VB: ConvertToTrainARObject
    nameWithType:
      CSharp: ConvertToTrainARObject
      VB: ConvertToTrainARObject
    qualifiedName:
      CSharp: Editor.Scripts.ConvertToTrainARObject
      VB: Editor.Scripts.ConvertToTrainARObject
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Editor.Scripts
    source:
      id: ConvertToTrainARObject
      path: ''
      startLine: 17
    summary: "\nConvertToTrainARObjects is an Editor script that adds a right-click context menu to GameObjects in the hierarchy named\n&quot;Convert to TrainAR Object&quot;. When the object is eligible (therefore has a transform, MeshFilter and MeshRenderer), this can\nbe used to convert GameObjects to TrainAR Objects, where behaviours (e.g. TrainAR Object) are automatically added and the mesh\nis combined an simplyfied.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ConvertToTrainARObject : UnityEditor.Editor'
        VB: >-
          Public Class ConvertToTrainARObject

              Inherits UnityEditor.Editor
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Editor.Scripts.ConvertToTrainARObject.AddConvertionContextItem
      commentId: M:Editor.Scripts.ConvertToTrainARObject.AddConvertionContextItem
      language: CSharp
      name:
        CSharp: AddConvertionContextItem()
        VB: AddConvertionContextItem()
      nameWithType:
        CSharp: ConvertToTrainARObject.AddConvertionContextItem()
        VB: ConvertToTrainARObject.AddConvertionContextItem()
      qualifiedName:
        CSharp: Editor.Scripts.ConvertToTrainARObject.AddConvertionContextItem()
        VB: Editor.Scripts.ConvertToTrainARObject.AddConvertionContextItem()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: AddConvertionContextItem
        path: ''
        startLine: 22
      summary: "\nAdds the &quot;Convert to TrainAR Object&quot; menu Item to the context menu in the editor and handles when it was clicked.\n"
      example: []
      syntax:
        content:
          CSharp: public static void AddConvertionContextItem()
          VB: Public Shared Sub AddConvertionContextItem
      overload: Editor.Scripts.ConvertToTrainARObject.AddConvertionContextItem*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Editor.Scripts.ConvertToTrainARObject.InitConversion(GameObject,System.String)
      commentId: M:Editor.Scripts.ConvertToTrainARObject.InitConversion(GameObject,System.String)
      language: CSharp
      name:
        CSharp: InitConversion(GameObject, String)
        VB: InitConversion(GameObject, String)
      nameWithType:
        CSharp: ConvertToTrainARObject.InitConversion(GameObject, String)
        VB: ConvertToTrainARObject.InitConversion(GameObject, String)
      qualifiedName:
        CSharp: Editor.Scripts.ConvertToTrainARObject.InitConversion(GameObject, System.String)
        VB: Editor.Scripts.ConvertToTrainARObject.InitConversion(GameObject, System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: InitConversion
        path: ''
        startLine: 114
      summary: "\nInitializes the conversion process for the given object.\n"
      example: []
      syntax:
        content:
          CSharp: public static void InitConversion(GameObject selectedObject, string trainARObjectName)
          VB: Public Shared Sub InitConversion(selectedObject As GameObject, trainARObjectName As String)
        parameters:
        - id: selectedObject
          type: Global.GameObject
          description: The object that is to be converted to a TrainAR Object
        - id: trainARObjectName
          type: System.String
          description: The specified name of the TrainAR Object.
      overload: Editor.Scripts.ConvertToTrainARObject.InitConversion*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Editor.Scripts.ConvertToTrainARObject.SimplifyMeshes(System.Collections.Generic.IEnumerable{Mesh},GameObject,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
      commentId: M:Editor.Scripts.ConvertToTrainARObject.SimplifyMeshes(System.Collections.Generic.IEnumerable{Mesh},GameObject,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)
      language: CSharp
      name:
        CSharp: SimplifyMeshes(IEnumerable<Mesh>, GameObject, Single, Boolean, Boolean, Boolean, Boolean)
        VB: SimplifyMeshes(IEnumerable(Of Mesh), GameObject, Single, Boolean, Boolean, Boolean, Boolean)
      nameWithType:
        CSharp: ConvertToTrainARObject.SimplifyMeshes(IEnumerable<Mesh>, GameObject, Single, Boolean, Boolean, Boolean, Boolean)
        VB: ConvertToTrainARObject.SimplifyMeshes(IEnumerable(Of Mesh), GameObject, Single, Boolean, Boolean, Boolean, Boolean)
      qualifiedName:
        CSharp: Editor.Scripts.ConvertToTrainARObject.SimplifyMeshes(System.Collections.Generic.IEnumerable<Mesh>, GameObject, System.Single, System.Boolean, System.Boolean, System.Boolean, System.Boolean)
        VB: Editor.Scripts.ConvertToTrainARObject.SimplifyMeshes(System.Collections.Generic.IEnumerable(Of Mesh), GameObject, System.Single, System.Boolean, System.Boolean, System.Boolean, System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: SimplifyMeshes
        path: ''
        startLine: 199
      summary: "\nUses the Meshsimplifier to decimate the mesh of the passed Gameobject as well as all of it&apos;s children&apos;s meshes.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SimplifyMeshes(IEnumerable<Mesh> originalMeshes, GameObject currentSelectedObject, float quality, bool preserveBorderEdges = false, bool preserveSurfaceCurvature = false, bool preserveUVSeamEdges = false, bool preserveUVFoldoverEdges = false)
          VB: Public Shared Sub SimplifyMeshes(originalMeshes As IEnumerable(Of Mesh), currentSelectedObject As GameObject, quality As Single, preserveBorderEdges As Boolean = False, preserveSurfaceCurvature As Boolean = False, preserveUVSeamEdges As Boolean = False, preserveUVFoldoverEdges As Boolean = False)
        parameters:
        - id: originalMeshes
          type: System.Collections.Generic.IEnumerable{Mesh}
          description: >-
            The meshes as they were, when the object was originally selected,

            before any mesh changes were applied
        - id: currentSelectedObject
          type: Global.GameObject
          description: The current Gameobject, to which the mesh changes are applied to
        - id: quality
          type: System.Single
          description: The desired quality of the simplification. Must be between 0 and 1.
        - id: preserveBorderEdges
          type: System.Boolean
          description: 'Optional parameter: Should mesh edges be preserved?'
        - id: preserveSurfaceCurvature
          type: System.Boolean
          description: 'Optional parameter: Should surface curvature be preserved?'
        - id: preserveUVSeamEdges
          type: System.Boolean
          description: 'Optional parameter: Should UV seam edges be preserved?'
        - id: preserveUVFoldoverEdges
          type: System.Boolean
          description: 'Optional parameter: Should UV foldover edges be preserved?'
      overload: Editor.Scripts.ConvertToTrainARObject.SimplifyMeshes*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Editor.Scripts.EditorTrainARObjectToolbar
    commentId: T:Editor.Scripts.EditorTrainARObjectToolbar
    language: CSharp
    name:
      CSharp: EditorTrainARObjectToolbar
      VB: EditorTrainARObjectToolbar
    nameWithType:
      CSharp: EditorTrainARObjectToolbar
      VB: EditorTrainARObjectToolbar
    qualifiedName:
      CSharp: Editor.Scripts.EditorTrainARObjectToolbar
      VB: Editor.Scripts.EditorTrainARObjectToolbar
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Editor.Scripts
    source:
      id: EditorTrainARObjectToolbar
      path: ''
      startLine: 278
    summary: "\nThe EditorTrainARObjectToolbar is the toolbar in the sceneview when using the TrainAR authoring overlay. It allows\nsetting TrainAR Object states like active/inactive, grabbable, interactable, or combinable without opening an inspector.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class EditorTrainARObjectToolbar : ToolbarOverlay'
        VB: >-
          Public Class EditorTrainARObjectToolbar

              Inherits ToolbarOverlay
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Editor.Scripts.EditorTrainARObjectToolbar.OnCreated
      commentId: M:Editor.Scripts.EditorTrainARObjectToolbar.OnCreated
      language: CSharp
      name:
        CSharp: OnCreated()
        VB: OnCreated()
      nameWithType:
        CSharp: EditorTrainARObjectToolbar.OnCreated()
        VB: EditorTrainARObjectToolbar.OnCreated()
      qualifiedName:
        CSharp: Editor.Scripts.EditorTrainARObjectToolbar.OnCreated()
        VB: Editor.Scripts.EditorTrainARObjectToolbar.OnCreated()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: OnCreated
        path: ''
        startLine: 289
      summary: "\nOnCreated is invoked when an Overlay is instantiated in an Overlay Canvas.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnCreated()
          VB: Public Overrides Sub OnCreated
      overload: Editor.Scripts.EditorTrainARObjectToolbar.OnCreated*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Editor.Scripts.EditorTrainARObjectToolbar.OnWillBeDestroyed
      commentId: M:Editor.Scripts.EditorTrainARObjectToolbar.OnWillBeDestroyed
      language: CSharp
      name:
        CSharp: OnWillBeDestroyed()
        VB: OnWillBeDestroyed()
      nameWithType:
        CSharp: EditorTrainARObjectToolbar.OnWillBeDestroyed()
        VB: EditorTrainARObjectToolbar.OnWillBeDestroyed()
      qualifiedName:
        CSharp: Editor.Scripts.EditorTrainARObjectToolbar.OnWillBeDestroyed()
        VB: Editor.Scripts.EditorTrainARObjectToolbar.OnWillBeDestroyed()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: OnWillBeDestroyed
        path: ''
        startLine: 297
      summary: "\nCalled when an Overlay is about to be destroyed.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnWillBeDestroyed()
          VB: Public Overrides Sub OnWillBeDestroyed
      overload: Editor.Scripts.EditorTrainARObjectToolbar.OnWillBeDestroyed*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Editor.Scripts.MeshCombinerEditor
    commentId: T:Editor.Scripts.MeshCombinerEditor
    language: CSharp
    name:
      CSharp: MeshCombinerEditor
      VB: MeshCombinerEditor
    nameWithType:
      CSharp: MeshCombinerEditor
      VB: MeshCombinerEditor
    qualifiedName:
      CSharp: Editor.Scripts.MeshCombinerEditor
      VB: Editor.Scripts.MeshCombinerEditor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Editor.Scripts
    source:
      id: MeshCombinerEditor
      path: ''
      startLine: 787
    summary: "\nThe MeshCombinerEditor is a utility class that helps to combine meshes.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class MeshCombinerEditor : UnityEditor.Editor'
        VB: >-
          Public Class MeshCombinerEditor

              Inherits UnityEditor.Editor
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Editor.Scripts.MeshCombinerEditor.OnInspectorGUI
      commentId: M:Editor.Scripts.MeshCombinerEditor.OnInspectorGUI
      language: CSharp
      name:
        CSharp: OnInspectorGUI()
        VB: OnInspectorGUI()
      nameWithType:
        CSharp: MeshCombinerEditor.OnInspectorGUI()
        VB: MeshCombinerEditor.OnInspectorGUI()
      qualifiedName:
        CSharp: Editor.Scripts.MeshCombinerEditor.OnInspectorGUI()
        VB: Editor.Scripts.MeshCombinerEditor.OnInspectorGUI()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: OnInspectorGUI
        path: ''
        startLine: 794
      summary: "\nThe inspector of the MeshCombinerEditor adds the option to reference meshes which are skipped in the combine process.\nThe combined mesh is stored in the location which is defined in this inspector.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnInspectorGUI()
          VB: Public Overrides Sub OnInspectorGUI
      overload: Editor.Scripts.MeshCombinerEditor.OnInspectorGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Editor.Scripts.MeshCombinerEditor.SaveCombinedMesh(Mesh,System.String)
      commentId: M:Editor.Scripts.MeshCombinerEditor.SaveCombinedMesh(Mesh,System.String)
      language: CSharp
      name:
        CSharp: SaveCombinedMesh(Mesh, String)
        VB: SaveCombinedMesh(Mesh, String)
      nameWithType:
        CSharp: MeshCombinerEditor.SaveCombinedMesh(Mesh, String)
        VB: MeshCombinerEditor.SaveCombinedMesh(Mesh, String)
      qualifiedName:
        CSharp: Editor.Scripts.MeshCombinerEditor.SaveCombinedMesh(Mesh, System.String)
        VB: Editor.Scripts.MeshCombinerEditor.SaveCombinedMesh(Mesh, System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: SaveCombinedMesh
        path: ''
        startLine: 892
      summary: "\nSaves the given mesh at the given location.\nCreates the directories if the given path doesn&apos;t exits.\n"
      example: []
      syntax:
        content:
          CSharp: public static string SaveCombinedMesh(Mesh mesh, string folderPath)
          VB: Public Shared Function SaveCombinedMesh(mesh As Mesh, folderPath As String) As String
        parameters:
        - id: mesh
          type: Global.Mesh
          description: Any to store mesh.
        - id: folderPath
          type: System.String
          description: The path where to store the given mesh.
        return:
          type: System.String
          description: The path where the mesh is stored
      overload: Editor.Scripts.MeshCombinerEditor.SaveCombinedMesh*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Editor.Scripts.OpenAuthoringToolOnLoad
    commentId: T:Editor.Scripts.OpenAuthoringToolOnLoad
    language: CSharp
    name:
      CSharp: OpenAuthoringToolOnLoad
      VB: OpenAuthoringToolOnLoad
    nameWithType:
      CSharp: OpenAuthoringToolOnLoad
      VB: OpenAuthoringToolOnLoad
    qualifiedName:
      CSharp: Editor.Scripts.OpenAuthoringToolOnLoad
      VB: Editor.Scripts.OpenAuthoringToolOnLoad
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Editor.Scripts
    source:
      id: OpenAuthoringToolOnLoad
      path: ''
      startLine: 949
    summary: "\nEvery time the editor is started, trigger switching to the TrainAR authoring tool.\n"
    example: []
    syntax:
      content:
        CSharp: public class OpenAuthoringToolOnLoad
        VB: Public Class OpenAuthoringToolOnLoad
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Editor.Scripts.PlayModeButtonOverride
    commentId: T:Editor.Scripts.PlayModeButtonOverride
    language: CSharp
    name:
      CSharp: PlayModeButtonOverride
      VB: PlayModeButtonOverride
    nameWithType:
      CSharp: PlayModeButtonOverride
      VB: PlayModeButtonOverride
    qualifiedName:
      CSharp: Editor.Scripts.PlayModeButtonOverride
      VB: Editor.Scripts.PlayModeButtonOverride
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Editor.Scripts
    source:
      id: PlayModeButtonOverride
      path: ''
      startLine: 994
    summary: "\nThe PlayModeButtonOverride editor script implements utility for the unity editor play buttons that overrides\nits functionality with TrainAR specific functionality to either switch the build target if there is an\nunsupported one currently selected or allow building to a device by clicking the play button.\n\nThis is done for convenience of building and also to prevent the playmode execution, as this is\ncurrently not supported by the framework.\n"
    example: []
    syntax:
      content:
        CSharp: public static class PlayModeButtonOverride
        VB: Public Module PlayModeButtonOverride
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Editor.Scripts.PlayModeButtonOverride.ShowDialogBoxForBuilding
      commentId: M:Editor.Scripts.PlayModeButtonOverride.ShowDialogBoxForBuilding
      language: CSharp
      name:
        CSharp: ShowDialogBoxForBuilding()
        VB: ShowDialogBoxForBuilding()
      nameWithType:
        CSharp: PlayModeButtonOverride.ShowDialogBoxForBuilding()
        VB: PlayModeButtonOverride.ShowDialogBoxForBuilding()
      qualifiedName:
        CSharp: Editor.Scripts.PlayModeButtonOverride.ShowDialogBoxForBuilding()
        VB: Editor.Scripts.PlayModeButtonOverride.ShowDialogBoxForBuilding()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: ShowDialogBoxForBuilding
        path: ''
        startLine: 1049
      summary: "\nShows a Unity Editor Dialog box asking the user if he wants to build the Project.\n"
      example: []
      syntax:
        content:
          CSharp: public static void ShowDialogBoxForBuilding()
          VB: Public Shared Sub ShowDialogBoxForBuilding
      overload: Editor.Scripts.PlayModeButtonOverride.ShowDialogBoxForBuilding*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Editor.Scripts.PlayModeButtonOverride.BuildAndDeployProjectToDevice
      commentId: M:Editor.Scripts.PlayModeButtonOverride.BuildAndDeployProjectToDevice
      language: CSharp
      name:
        CSharp: BuildAndDeployProjectToDevice()
        VB: BuildAndDeployProjectToDevice()
      nameWithType:
        CSharp: PlayModeButtonOverride.BuildAndDeployProjectToDevice()
        VB: PlayModeButtonOverride.BuildAndDeployProjectToDevice()
      qualifiedName:
        CSharp: Editor.Scripts.PlayModeButtonOverride.BuildAndDeployProjectToDevice()
        VB: Editor.Scripts.PlayModeButtonOverride.BuildAndDeployProjectToDevice()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: BuildAndDeployProjectToDevice
        path: ''
        startLine: 1106
      summary: "\nBuild and Runs the project for the current build target.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool BuildAndDeployProjectToDevice()
          VB: Public Shared Function BuildAndDeployProjectToDevice As Boolean
        return:
          type: System.Boolean
          description: True, if the build succeeded
      overload: Editor.Scripts.PlayModeButtonOverride.BuildAndDeployProjectToDevice*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToIOS
      commentId: M:Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToIOS
      language: CSharp
      name:
        CSharp: SwitchBuildTargetToIOS()
        VB: SwitchBuildTargetToIOS()
      nameWithType:
        CSharp: PlayModeButtonOverride.SwitchBuildTargetToIOS()
        VB: PlayModeButtonOverride.SwitchBuildTargetToIOS()
      qualifiedName:
        CSharp: Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToIOS()
        VB: Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToIOS()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: SwitchBuildTargetToIOS
        path: ''
        startLine: 1129
      summary: "\nSwitches Unity Build Target to iOS.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SwitchBuildTargetToIOS()
          VB: Public Shared Sub SwitchBuildTargetToIOS
      overload: Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToIOS*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToAndroid
      commentId: M:Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToAndroid
      language: CSharp
      name:
        CSharp: SwitchBuildTargetToAndroid()
        VB: SwitchBuildTargetToAndroid()
      nameWithType:
        CSharp: PlayModeButtonOverride.SwitchBuildTargetToAndroid()
        VB: PlayModeButtonOverride.SwitchBuildTargetToAndroid()
      qualifiedName:
        CSharp: Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToAndroid()
        VB: Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToAndroid()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: SwitchBuildTargetToAndroid
        path: ''
        startLine: 1137
      summary: "\nSwitches Unity Build Target to Android.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SwitchBuildTargetToAndroid()
          VB: Public Shared Sub SwitchBuildTargetToAndroid
      overload: Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToAndroid*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Editor.Scripts.StateRequestSimulatorEditor
    commentId: T:Editor.Scripts.StateRequestSimulatorEditor
    language: CSharp
    name:
      CSharp: StateRequestSimulatorEditor
      VB: StateRequestSimulatorEditor
    nameWithType:
      CSharp: StateRequestSimulatorEditor
      VB: StateRequestSimulatorEditor
    qualifiedName:
      CSharp: Editor.Scripts.StateRequestSimulatorEditor
      VB: Editor.Scripts.StateRequestSimulatorEditor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Editor.Scripts
    source:
      id: StateRequestSimulatorEditor
      path: ''
      startLine: 1156
    summary: "\nAdds the GUI to the inspector to simulate stateRequests to test the statemachine in the editor.\nThis is an Unity Editor Utility Class for the &quot;StateRequestSimulator&quot; class.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class StateRequestSimulatorEditor : UnityEditor.Editor'
        VB: >-
          Public Class StateRequestSimulatorEditor

              Inherits UnityEditor.Editor
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Editor.Scripts.StateRequestSimulatorEditor.OnInspectorGUI
      commentId: M:Editor.Scripts.StateRequestSimulatorEditor.OnInspectorGUI
      language: CSharp
      name:
        CSharp: OnInspectorGUI()
        VB: OnInspectorGUI()
      nameWithType:
        CSharp: StateRequestSimulatorEditor.OnInspectorGUI()
        VB: StateRequestSimulatorEditor.OnInspectorGUI()
      qualifiedName:
        CSharp: Editor.Scripts.StateRequestSimulatorEditor.OnInspectorGUI()
        VB: Editor.Scripts.StateRequestSimulatorEditor.OnInspectorGUI()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: OnInspectorGUI
        path: ''
        startLine: 1162
      summary: "\nAdds the inspector GUI.\n"
      example: []
      syntax:
        content:
          CSharp: public override void OnInspectorGUI()
          VB: Public Overrides Sub OnInspectorGUI
      overload: Editor.Scripts.StateRequestSimulatorEditor.OnInspectorGUI*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Editor.Scripts.TrainARConvertObjectToolbar
    commentId: T:Editor.Scripts.TrainARConvertObjectToolbar
    language: CSharp
    name:
      CSharp: TrainARConvertObjectToolbar
      VB: TrainARConvertObjectToolbar
    nameWithType:
      CSharp: TrainARConvertObjectToolbar
      VB: TrainARConvertObjectToolbar
    qualifiedName:
      CSharp: Editor.Scripts.TrainARConvertObjectToolbar
      VB: Editor.Scripts.TrainARConvertObjectToolbar
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Editor.Scripts
    source:
      id: TrainARConvertObjectToolbar
      path: ''
      startLine: 1188
    summary: "\nDisplays and initializes the editor toolbar which contains a button that initializes the conversion process\nfor a TrainAR Object of the currently selected object.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class TrainARConvertObjectToolbar : Overlay'
        VB: >-
          Public Class TrainARConvertObjectToolbar

              Inherits Overlay
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Editor.Scripts.TrainARConvertObjectToolbar.CreatePanelContent
      commentId: M:Editor.Scripts.TrainARConvertObjectToolbar.CreatePanelContent
      language: CSharp
      name:
        CSharp: CreatePanelContent()
        VB: CreatePanelContent()
      nameWithType:
        CSharp: TrainARConvertObjectToolbar.CreatePanelContent()
        VB: TrainARConvertObjectToolbar.CreatePanelContent()
      qualifiedName:
        CSharp: Editor.Scripts.TrainARConvertObjectToolbar.CreatePanelContent()
        VB: Editor.Scripts.TrainARConvertObjectToolbar.CreatePanelContent()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: CreatePanelContent
        path: ''
        startLine: 1200
      summary: "\nCreates the Panel that displays the toolbar.\n"
      example: []
      syntax:
        content:
          CSharp: public override VisualElement CreatePanelContent()
          VB: Public Overrides Function CreatePanelContent As VisualElement
        return:
          type: Global.VisualElement
          description: ''
      overload: Editor.Scripts.TrainARConvertObjectToolbar.CreatePanelContent*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Editor.Scripts.TrainARConvertObjectToolbar.OnCreated
      commentId: M:Editor.Scripts.TrainARConvertObjectToolbar.OnCreated
      language: CSharp
      name:
        CSharp: OnCreated()
        VB: OnCreated()
      nameWithType:
        CSharp: TrainARConvertObjectToolbar.OnCreated()
        VB: TrainARConvertObjectToolbar.OnCreated()
      qualifiedName:
        CSharp: Editor.Scripts.TrainARConvertObjectToolbar.OnCreated()
        VB: Editor.Scripts.TrainARConvertObjectToolbar.OnCreated()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: OnCreated
        path: ''
        startLine: 1209
      syntax:
        content:
          CSharp: public override void OnCreated()
          VB: Public Overrides Sub OnCreated
      overload: Editor.Scripts.TrainARConvertObjectToolbar.OnCreated*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Editor.Scripts.TrainARConvertObjectToolbar.OnWillBeDestroyed
      commentId: M:Editor.Scripts.TrainARConvertObjectToolbar.OnWillBeDestroyed
      language: CSharp
      name:
        CSharp: OnWillBeDestroyed()
        VB: OnWillBeDestroyed()
      nameWithType:
        CSharp: TrainARConvertObjectToolbar.OnWillBeDestroyed()
        VB: TrainARConvertObjectToolbar.OnWillBeDestroyed()
      qualifiedName:
        CSharp: Editor.Scripts.TrainARConvertObjectToolbar.OnWillBeDestroyed()
        VB: Editor.Scripts.TrainARConvertObjectToolbar.OnWillBeDestroyed()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: OnWillBeDestroyed
        path: ''
        startLine: 1217
      syntax:
        content:
          CSharp: public override void OnWillBeDestroyed()
          VB: Public Overrides Sub OnWillBeDestroyed
      overload: Editor.Scripts.TrainARConvertObjectToolbar.OnWillBeDestroyed*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: Editor.Scripts.TrainAREditorMenu
    commentId: T:Editor.Scripts.TrainAREditorMenu
    language: CSharp
    name:
      CSharp: TrainAREditorMenu
      VB: TrainAREditorMenu
    nameWithType:
      CSharp: TrainAREditorMenu
      VB: TrainAREditorMenu
    qualifiedName:
      CSharp: Editor.Scripts.TrainAREditorMenu
      VB: Editor.Scripts.TrainAREditorMenu
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Editor.Scripts
    source:
      id: TrainAREditorMenu
      path: ''
      startLine: 1265
    summary: "\nThe TrainAREditorMenu adds a top menu with options called &quot;TrainAR&quot; for trainAR specific funtionallity like\nbuilding, switching plattform, switching the mode (TrainAR/Unity Editor), and other options.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class TrainAREditorMenu : UnityEditor.Editor'
        VB: >-
          Public Class TrainAREditorMenu

              Inherits UnityEditor.Editor
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Editor.Scripts.TrainAREditorMenu.BuildToDevice
      commentId: M:Editor.Scripts.TrainAREditorMenu.BuildToDevice
      language: CSharp
      name:
        CSharp: BuildToDevice()
        VB: BuildToDevice()
      nameWithType:
        CSharp: TrainAREditorMenu.BuildToDevice()
        VB: TrainAREditorMenu.BuildToDevice()
      qualifiedName:
        CSharp: Editor.Scripts.TrainAREditorMenu.BuildToDevice()
        VB: Editor.Scripts.TrainAREditorMenu.BuildToDevice()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: BuildToDevice
        path: ''
        startLine: 1270
      summary: "\nBuild and Runs the current solution when clicked.\n"
      example: []
      syntax:
        content:
          CSharp: public static void BuildToDevice()
          VB: Public Shared Sub BuildToDevice
      overload: Editor.Scripts.TrainAREditorMenu.BuildToDevice*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Editor.Scripts.TrainAREditorMenu.SwitchToAndroid
      commentId: M:Editor.Scripts.TrainAREditorMenu.SwitchToAndroid
      language: CSharp
      name:
        CSharp: SwitchToAndroid()
        VB: SwitchToAndroid()
      nameWithType:
        CSharp: TrainAREditorMenu.SwitchToAndroid()
        VB: TrainAREditorMenu.SwitchToAndroid()
      qualifiedName:
        CSharp: Editor.Scripts.TrainAREditorMenu.SwitchToAndroid()
        VB: Editor.Scripts.TrainAREditorMenu.SwitchToAndroid()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: SwitchToAndroid
        path: ''
        startLine: 1279
      summary: "\nSwitches the current platform to Android when clicked.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SwitchToAndroid()
          VB: Public Shared Sub SwitchToAndroid
      overload: Editor.Scripts.TrainAREditorMenu.SwitchToAndroid*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Editor.Scripts.TrainAREditorMenu.SwitchToIOS
      commentId: M:Editor.Scripts.TrainAREditorMenu.SwitchToIOS
      language: CSharp
      name:
        CSharp: SwitchToIOS()
        VB: SwitchToIOS()
      nameWithType:
        CSharp: TrainAREditorMenu.SwitchToIOS()
        VB: TrainAREditorMenu.SwitchToIOS()
      qualifiedName:
        CSharp: Editor.Scripts.TrainAREditorMenu.SwitchToIOS()
        VB: Editor.Scripts.TrainAREditorMenu.SwitchToIOS()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: SwitchToIOS
        path: ''
        startLine: 1289
      summary: "\nSwitches the current platform to iOS when clicked.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SwitchToIOS()
          VB: Public Shared Sub SwitchToIOS
      overload: Editor.Scripts.TrainAREditorMenu.SwitchToIOS*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Editor.Scripts.TrainAREditorMenu.SwitchToTrainARMode
      commentId: M:Editor.Scripts.TrainAREditorMenu.SwitchToTrainARMode
      language: CSharp
      name:
        CSharp: SwitchToTrainARMode()
        VB: SwitchToTrainARMode()
      nameWithType:
        CSharp: TrainAREditorMenu.SwitchToTrainARMode()
        VB: TrainAREditorMenu.SwitchToTrainARMode()
      qualifiedName:
        CSharp: Editor.Scripts.TrainAREditorMenu.SwitchToTrainARMode()
        VB: Editor.Scripts.TrainAREditorMenu.SwitchToTrainARMode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: SwitchToTrainARMode
        path: ''
        startLine: 1301
      summary: "\nSwitches the Editor Layout to TrainAR Authoring mode when clicked.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SwitchToTrainARMode()
          VB: Public Shared Sub SwitchToTrainARMode
      overload: Editor.Scripts.TrainAREditorMenu.SwitchToTrainARMode*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Editor.Scripts.TrainAREditorMenu.SwitchToUnityMode
      commentId: M:Editor.Scripts.TrainAREditorMenu.SwitchToUnityMode
      language: CSharp
      name:
        CSharp: SwitchToUnityMode()
        VB: SwitchToUnityMode()
      nameWithType:
        CSharp: TrainAREditorMenu.SwitchToUnityMode()
        VB: TrainAREditorMenu.SwitchToUnityMode()
      qualifiedName:
        CSharp: Editor.Scripts.TrainAREditorMenu.SwitchToUnityMode()
        VB: Editor.Scripts.TrainAREditorMenu.SwitchToUnityMode()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: SwitchToUnityMode
        path: ''
        startLine: 1332
      summary: "\nSwitches the Editor Layout to the default Unity Layout when clicked.\n"
      example: []
      syntax:
        content:
          CSharp: public static void SwitchToUnityMode()
          VB: Public Shared Sub SwitchToUnityMode
      overload: Editor.Scripts.TrainAREditorMenu.SwitchToUnityMode*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Editor.Scripts.TrainAREditorMenu.ResetTrainARSceneToAuthoringToolDefault
      commentId: M:Editor.Scripts.TrainAREditorMenu.ResetTrainARSceneToAuthoringToolDefault
      language: CSharp
      name:
        CSharp: ResetTrainARSceneToAuthoringToolDefault()
        VB: ResetTrainARSceneToAuthoringToolDefault()
      nameWithType:
        CSharp: TrainAREditorMenu.ResetTrainARSceneToAuthoringToolDefault()
        VB: TrainAREditorMenu.ResetTrainARSceneToAuthoringToolDefault()
      qualifiedName:
        CSharp: Editor.Scripts.TrainAREditorMenu.ResetTrainARSceneToAuthoringToolDefault()
        VB: Editor.Scripts.TrainAREditorMenu.ResetTrainARSceneToAuthoringToolDefault()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: ResetTrainARSceneToAuthoringToolDefault
        path: ''
        startLine: 1355
      summary: "\nResets the scene camera to a pivot point, rotation and distance that looks good in the Scene.\n"
      example: []
      syntax:
        content:
          CSharp: public static void ResetTrainARSceneToAuthoringToolDefault()
          VB: Public Shared Sub ResetTrainARSceneToAuthoringToolDefault
      overload: Editor.Scripts.TrainAREditorMenu.ResetTrainARSceneToAuthoringToolDefault*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Editor.Scripts.TrainAREditorMenu.HideTrainARReferenceScene
      commentId: M:Editor.Scripts.TrainAREditorMenu.HideTrainARReferenceScene
      language: CSharp
      name:
        CSharp: HideTrainARReferenceScene()
        VB: HideTrainARReferenceScene()
      nameWithType:
        CSharp: TrainAREditorMenu.HideTrainARReferenceScene()
        VB: TrainAREditorMenu.HideTrainARReferenceScene()
      qualifiedName:
        CSharp: Editor.Scripts.TrainAREditorMenu.HideTrainARReferenceScene()
        VB: Editor.Scripts.TrainAREditorMenu.HideTrainARReferenceScene()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: HideTrainARReferenceScene
        path: ''
        startLine: 1414
      summary: "\nHides the TrainAR reference setup in the scene when clicked.\n"
      example: []
      syntax:
        content:
          CSharp: public static void HideTrainARReferenceScene()
          VB: Public Shared Sub HideTrainARReferenceScene
      overload: Editor.Scripts.TrainAREditorMenu.HideTrainARReferenceScene*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Editor.Scripts.TrainAREditorMenu.OpenTrainARScene
      commentId: M:Editor.Scripts.TrainAREditorMenu.OpenTrainARScene
      language: CSharp
      name:
        CSharp: OpenTrainARScene()
        VB: OpenTrainARScene()
      nameWithType:
        CSharp: TrainAREditorMenu.OpenTrainARScene()
        VB: TrainAREditorMenu.OpenTrainARScene()
      qualifiedName:
        CSharp: Editor.Scripts.TrainAREditorMenu.OpenTrainARScene()
        VB: Editor.Scripts.TrainAREditorMenu.OpenTrainARScene()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: OpenTrainARScene
        path: ''
        startLine: 1440
      summary: "\nOpens the default TrainAR scene when clicked.\n"
      example: []
      syntax:
        content:
          CSharp: public static void OpenTrainARScene()
          VB: Public Shared Sub OpenTrainARScene
      overload: Editor.Scripts.TrainAREditorMenu.OpenTrainARScene*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Editor.Scripts.TrainAREditorMenu.ResetStatemachineToDefault
      commentId: M:Editor.Scripts.TrainAREditorMenu.ResetStatemachineToDefault
      language: CSharp
      name:
        CSharp: ResetStatemachineToDefault()
        VB: ResetStatemachineToDefault()
      nameWithType:
        CSharp: TrainAREditorMenu.ResetStatemachineToDefault()
        VB: TrainAREditorMenu.ResetStatemachineToDefault()
      qualifiedName:
        CSharp: Editor.Scripts.TrainAREditorMenu.ResetStatemachineToDefault()
        VB: Editor.Scripts.TrainAREditorMenu.ResetStatemachineToDefault()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: ResetStatemachineToDefault
        path: ''
        startLine: 1455
      summary: "\nOpens the default statemachine in the visual scripting window when clicked.\n"
      example: []
      syntax:
        content:
          CSharp: public static void ResetStatemachineToDefault()
          VB: Public Shared Sub ResetStatemachineToDefault
      overload: Editor.Scripts.TrainAREditorMenu.ResetStatemachineToDefault*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Editor.Scripts.TrainAREditorMenu.HideFrameworkHierarchy
      commentId: M:Editor.Scripts.TrainAREditorMenu.HideFrameworkHierarchy
      language: CSharp
      name:
        CSharp: HideFrameworkHierarchy()
        VB: HideFrameworkHierarchy()
      nameWithType:
        CSharp: TrainAREditorMenu.HideFrameworkHierarchy()
        VB: TrainAREditorMenu.HideFrameworkHierarchy()
      qualifiedName:
        CSharp: Editor.Scripts.TrainAREditorMenu.HideFrameworkHierarchy()
        VB: Editor.Scripts.TrainAREditorMenu.HideFrameworkHierarchy()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: HideFrameworkHierarchy
        path: ''
        startLine: 1473
      summary: "\nHides the framework GameObject in the hierarchy when clicked.\n"
      example: []
      syntax:
        content:
          CSharp: public static void HideFrameworkHierarchy()
          VB: Public Shared Sub HideFrameworkHierarchy
      overload: Editor.Scripts.TrainAREditorMenu.HideFrameworkHierarchy*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Editor.Scripts.TrainAREditorMenu.ShowFrameworkHierarchy
      commentId: M:Editor.Scripts.TrainAREditorMenu.ShowFrameworkHierarchy
      language: CSharp
      name:
        CSharp: ShowFrameworkHierarchy()
        VB: ShowFrameworkHierarchy()
      nameWithType:
        CSharp: TrainAREditorMenu.ShowFrameworkHierarchy()
        VB: TrainAREditorMenu.ShowFrameworkHierarchy()
      qualifiedName:
        CSharp: Editor.Scripts.TrainAREditorMenu.ShowFrameworkHierarchy()
        VB: Editor.Scripts.TrainAREditorMenu.ShowFrameworkHierarchy()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: ShowFrameworkHierarchy
        path: ''
        startLine: 1491
      summary: "\nShows the framework GameObject in the hierarchy when clicked.\n"
      example: []
      syntax:
        content:
          CSharp: public static void ShowFrameworkHierarchy()
          VB: Public Shared Sub ShowFrameworkHierarchy
      overload: Editor.Scripts.TrainAREditorMenu.ShowFrameworkHierarchy*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Editor.Scripts.TrainAREditorMenu.OpenDocumentation
      commentId: M:Editor.Scripts.TrainAREditorMenu.OpenDocumentation
      language: CSharp
      name:
        CSharp: OpenDocumentation()
        VB: OpenDocumentation()
      nameWithType:
        CSharp: TrainAREditorMenu.OpenDocumentation()
        VB: TrainAREditorMenu.OpenDocumentation()
      qualifiedName:
        CSharp: Editor.Scripts.TrainAREditorMenu.OpenDocumentation()
        VB: Editor.Scripts.TrainAREditorMenu.OpenDocumentation()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: OpenDocumentation
        path: ''
        startLine: 1509
      summary: "\nOpens the Documentation when clicked.\n"
      example: []
      syntax:
        content:
          CSharp: public static void OpenDocumentation()
          VB: Public Shared Sub OpenDocumentation
      overload: Editor.Scripts.TrainAREditorMenu.OpenDocumentation*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Editor.Scripts.TrainARObjectConversionWindow
    commentId: T:Editor.Scripts.TrainARObjectConversionWindow
    language: CSharp
    name:
      CSharp: TrainARObjectConversionWindow
      VB: TrainARObjectConversionWindow
    nameWithType:
      CSharp: TrainARObjectConversionWindow
      VB: TrainARObjectConversionWindow
    qualifiedName:
      CSharp: Editor.Scripts.TrainARObjectConversionWindow
      VB: Editor.Scripts.TrainARObjectConversionWindow
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Editor.Scripts
    source:
      id: TrainARObjectConversionWindow
      path: ''
      startLine: 1529
    summary: "\nInstance of the Editor Window with enables the user to specify options for the TrainAR Object and initializes\nthe conversion process.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class TrainARObjectConversionWindow : EditorWindow'
        VB: >-
          Public Class TrainARObjectConversionWindow

              Inherits EditorWindow
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Editor.Scripts.TrainARObjectConversionWindow.WindowWithObjectAlreadyExists(GameObject)
      commentId: M:Editor.Scripts.TrainARObjectConversionWindow.WindowWithObjectAlreadyExists(GameObject)
      language: CSharp
      name:
        CSharp: WindowWithObjectAlreadyExists(GameObject)
        VB: WindowWithObjectAlreadyExists(GameObject)
      nameWithType:
        CSharp: TrainARObjectConversionWindow.WindowWithObjectAlreadyExists(GameObject)
        VB: TrainARObjectConversionWindow.WindowWithObjectAlreadyExists(GameObject)
      qualifiedName:
        CSharp: Editor.Scripts.TrainARObjectConversionWindow.WindowWithObjectAlreadyExists(GameObject)
        VB: Editor.Scripts.TrainARObjectConversionWindow.WindowWithObjectAlreadyExists(GameObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: WindowWithObjectAlreadyExists
        path: ''
        startLine: 1709
      summary: "\nChecks whether or not a TrainARObjectConversionWindow with the given Gameobject is already active.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool WindowWithObjectAlreadyExists(GameObject gameObject)
          VB: Public Shared Function WindowWithObjectAlreadyExists(gameObject As GameObject) As Boolean
        parameters:
        - id: gameObject
          type: Global.GameObject
          description: The Gameobject to be checked.
        return:
          type: System.Boolean
          description: >
            True if a TrainARObjectConversionWindow with the given Gameobject already exists.
      overload: Editor.Scripts.TrainARObjectConversionWindow.WindowWithObjectAlreadyExists*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Editor.Scripts.TrainARObjectOffsetToolbar
    commentId: T:Editor.Scripts.TrainARObjectOffsetToolbar
    language: CSharp
    name:
      CSharp: TrainARObjectOffsetToolbar
      VB: TrainARObjectOffsetToolbar
    nameWithType:
      CSharp: TrainARObjectOffsetToolbar
      VB: TrainARObjectOffsetToolbar
    qualifiedName:
      CSharp: Editor.Scripts.TrainARObjectOffsetToolbar
      VB: Editor.Scripts.TrainARObjectOffsetToolbar
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Editor.Scripts
    source:
      id: TrainARObjectOffsetToolbar
      path: ''
      startLine: 1737
    summary: "\nThe TrainARObjectOffsetToolbar is a toolbar in the Scene view when using the TrainAR authoring overlay. It is displayed\ninstead of the TrainARObjectToolbar when two objects are selected in the editor.\nIt displays the positional and rotational offsets between the two selected objects, so the user can use them,\ne.g. for the FuseObjects functionality of the object helper node. \n"
    example: []
    syntax:
      content:
        CSharp: 'public class TrainARObjectOffsetToolbar : Overlay'
        VB: >-
          Public Class TrainARObjectOffsetToolbar

              Inherits Overlay
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Editor.Scripts.TrainARObjectOffsetToolbar.CreatePanelContent
      commentId: M:Editor.Scripts.TrainARObjectOffsetToolbar.CreatePanelContent
      language: CSharp
      name:
        CSharp: CreatePanelContent()
        VB: CreatePanelContent()
      nameWithType:
        CSharp: TrainARObjectOffsetToolbar.CreatePanelContent()
        VB: TrainARObjectOffsetToolbar.CreatePanelContent()
      qualifiedName:
        CSharp: Editor.Scripts.TrainARObjectOffsetToolbar.CreatePanelContent()
        VB: Editor.Scripts.TrainARObjectOffsetToolbar.CreatePanelContent()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: CreatePanelContent
        path: ''
        startLine: 1749
      summary: "\nCreates the Panel that displays the toolbar\n"
      example: []
      syntax:
        content:
          CSharp: public override VisualElement CreatePanelContent()
          VB: Public Overrides Function CreatePanelContent As VisualElement
        return:
          type: Global.VisualElement
          description: ''
      overload: Editor.Scripts.TrainARObjectOffsetToolbar.CreatePanelContent*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Editor.Scripts.TrainARObjectOffsetToolbar.OnCreated
      commentId: M:Editor.Scripts.TrainARObjectOffsetToolbar.OnCreated
      language: CSharp
      name:
        CSharp: OnCreated()
        VB: OnCreated()
      nameWithType:
        CSharp: TrainARObjectOffsetToolbar.OnCreated()
        VB: TrainARObjectOffsetToolbar.OnCreated()
      qualifiedName:
        CSharp: Editor.Scripts.TrainARObjectOffsetToolbar.OnCreated()
        VB: Editor.Scripts.TrainARObjectOffsetToolbar.OnCreated()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: OnCreated
        path: ''
        startLine: 1754
      syntax:
        content:
          CSharp: public override void OnCreated()
          VB: Public Overrides Sub OnCreated
      overload: Editor.Scripts.TrainARObjectOffsetToolbar.OnCreated*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: Editor.Scripts.TrainARObjectOffsetToolbar.OnWillBeDestroyed
      commentId: M:Editor.Scripts.TrainARObjectOffsetToolbar.OnWillBeDestroyed
      language: CSharp
      name:
        CSharp: OnWillBeDestroyed()
        VB: OnWillBeDestroyed()
      nameWithType:
        CSharp: TrainARObjectOffsetToolbar.OnWillBeDestroyed()
        VB: TrainARObjectOffsetToolbar.OnWillBeDestroyed()
      qualifiedName:
        CSharp: Editor.Scripts.TrainARObjectOffsetToolbar.OnWillBeDestroyed()
        VB: Editor.Scripts.TrainARObjectOffsetToolbar.OnWillBeDestroyed()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Editor.Scripts
      source:
        id: OnWillBeDestroyed
        path: ''
        startLine: 1760
      syntax:
        content:
          CSharp: public override void OnWillBeDestroyed()
          VB: Public Overrides Sub OnWillBeDestroyed
      overload: Editor.Scripts.TrainARObjectOffsetToolbar.OnWillBeDestroyed*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
- id: Interaction
  commentId: N:Interaction
  language: CSharp
  name:
    CSharp: Interaction
    VB: Interaction
  nameWithType:
    CSharp: Interaction
    VB: Interaction
  qualifiedName:
    CSharp: Interaction
    VB: Interaction
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Interaction.AudioController
    commentId: T:Interaction.AudioController
    language: CSharp
    name:
      CSharp: AudioController
      VB: AudioController
    nameWithType:
      CSharp: AudioController
      VB: AudioController
    qualifiedName:
      CSharp: Interaction.AudioController
      VB: Interaction.AudioController
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Interaction
    source:
      id: AudioController
      path: ''
      startLine: 1825
    summary: "\nThe AudioController is a behaviour automatically attached to a TrainAR Object on conversion. It triggers\nits sounds for selection, deselection, grabbing, releasing and correct/incorrect interactions/combinations\nspecific to this object.\n\nWhen attached, it holds default sounds. Those can be replaced in the Unity Editor Inspector.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class AudioController : MonoBehaviour'
        VB: >-
          Public Class AudioController

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Interaction.AudioController.SelectSound
      commentId: F:Interaction.AudioController.SelectSound
      language: CSharp
      name:
        CSharp: SelectSound
        VB: SelectSound
      nameWithType:
        CSharp: AudioController.SelectSound
        VB: AudioController.SelectSound
      qualifiedName:
        CSharp: Interaction.AudioController.SelectSound
        VB: Interaction.AudioController.SelectSound
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: SelectSound
        path: ''
        startLine: 1832
      summary: "\nThe audioclip that is played when a TrainAR Object is selected.\n"
      example: []
      syntax:
        content:
          CSharp: public AudioClip SelectSound
          VB: Public SelectSound As AudioClip
        return:
          type: Global.AudioClip
          description: Default clip is referenced. If none is referenced it gets ignored.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.AudioController.DeselectSound
      commentId: F:Interaction.AudioController.DeselectSound
      language: CSharp
      name:
        CSharp: DeselectSound
        VB: DeselectSound
      nameWithType:
        CSharp: AudioController.DeselectSound
        VB: AudioController.DeselectSound
      qualifiedName:
        CSharp: Interaction.AudioController.DeselectSound
        VB: Interaction.AudioController.DeselectSound
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: DeselectSound
        path: ''
        startLine: 1838
      summary: "\nThe audioclip that is played when a TrainAR Object is deselected.\n"
      example: []
      syntax:
        content:
          CSharp: public AudioClip DeselectSound
          VB: Public DeselectSound As AudioClip
        return:
          type: Global.AudioClip
          description: Default clip is referenced. If none is referenced it gets ignored.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.AudioController.GrabSound
      commentId: F:Interaction.AudioController.GrabSound
      language: CSharp
      name:
        CSharp: GrabSound
        VB: GrabSound
      nameWithType:
        CSharp: AudioController.GrabSound
        VB: AudioController.GrabSound
      qualifiedName:
        CSharp: Interaction.AudioController.GrabSound
        VB: Interaction.AudioController.GrabSound
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: GrabSound
        path: ''
        startLine: 1844
      summary: "\nThe audioclip that is played when a TrainAR Object is grabbed.\n"
      example: []
      syntax:
        content:
          CSharp: public AudioClip GrabSound
          VB: Public GrabSound As AudioClip
        return:
          type: Global.AudioClip
          description: Default clip is referenced. If none is referenced it gets ignored.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.AudioController.ReleaseSound
      commentId: F:Interaction.AudioController.ReleaseSound
      language: CSharp
      name:
        CSharp: ReleaseSound
        VB: ReleaseSound
      nameWithType:
        CSharp: AudioController.ReleaseSound
        VB: AudioController.ReleaseSound
      qualifiedName:
        CSharp: Interaction.AudioController.ReleaseSound
        VB: Interaction.AudioController.ReleaseSound
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: ReleaseSound
        path: ''
        startLine: 1850
      summary: "\nThe audioclip that is played when a TrainAR Object is released.\n"
      example: []
      syntax:
        content:
          CSharp: public AudioClip ReleaseSound
          VB: Public ReleaseSound As AudioClip
        return:
          type: Global.AudioClip
          description: Default clip is referenced. If none is referenced it gets ignored.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.AudioController.InteractSound
      commentId: F:Interaction.AudioController.InteractSound
      language: CSharp
      name:
        CSharp: InteractSound
        VB: InteractSound
      nameWithType:
        CSharp: AudioController.InteractSound
        VB: AudioController.InteractSound
      qualifiedName:
        CSharp: Interaction.AudioController.InteractSound
        VB: Interaction.AudioController.InteractSound
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: InteractSound
        path: ''
        startLine: 1857
      summary: "\nThe audioclip that is played when a TrainAR Object is interacted with.\nThis only plays when the statemachine accepts the statechange.\n"
      example: []
      syntax:
        content:
          CSharp: public AudioClip InteractSound
          VB: Public InteractSound As AudioClip
        return:
          type: Global.AudioClip
          description: Default clip is referenced. If none is referenced it gets ignored.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.AudioController.CombineSound
      commentId: F:Interaction.AudioController.CombineSound
      language: CSharp
      name:
        CSharp: CombineSound
        VB: CombineSound
      nameWithType:
        CSharp: AudioController.CombineSound
        VB: AudioController.CombineSound
      qualifiedName:
        CSharp: Interaction.AudioController.CombineSound
        VB: Interaction.AudioController.CombineSound
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: CombineSound
        path: ''
        startLine: 1864
      summary: "\nThe audioclip that is played when a TrainAR Object is combined with.\nThis only plays when the statemachine accepts the statechange.\n"
      example: []
      syntax:
        content:
          CSharp: public AudioClip CombineSound
          VB: Public CombineSound As AudioClip
        return:
          type: Global.AudioClip
          description: Default clip is referenced. If none is referenced it gets ignored.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.AudioController.ErrorSound
      commentId: F:Interaction.AudioController.ErrorSound
      language: CSharp
      name:
        CSharp: ErrorSound
        VB: ErrorSound
      nameWithType:
        CSharp: AudioController.ErrorSound
        VB: AudioController.ErrorSound
      qualifiedName:
        CSharp: Interaction.AudioController.ErrorSound
        VB: Interaction.AudioController.ErrorSound
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: ErrorSound
        path: ''
        startLine: 1870
      summary: "\nThe audioclip that is played when a requested interaction with this object was denied by the statemachine.\n"
      example: []
      syntax:
        content:
          CSharp: public AudioClip ErrorSound
          VB: Public ErrorSound As AudioClip
        return:
          type: Global.AudioClip
          description: Default clip is referenced. If none is referenced it gets ignored.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Interaction.CollisionController
    commentId: T:Interaction.CollisionController
    language: CSharp
    name:
      CSharp: CollisionController
      VB: CollisionController
    nameWithType:
      CSharp: CollisionController
      VB: CollisionController
    qualifiedName:
      CSharp: Interaction.CollisionController
      VB: Interaction.CollisionController
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Interaction
    source:
      id: CollisionController
      path: ''
      startLine: 2066
    summary: "\nDetects and handles collisions of TrainAR Objects. This is e.g. used for combining GameObjects and\nvisualizing interseted states through outlining and shading.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class CollisionController : MonoBehaviour'
        VB: >-
          Public Class CollisionController

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Interaction.CollisionController.boxCollider
      commentId: F:Interaction.CollisionController.boxCollider
      language: CSharp
      name:
        CSharp: boxCollider
        VB: boxCollider
      nameWithType:
        CSharp: CollisionController.boxCollider
        VB: CollisionController.boxCollider
      qualifiedName:
        CSharp: Interaction.CollisionController.boxCollider
        VB: Interaction.CollisionController.boxCollider
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: boxCollider
        path: ''
        startLine: 2074
      summary: "\nHolds a reference to the BoxCollider of the attached Gameobject.\n"
      example: []
      syntax:
        content:
          CSharp: public BoxCollider boxCollider
          VB: Public boxCollider As BoxCollider
        return:
          type: Global.BoxCollider
          description: Boundingbox with dimensions of the mesh.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.CollisionController.grabbedObject
      commentId: F:Interaction.CollisionController.grabbedObject
      language: CSharp
      name:
        CSharp: grabbedObject
        VB: grabbedObject
      nameWithType:
        CSharp: CollisionController.grabbedObject
        VB: CollisionController.grabbedObject
      qualifiedName:
        CSharp: Interaction.CollisionController.grabbedObject
        VB: Interaction.CollisionController.grabbedObject
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: grabbedObject
        path: ''
        startLine: 2082
      summary: "\nHolds a reference to the currently grabbed TrainAR object.\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject grabbedObject
          VB: Public grabbedObject As GameObject
        return:
          type: Global.GameObject
          description: Is changed depending on the grabbed object.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Interaction.CollisionController.Intersection
    commentId: T:Interaction.CollisionController.Intersection
    language: CSharp
    name:
      CSharp: CollisionController.Intersection
      VB: CollisionController.Intersection
    nameWithType:
      CSharp: CollisionController.Intersection
      VB: CollisionController.Intersection
    qualifiedName:
      CSharp: Interaction.CollisionController.Intersection
      VB: Interaction.CollisionController.Intersection
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Interaction
    source:
      id: Intersection
      path: ''
      startLine: 2130
    summary: "\nThe struct that holds references of intersections.\n"
    example: []
    syntax:
      content:
        CSharp: public struct Intersection
        VB: Public Structure Intersection
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Interaction.CollisionController.Intersection.#ctor(GameObject,System.Boolean)
      commentId: M:Interaction.CollisionController.Intersection.#ctor(GameObject,System.Boolean)
      language: CSharp
      name:
        CSharp: Intersection(GameObject, Boolean)
        VB: Intersection(GameObject, Boolean)
      nameWithType:
        CSharp: CollisionController.Intersection.Intersection(GameObject, Boolean)
        VB: CollisionController.Intersection.Intersection(GameObject, Boolean)
      qualifiedName:
        CSharp: Interaction.CollisionController.Intersection.Intersection(GameObject, System.Boolean)
        VB: Interaction.CollisionController.Intersection.Intersection(GameObject, System.Boolean)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: .ctor
        path: ''
        startLine: 2149
      summary: "\nConstructer to create a struct to store references for a detected intersection.\n"
      example: []
      syntax:
        content:
          CSharp: public Intersection(GameObject intersectedObject, bool intersectionDetected)
          VB: Public Sub New(intersectedObject As GameObject, intersectionDetected As Boolean)
        parameters:
        - id: intersectedObject
          type: Global.GameObject
          description: The intersected TrainAR object.
        - id: intersectionDetected
          type: System.Boolean
          description: If a intersection is detected
      overload: Interaction.CollisionController.Intersection.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.CollisionController.Intersection.SetIntersectedObject(GameObject)
      commentId: M:Interaction.CollisionController.Intersection.SetIntersectedObject(GameObject)
      language: CSharp
      name:
        CSharp: SetIntersectedObject(GameObject)
        VB: SetIntersectedObject(GameObject)
      nameWithType:
        CSharp: CollisionController.Intersection.SetIntersectedObject(GameObject)
        VB: CollisionController.Intersection.SetIntersectedObject(GameObject)
      qualifiedName:
        CSharp: Interaction.CollisionController.Intersection.SetIntersectedObject(GameObject)
        VB: Interaction.CollisionController.Intersection.SetIntersectedObject(GameObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: SetIntersectedObject
        path: ''
        startLine: 2158
      summary: "\nSet the intersected TrainAR object reference in the struct.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetIntersectedObject(GameObject intersectedObject)
          VB: Public Sub SetIntersectedObject(intersectedObject As GameObject)
        parameters:
        - id: intersectedObject
          type: Global.GameObject
          description: The intersected Object.
      overload: Interaction.CollisionController.Intersection.SetIntersectedObject*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.CollisionController.Intersection.SetIntersectionDetected(System.Boolean)
      commentId: M:Interaction.CollisionController.Intersection.SetIntersectionDetected(System.Boolean)
      language: CSharp
      name:
        CSharp: SetIntersectionDetected(Boolean)
        VB: SetIntersectionDetected(Boolean)
      nameWithType:
        CSharp: CollisionController.Intersection.SetIntersectionDetected(Boolean)
        VB: CollisionController.Intersection.SetIntersectionDetected(Boolean)
      qualifiedName:
        CSharp: Interaction.CollisionController.Intersection.SetIntersectionDetected(System.Boolean)
        VB: Interaction.CollisionController.Intersection.SetIntersectionDetected(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: SetIntersectionDetected
        path: ''
        startLine: 2166
      summary: "\nSet if a intersection is detected.\n"
      example: []
      syntax:
        content:
          CSharp: public void SetIntersectionDetected(bool intersectionDetected)
          VB: Public Sub SetIntersectionDetected(intersectionDetected As Boolean)
        parameters:
        - id: intersectionDetected
          type: System.Boolean
          description: True if intersection is detected.
      overload: Interaction.CollisionController.Intersection.SetIntersectionDetected*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.CollisionController.Intersection.GetIntersectedObject
      commentId: M:Interaction.CollisionController.Intersection.GetIntersectedObject
      language: CSharp
      name:
        CSharp: GetIntersectedObject()
        VB: GetIntersectedObject()
      nameWithType:
        CSharp: CollisionController.Intersection.GetIntersectedObject()
        VB: CollisionController.Intersection.GetIntersectedObject()
      qualifiedName:
        CSharp: Interaction.CollisionController.Intersection.GetIntersectedObject()
        VB: Interaction.CollisionController.Intersection.GetIntersectedObject()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: GetIntersectedObject
        path: ''
        startLine: 2174
      summary: "\nGet the intersected TrainAR object reference in the struct.\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject GetIntersectedObject()
          VB: Public Function GetIntersectedObject As GameObject
        return:
          type: Global.GameObject
          description: The TrainAR gameobject.
      overload: Interaction.CollisionController.Intersection.GetIntersectedObject*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.CollisionController.Intersection.GetIntersectionDetected
      commentId: M:Interaction.CollisionController.Intersection.GetIntersectionDetected
      language: CSharp
      name:
        CSharp: GetIntersectionDetected()
        VB: GetIntersectionDetected()
      nameWithType:
        CSharp: CollisionController.Intersection.GetIntersectionDetected()
        VB: CollisionController.Intersection.GetIntersectionDetected()
      qualifiedName:
        CSharp: Interaction.CollisionController.Intersection.GetIntersectionDetected()
        VB: Interaction.CollisionController.Intersection.GetIntersectionDetected()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: GetIntersectionDetected
        path: ''
        startLine: 2182
      summary: "\nGet if a intersection is detected.\n"
      example: []
      syntax:
        content:
          CSharp: public bool GetIntersectionDetected()
          VB: Public Function GetIntersectionDetected As Boolean
        return:
          type: System.Boolean
          description: If a intersection is detected.
      overload: Interaction.CollisionController.Intersection.GetIntersectionDetected*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Interaction.CrosshairController
    commentId: T:Interaction.CrosshairController
    language: CSharp
    name:
      CSharp: CrosshairController
      VB: CrosshairController
    nameWithType:
      CSharp: CrosshairController
      VB: CrosshairController
    qualifiedName:
      CSharp: Interaction.CrosshairController
      VB: Interaction.CrosshairController
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Interaction
    source:
      id: CrosshairController
      path: ''
      startLine: 2199
    summary: "\nThe CrosshairController activates/deactivates the crosshair which is positioned in the middle of the screen.\nThis can e.g. happen when an object is grabbed or an overlay is active.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class CrosshairController : MonoBehaviour'
        VB: >-
          Public Class CrosshairController

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Interaction.CrosshairController.contextButtonsAreActive
      commentId: F:Interaction.CrosshairController.contextButtonsAreActive
      language: CSharp
      name:
        CSharp: contextButtonsAreActive
        VB: contextButtonsAreActive
      nameWithType:
        CSharp: CrosshairController.contextButtonsAreActive
        VB: CrosshairController.contextButtonsAreActive
      qualifiedName:
        CSharp: Interaction.CrosshairController.contextButtonsAreActive
        VB: Interaction.CrosshairController.contextButtonsAreActive
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: contextButtonsAreActive
        path: ''
        startLine: 2215
      summary: "\nChanges depending if the contextButtons are active.\n"
      example: []
      syntax:
        content:
          CSharp: public bool contextButtonsAreActive
          VB: Public contextButtonsAreActive As Boolean
        return:
          type: System.Boolean
          description: True if contextButtons are active.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.CrosshairController.ActivateCrosshair
      commentId: M:Interaction.CrosshairController.ActivateCrosshair
      language: CSharp
      name:
        CSharp: ActivateCrosshair()
        VB: ActivateCrosshair()
      nameWithType:
        CSharp: CrosshairController.ActivateCrosshair()
        VB: CrosshairController.ActivateCrosshair()
      qualifiedName:
        CSharp: Interaction.CrosshairController.ActivateCrosshair()
        VB: Interaction.CrosshairController.ActivateCrosshair()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: ActivateCrosshair
        path: ''
        startLine: 2246
      summary: "\nActivate the crosshair.\n"
      example: []
      syntax:
        content:
          CSharp: public void ActivateCrosshair()
          VB: Public Sub ActivateCrosshair
      overload: Interaction.CrosshairController.ActivateCrosshair*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.CrosshairController.DeactivateCrosshair
      commentId: M:Interaction.CrosshairController.DeactivateCrosshair
      language: CSharp
      name:
        CSharp: DeactivateCrosshair()
        VB: DeactivateCrosshair()
      nameWithType:
        CSharp: CrosshairController.DeactivateCrosshair()
        VB: CrosshairController.DeactivateCrosshair()
      qualifiedName:
        CSharp: Interaction.CrosshairController.DeactivateCrosshair()
        VB: Interaction.CrosshairController.DeactivateCrosshair()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: DeactivateCrosshair
        path: ''
        startLine: 2254
      summary: "\nDeactivates the crosshair.\n"
      example: []
      syntax:
        content:
          CSharp: public void DeactivateCrosshair()
          VB: Public Sub DeactivateCrosshair
      overload: Interaction.CrosshairController.DeactivateCrosshair*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.CrosshairController.DeactivateContextButtons
      commentId: M:Interaction.CrosshairController.DeactivateContextButtons
      language: CSharp
      name:
        CSharp: DeactivateContextButtons()
        VB: DeactivateContextButtons()
      nameWithType:
        CSharp: CrosshairController.DeactivateContextButtons()
        VB: CrosshairController.DeactivateContextButtons()
      qualifiedName:
        CSharp: Interaction.CrosshairController.DeactivateContextButtons()
        VB: Interaction.CrosshairController.DeactivateContextButtons()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: DeactivateContextButtons
        path: ''
        startLine: 2261
      summary: "\nDeactivates the context buttons.\n"
      example: []
      syntax:
        content:
          CSharp: public void DeactivateContextButtons()
          VB: Public Sub DeactivateContextButtons
      overload: Interaction.CrosshairController.DeactivateContextButtons*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.CrosshairController.ActivateContextButtons
      commentId: M:Interaction.CrosshairController.ActivateContextButtons
      language: CSharp
      name:
        CSharp: ActivateContextButtons()
        VB: ActivateContextButtons()
      nameWithType:
        CSharp: CrosshairController.ActivateContextButtons()
        VB: CrosshairController.ActivateContextButtons()
      qualifiedName:
        CSharp: Interaction.CrosshairController.ActivateContextButtons()
        VB: Interaction.CrosshairController.ActivateContextButtons()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: ActivateContextButtons
        path: ''
        startLine: 2270
      summary: "\nActivates the context buttons.\n"
      example: []
      syntax:
        content:
          CSharp: public void ActivateContextButtons()
          VB: Public Sub ActivateContextButtons
      overload: Interaction.CrosshairController.ActivateContextButtons*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Interaction.InteractionController
    commentId: T:Interaction.InteractionController
    language: CSharp
    name:
      CSharp: InteractionController
      VB: InteractionController
    nameWithType:
      CSharp: InteractionController
      VB: InteractionController
    qualifiedName:
      CSharp: Interaction.InteractionController
      VB: Interaction.InteractionController
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Interaction
    source:
      id: InteractionController
      path: ''
      startLine: 2287
    summary: "\nHandles the interactions, i.e. grabbing, releasing, interacting and combining of the TrainARObjects.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class InteractionController : MonoBehaviour'
        VB: >-
          Public Class InteractionController

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Interaction.InteractionController.grabber
      commentId: F:Interaction.InteractionController.grabber
      language: CSharp
      name:
        CSharp: grabber
        VB: grabber
      nameWithType:
        CSharp: InteractionController.grabber
        VB: InteractionController.grabber
      qualifiedName:
        CSharp: Interaction.InteractionController.grabber
        VB: Interaction.InteractionController.grabber
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: grabber
        path: ''
        startLine: 2319
      summary: "\nReference to the grabber object, which becomes the parent of a picked up (grabbed) TrainAR-object.\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject grabber
          VB: Public grabber As GameObject
        return:
          type: Global.GameObject
          description: One grabber per scene.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.InteractionController.grabbedObject
      commentId: F:Interaction.InteractionController.grabbedObject
      language: CSharp
      name:
        CSharp: grabbedObject
        VB: grabbedObject
      nameWithType:
        CSharp: InteractionController.grabbedObject
        VB: InteractionController.grabbedObject
      qualifiedName:
        CSharp: Interaction.InteractionController.grabbedObject
        VB: Interaction.InteractionController.grabbedObject
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: grabbedObject
        path: ''
        startLine: 2326
      summary: "\nThe object that is currently grabbed by the user.\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject grabbedObject
          VB: Public grabbedObject As GameObject
        return:
          type: Global.GameObject
          description: Changed when TrainAR object is grabbed/released.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.InteractionController.isGrabbingObject
      commentId: F:Interaction.InteractionController.isGrabbingObject
      language: CSharp
      name:
        CSharp: isGrabbingObject
        VB: isGrabbingObject
      nameWithType:
        CSharp: InteractionController.isGrabbingObject
        VB: InteractionController.isGrabbingObject
      qualifiedName:
        CSharp: Interaction.InteractionController.isGrabbingObject
        VB: Interaction.InteractionController.isGrabbingObject
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: isGrabbingObject
        path: ''
        startLine: 2333
      summary: "\nChanges value when an object is grabbed/released.\n"
      example: []
      syntax:
        content:
          CSharp: public bool isGrabbingObject
          VB: Public isGrabbingObject As Boolean
        return:
          type: System.Boolean
          description: True if a object is grabbed.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.InteractionController.tryedGrabbingObjectUnsuccessfully
      commentId: F:Interaction.InteractionController.tryedGrabbingObjectUnsuccessfully
      language: CSharp
      name:
        CSharp: tryedGrabbingObjectUnsuccessfully
        VB: tryedGrabbingObjectUnsuccessfully
      nameWithType:
        CSharp: InteractionController.tryedGrabbingObjectUnsuccessfully
        VB: InteractionController.tryedGrabbingObjectUnsuccessfully
      qualifiedName:
        CSharp: Interaction.InteractionController.tryedGrabbingObjectUnsuccessfully
        VB: Interaction.InteractionController.tryedGrabbingObjectUnsuccessfully
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: tryedGrabbingObjectUnsuccessfully
        path: ''
        startLine: 2340
      summary: "\nValue is changed when the grab button is pressed.\n"
      example: []
      syntax:
        content:
          CSharp: public bool tryedGrabbingObjectUnsuccessfully
          VB: Public tryedGrabbingObjectUnsuccessfully As Boolean
        return:
          type: System.Boolean
          description: True if a grabbing of an object was not successfull.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.InteractionController.selectedObject
      commentId: F:Interaction.InteractionController.selectedObject
      language: CSharp
      name:
        CSharp: selectedObject
        VB: selectedObject
      nameWithType:
        CSharp: InteractionController.selectedObject
        VB: InteractionController.selectedObject
      qualifiedName:
        CSharp: Interaction.InteractionController.selectedObject
        VB: Interaction.InteractionController.selectedObject
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: selectedObject
        path: ''
        startLine: 2347
      summary: "\nReference to the current selected(aimed at) TrainAR object.\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject selectedObject
          VB: Public selectedObject As GameObject
        return:
          type: Global.GameObject
          description: Changed on selection.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.InteractionController.isSelectingObject
      commentId: F:Interaction.InteractionController.isSelectingObject
      language: CSharp
      name:
        CSharp: isSelectingObject
        VB: isSelectingObject
      nameWithType:
        CSharp: InteractionController.isSelectingObject
        VB: InteractionController.isSelectingObject
      qualifiedName:
        CSharp: Interaction.InteractionController.isSelectingObject
        VB: Interaction.InteractionController.isSelectingObject
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: isSelectingObject
        path: ''
        startLine: 2360
      summary: "\nChanged when TrainAR object is selected/deselected.\n"
      example: []
      syntax:
        content:
          CSharp: public bool isSelectingObject
          VB: Public isSelectingObject As Boolean
        return:
          type: System.Boolean
          description: True if a object is selected.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.InteractionController.intersectedObject
      commentId: F:Interaction.InteractionController.intersectedObject
      language: CSharp
      name:
        CSharp: intersectedObject
        VB: intersectedObject
      nameWithType:
        CSharp: InteractionController.intersectedObject
        VB: InteractionController.intersectedObject
      qualifiedName:
        CSharp: Interaction.InteractionController.intersectedObject
        VB: Interaction.InteractionController.intersectedObject
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: intersectedObject
        path: ''
        startLine: 2367
      summary: "\nReference to the intersected TrainAR object.\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject intersectedObject
          VB: Public intersectedObject As GameObject
        return:
          type: Global.GameObject
          description: Changed when TrainAR object are intersecting.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.InteractionController.isIntersecting
      commentId: F:Interaction.InteractionController.isIntersecting
      language: CSharp
      name:
        CSharp: isIntersecting
        VB: isIntersecting
      nameWithType:
        CSharp: InteractionController.isIntersecting
        VB: InteractionController.isIntersecting
      qualifiedName:
        CSharp: Interaction.InteractionController.isIntersecting
        VB: Interaction.InteractionController.isIntersecting
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: isIntersecting
        path: ''
        startLine: 2374
      summary: "\nChanged on intersection.\n"
      example: []
      syntax:
        content:
          CSharp: public bool isIntersecting
          VB: Public isIntersecting As Boolean
        return:
          type: System.Boolean
          description: True if TrainAR objects ar intersecting.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.InteractionController.hit
      commentId: F:Interaction.InteractionController.hit
      language: CSharp
      name:
        CSharp: hit
        VB: hit
      nameWithType:
        CSharp: InteractionController.hit
        VB: InteractionController.hit
      qualifiedName:
        CSharp: Interaction.InteractionController.hit
        VB: Interaction.InteractionController.hit
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: hit
        path: ''
        startLine: 2380
      summary: "\nRaycast from the center of the screen to detected if a TrainAR object is aimed at.\n"
      example: []
      syntax:
        content:
          CSharp: public RaycastHit hit
          VB: Public hit As RaycastHit
        return:
          type: Global.RaycastHit
          description: Null if no gameObject is hit.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.InteractionController.GrabObject
      commentId: M:Interaction.InteractionController.GrabObject
      language: CSharp
      name:
        CSharp: GrabObject()
        VB: GrabObject()
      nameWithType:
        CSharp: InteractionController.GrabObject()
        VB: InteractionController.GrabObject()
      qualifiedName:
        CSharp: Interaction.InteractionController.GrabObject()
        VB: Interaction.InteractionController.GrabObject()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: GrabObject
        path: ''
        startLine: 2495
      summary: "\nGrab the object that is currently selected by the raycast.\n"
      example: []
      syntax:
        content:
          CSharp: public void GrabObject()
          VB: Public Sub GrabObject
      overload: Interaction.InteractionController.GrabObject*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.InteractionController.ReleaseGrabbedObject(System.Boolean)
      commentId: M:Interaction.InteractionController.ReleaseGrabbedObject(System.Boolean)
      language: CSharp
      name:
        CSharp: ReleaseGrabbedObject(Boolean)
        VB: ReleaseGrabbedObject(Boolean)
      nameWithType:
        CSharp: InteractionController.ReleaseGrabbedObject(Boolean)
        VB: InteractionController.ReleaseGrabbedObject(Boolean)
      qualifiedName:
        CSharp: Interaction.InteractionController.ReleaseGrabbedObject(System.Boolean)
        VB: Interaction.InteractionController.ReleaseGrabbedObject(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: ReleaseGrabbedObject
        path: ''
        startLine: 2530
      summary: "\nRelease the currently grabbed object.\n"
      example: []
      syntax:
        content:
          CSharp: public void ReleaseGrabbedObject(bool fusedObject = false)
          VB: Public Sub ReleaseGrabbedObject(fusedObject As Boolean = False)
        parameters:
        - id: fusedObject
          type: System.Boolean
      overload: Interaction.InteractionController.ReleaseGrabbedObject*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.InteractionController.Interact
      commentId: M:Interaction.InteractionController.Interact
      language: CSharp
      name:
        CSharp: Interact()
        VB: Interact()
      nameWithType:
        CSharp: InteractionController.Interact()
        VB: InteractionController.Interact()
      qualifiedName:
        CSharp: Interaction.InteractionController.Interact()
        VB: Interaction.InteractionController.Interact()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: Interact
        path: ''
        startLine: 2567
      summary: "\nInvokes the Interact on the TrainARObject.\nImportant: This method assumes there is an object selected!\nIt also assumes that ARInteractables have an ObjectInteraktionhandler.\n"
      example: []
      syntax:
        content:
          CSharp: public void Interact()
          VB: Public Sub Interact
      overload: Interaction.InteractionController.Interact*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.InteractionController.Combine
      commentId: M:Interaction.InteractionController.Combine
      language: CSharp
      name:
        CSharp: Combine()
        VB: Combine()
      nameWithType:
        CSharp: InteractionController.Combine()
        VB: InteractionController.Combine()
      qualifiedName:
        CSharp: Interaction.InteractionController.Combine()
        VB: Interaction.InteractionController.Combine()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: Combine
        path: ''
        startLine: 2576
      summary: "\nInvokes the Combine on the TrainARObject.\nImportant: This method assumes there is an object selected and it is currently intersecting with another.\nIt also assumes that ARInteractables have an ObjectInteraktionhandler.\n"
      example: []
      syntax:
        content:
          CSharp: public void Combine()
          VB: Public Sub Combine
      overload: Interaction.InteractionController.Combine*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Interaction.MaterialController
    commentId: T:Interaction.MaterialController
    language: CSharp
    name:
      CSharp: MaterialController
      VB: MaterialController
    nameWithType:
      CSharp: MaterialController
      VB: MaterialController
    qualifiedName:
      CSharp: Interaction.MaterialController
      VB: Interaction.MaterialController
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Interaction
    source:
      id: MaterialController
      path: ''
      startLine: 2619
    summary: "\nHandles material related functionality for TrainAR objects.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class MaterialController : MonoBehaviour'
        VB: >-
          Public Class MaterialController

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Interaction.MaterialController.ActivateOutlines
      commentId: M:Interaction.MaterialController.ActivateOutlines
      language: CSharp
      name:
        CSharp: ActivateOutlines()
        VB: ActivateOutlines()
      nameWithType:
        CSharp: MaterialController.ActivateOutlines()
        VB: MaterialController.ActivateOutlines()
      qualifiedName:
        CSharp: Interaction.MaterialController.ActivateOutlines()
        VB: Interaction.MaterialController.ActivateOutlines()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: ActivateOutlines
        path: ''
        startLine: 2699
      summary: "\nActivates the Outline of the object.\n"
      example: []
      syntax:
        content:
          CSharp: public void ActivateOutlines()
          VB: Public Sub ActivateOutlines
      overload: Interaction.MaterialController.ActivateOutlines*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.MaterialController.DeactivateOutlines
      commentId: M:Interaction.MaterialController.DeactivateOutlines
      language: CSharp
      name:
        CSharp: DeactivateOutlines()
        VB: DeactivateOutlines()
      nameWithType:
        CSharp: MaterialController.DeactivateOutlines()
        VB: MaterialController.DeactivateOutlines()
      qualifiedName:
        CSharp: Interaction.MaterialController.DeactivateOutlines()
        VB: Interaction.MaterialController.DeactivateOutlines()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: DeactivateOutlines
        path: ''
        startLine: 2707
      summary: "\nDeactivates the Outline of the object.\n"
      example: []
      syntax:
        content:
          CSharp: public void DeactivateOutlines()
          VB: Public Sub DeactivateOutlines
      overload: Interaction.MaterialController.DeactivateOutlines*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.MaterialController.ChangeToCombineMaterial
      commentId: M:Interaction.MaterialController.ChangeToCombineMaterial
      language: CSharp
      name:
        CSharp: ChangeToCombineMaterial()
        VB: ChangeToCombineMaterial()
      nameWithType:
        CSharp: MaterialController.ChangeToCombineMaterial()
        VB: MaterialController.ChangeToCombineMaterial()
      qualifiedName:
        CSharp: Interaction.MaterialController.ChangeToCombineMaterial()
        VB: Interaction.MaterialController.ChangeToCombineMaterial()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: ChangeToCombineMaterial
        path: ''
        startLine: 2763
      summary: "\nReplaces all materials on the this Object with a material for combining.\n"
      example: []
      syntax:
        content:
          CSharp: public void ChangeToCombineMaterial()
          VB: Public Sub ChangeToCombineMaterial
      overload: Interaction.MaterialController.ChangeToCombineMaterial*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.MaterialController.resetOriginalMaterial
      commentId: M:Interaction.MaterialController.resetOriginalMaterial
      language: CSharp
      name:
        CSharp: resetOriginalMaterial()
        VB: resetOriginalMaterial()
      nameWithType:
        CSharp: MaterialController.resetOriginalMaterial()
        VB: MaterialController.resetOriginalMaterial()
      qualifiedName:
        CSharp: Interaction.MaterialController.resetOriginalMaterial()
        VB: Interaction.MaterialController.resetOriginalMaterial()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: resetOriginalMaterial
        path: ''
        startLine: 2792
      summary: "\nResets the current materials back to original materials of the object.\n"
      example: []
      syntax:
        content:
          CSharp: public void resetOriginalMaterial()
          VB: Public Sub resetOriginalMaterial
      overload: Interaction.MaterialController.resetOriginalMaterial*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.MaterialController.setNewOriginalMaterial(GameObject,Material)
      commentId: M:Interaction.MaterialController.setNewOriginalMaterial(GameObject,Material)
      language: CSharp
      name:
        CSharp: setNewOriginalMaterial(GameObject, Material)
        VB: setNewOriginalMaterial(GameObject, Material)
      nameWithType:
        CSharp: MaterialController.setNewOriginalMaterial(GameObject, Material)
        VB: MaterialController.setNewOriginalMaterial(GameObject, Material)
      qualifiedName:
        CSharp: Interaction.MaterialController.setNewOriginalMaterial(GameObject, Material)
        VB: Interaction.MaterialController.setNewOriginalMaterial(GameObject, Material)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: setNewOriginalMaterial
        path: ''
        startLine: 2805
      summary: "\nChange the original material of the given object with to a new material.\n"
      example: []
      syntax:
        content:
          CSharp: public void setNewOriginalMaterial(GameObject gameObject, Material newMaterial)
          VB: Public Sub setNewOriginalMaterial(gameObject As GameObject, newMaterial As Material)
        parameters:
        - id: gameObject
          type: Global.GameObject
          description: The gameobject where the material is changed.
        - id: newMaterial
          type: Global.Material
          description: The new material.
      overload: Interaction.MaterialController.setNewOriginalMaterial*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.MaterialController.ActivateErrorIndicator
      commentId: M:Interaction.MaterialController.ActivateErrorIndicator
      language: CSharp
      name:
        CSharp: ActivateErrorIndicator()
        VB: ActivateErrorIndicator()
      nameWithType:
        CSharp: MaterialController.ActivateErrorIndicator()
        VB: MaterialController.ActivateErrorIndicator()
      qualifiedName:
        CSharp: Interaction.MaterialController.ActivateErrorIndicator()
        VB: Interaction.MaterialController.ActivateErrorIndicator()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: ActivateErrorIndicator
        path: ''
        startLine: 2847
      summary: "\nPlay Error outline animation in coroutine.\n"
      example: []
      syntax:
        content:
          CSharp: public void ActivateErrorIndicator()
          VB: Public Sub ActivateErrorIndicator
      overload: Interaction.MaterialController.ActivateErrorIndicator*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.MaterialController.ActivateSuccessIndicator
      commentId: M:Interaction.MaterialController.ActivateSuccessIndicator
      language: CSharp
      name:
        CSharp: ActivateSuccessIndicator()
        VB: ActivateSuccessIndicator()
      nameWithType:
        CSharp: MaterialController.ActivateSuccessIndicator()
        VB: MaterialController.ActivateSuccessIndicator()
      qualifiedName:
        CSharp: Interaction.MaterialController.ActivateSuccessIndicator()
        VB: Interaction.MaterialController.ActivateSuccessIndicator()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: ActivateSuccessIndicator
        path: ''
        startLine: 2912
      summary: "\nPlay Success outline animation in coroutine.\n"
      example: []
      syntax:
        content:
          CSharp: public void ActivateSuccessIndicator()
          VB: Public Sub ActivateSuccessIndicator
      overload: Interaction.MaterialController.ActivateSuccessIndicator*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.MaterialController.ActivateSuccessIndicator(System.String)
      commentId: M:Interaction.MaterialController.ActivateSuccessIndicator(System.String)
      language: CSharp
      name:
        CSharp: ActivateSuccessIndicator(String)
        VB: ActivateSuccessIndicator(String)
      nameWithType:
        CSharp: MaterialController.ActivateSuccessIndicator(String)
        VB: MaterialController.ActivateSuccessIndicator(String)
      qualifiedName:
        CSharp: Interaction.MaterialController.ActivateSuccessIndicator(System.String)
        VB: Interaction.MaterialController.ActivateSuccessIndicator(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: ActivateSuccessIndicator
        path: ''
        startLine: 2922
      summary: "\nPlay Success outline animation in coroutine.\n"
      example: []
      syntax:
        content:
          CSharp: public void ActivateSuccessIndicator(string CombinedWith)
          VB: Public Sub ActivateSuccessIndicator(CombinedWith As String)
        parameters:
        - id: CombinedWith
          type: System.String
      overload: Interaction.MaterialController.ActivateSuccessIndicator*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Interaction.ObjectLerpingController
    commentId: T:Interaction.ObjectLerpingController
    language: CSharp
    name:
      CSharp: ObjectLerpingController
      VB: ObjectLerpingController
    nameWithType:
      CSharp: ObjectLerpingController
      VB: ObjectLerpingController
    qualifiedName:
      CSharp: Interaction.ObjectLerpingController
      VB: Interaction.ObjectLerpingController
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Interaction
    source:
      id: ObjectLerpingController
      path: ''
      startLine: 2990
    summary: "\nWhen TrainAR objects are grabbed, they lerp towards to correct position attached to the camera instead of appearing there. \nThe ObjectLerpingController handles the lerping towards the camera when the object is grabbed.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ObjectLerpingController : MonoBehaviour'
        VB: >-
          Public Class ObjectLerpingController

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Interaction.Outline
    commentId: T:Interaction.Outline
    language: CSharp
    name:
      CSharp: Outline
      VB: Outline
    nameWithType:
      CSharp: Outline
      VB: Outline
    qualifiedName:
      CSharp: Interaction.Outline
      VB: Interaction.Outline
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Interaction
    source:
      id: Outline
      path: ''
      startLine: 3183
    summary: "\nThe Outline script is automatically attached to TrainAR objects on conversion and handles the outlining\nfor e.g. selection, success or failure. It is called and handled by the MaterialController.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Outline : MonoBehaviour'
        VB: >-
          Public Class Outline

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Interaction.Outline.OutlineMode
      commentId: P:Interaction.Outline.OutlineMode
      language: CSharp
      name:
        CSharp: OutlineMode
        VB: OutlineMode
      nameWithType:
        CSharp: Outline.OutlineMode
        VB: Outline.OutlineMode
      qualifiedName:
        CSharp: Interaction.Outline.OutlineMode
        VB: Interaction.Outline.OutlineMode
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: OutlineMode
        path: ''
        startLine: 3201
      summary: "\nThe type of outline used. (e.g. if it shows through other objects)\n"
      example: []
      syntax:
        content:
          CSharp: public Outline.Mode OutlineMode { get; set; }
          VB: Public Property OutlineMode As Outline.Mode
        parameters: []
        return:
          type: Interaction.Outline.Mode
      overload: Interaction.Outline.OutlineMode*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Interaction.Outline.OutlineColor
      commentId: P:Interaction.Outline.OutlineColor
      language: CSharp
      name:
        CSharp: OutlineColor
        VB: OutlineColor
      nameWithType:
        CSharp: Outline.OutlineColor
        VB: Outline.OutlineColor
      qualifiedName:
        CSharp: Interaction.Outline.OutlineColor
        VB: Interaction.Outline.OutlineColor
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: OutlineColor
        path: ''
        startLine: 3212
      summary: "\nThe color of the outline.\n"
      example: []
      syntax:
        content:
          CSharp: public Color OutlineColor { get; set; }
          VB: Public Property OutlineColor As Color
        parameters: []
        return:
          type: Global.Color
      overload: Interaction.Outline.OutlineColor*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Interaction.Outline.OutlineWidth
      commentId: P:Interaction.Outline.OutlineWidth
      language: CSharp
      name:
        CSharp: OutlineWidth
        VB: OutlineWidth
      nameWithType:
        CSharp: Outline.OutlineWidth
        VB: Outline.OutlineWidth
      qualifiedName:
        CSharp: Interaction.Outline.OutlineWidth
        VB: Interaction.Outline.OutlineWidth
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: OutlineWidth
        path: ''
        startLine: 3223
      summary: "\nThe width/thickness of the outline.\n"
      example: []
      syntax:
        content:
          CSharp: public float OutlineWidth { get; set; }
          VB: Public Property OutlineWidth As Single
        parameters: []
        return:
          type: System.Single
      overload: Interaction.Outline.OutlineWidth*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Interaction.Outline.Mode
    commentId: T:Interaction.Outline.Mode
    language: CSharp
    name:
      CSharp: Outline.Mode
      VB: Outline.Mode
    nameWithType:
      CSharp: Outline.Mode
      VB: Outline.Mode
    qualifiedName:
      CSharp: Interaction.Outline.Mode
      VB: Interaction.Outline.Mode
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Interaction
    source:
      id: Mode
      path: ''
      startLine: 3190
    summary: "\nDifferentiates the type of the outlines used.\n"
    example: []
    syntax:
      content:
        CSharp: public enum Mode
        VB: Public Enum Mode
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Interaction.Outline.Mode.OutlineAll
      commentId: F:Interaction.Outline.Mode.OutlineAll
      language: CSharp
      name:
        CSharp: OutlineAll
        VB: OutlineAll
      nameWithType:
        CSharp: Outline.Mode.OutlineAll
        VB: Outline.Mode.OutlineAll
      qualifiedName:
        CSharp: Interaction.Outline.Mode.OutlineAll
        VB: Interaction.Outline.Mode.OutlineAll
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: OutlineAll
        path: ''
        startLine: 3191
      syntax:
        content:
          CSharp: OutlineAll = 0
          VB: OutlineAll = 0
        return:
          type: Interaction.Outline.Mode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Interaction.Outline.Mode.OutlineVisible
      commentId: F:Interaction.Outline.Mode.OutlineVisible
      language: CSharp
      name:
        CSharp: OutlineVisible
        VB: OutlineVisible
      nameWithType:
        CSharp: Outline.Mode.OutlineVisible
        VB: Outline.Mode.OutlineVisible
      qualifiedName:
        CSharp: Interaction.Outline.Mode.OutlineVisible
        VB: Interaction.Outline.Mode.OutlineVisible
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: OutlineVisible
        path: ''
        startLine: 3192
      syntax:
        content:
          CSharp: OutlineVisible = 1
          VB: OutlineVisible = 1
        return:
          type: Interaction.Outline.Mode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Interaction.Outline.Mode.OutlineHidden
      commentId: F:Interaction.Outline.Mode.OutlineHidden
      language: CSharp
      name:
        CSharp: OutlineHidden
        VB: OutlineHidden
      nameWithType:
        CSharp: Outline.Mode.OutlineHidden
        VB: Outline.Mode.OutlineHidden
      qualifiedName:
        CSharp: Interaction.Outline.Mode.OutlineHidden
        VB: Interaction.Outline.Mode.OutlineHidden
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: OutlineHidden
        path: ''
        startLine: 3193
      syntax:
        content:
          CSharp: OutlineHidden = 2
          VB: OutlineHidden = 2
        return:
          type: Interaction.Outline.Mode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Interaction.Outline.Mode.OutlineAndSilhouette
      commentId: F:Interaction.Outline.Mode.OutlineAndSilhouette
      language: CSharp
      name:
        CSharp: OutlineAndSilhouette
        VB: OutlineAndSilhouette
      nameWithType:
        CSharp: Outline.Mode.OutlineAndSilhouette
        VB: Outline.Mode.OutlineAndSilhouette
      qualifiedName:
        CSharp: Interaction.Outline.Mode.OutlineAndSilhouette
        VB: Interaction.Outline.Mode.OutlineAndSilhouette
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: OutlineAndSilhouette
        path: ''
        startLine: 3194
      syntax:
        content:
          CSharp: OutlineAndSilhouette = 3
          VB: OutlineAndSilhouette = 3
        return:
          type: Interaction.Outline.Mode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Interaction.Outline.Mode.SilhouetteOnly
      commentId: F:Interaction.Outline.Mode.SilhouetteOnly
      language: CSharp
      name:
        CSharp: SilhouetteOnly
        VB: SilhouetteOnly
      nameWithType:
        CSharp: Outline.Mode.SilhouetteOnly
        VB: Outline.Mode.SilhouetteOnly
      qualifiedName:
        CSharp: Interaction.Outline.Mode.SilhouetteOnly
        VB: Interaction.Outline.Mode.SilhouetteOnly
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: SilhouetteOnly
        path: ''
        startLine: 3195
      syntax:
        content:
          CSharp: SilhouetteOnly = 4
          VB: SilhouetteOnly = 4
        return:
          type: Interaction.Outline.Mode
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Interaction.ResetLostObjectController
    commentId: T:Interaction.ResetLostObjectController
    language: CSharp
    name:
      CSharp: ResetLostObjectController
      VB: ResetLostObjectController
    nameWithType:
      CSharp: ResetLostObjectController
      VB: ResetLostObjectController
    qualifiedName:
      CSharp: Interaction.ResetLostObjectController
      VB: Interaction.ResetLostObjectController
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Interaction
    source:
      id: ResetLostObjectController
      path: ''
      startLine: 3509
    summary: "\nThe ResetLostObjectController resets TrainAR objects back to the original spawn point when they are released\ntoo far away of the assembly. This is to prevent objects from falling through the infinityPlane or disapearing\nwhen release while the training assembly has tracking problems and &quot;flaots&quot; away.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ResetLostObjectController : MonoBehaviour'
        VB: >-
          Public Class ResetLostObjectController

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Interaction.RigidbodyController
    commentId: T:Interaction.RigidbodyController
    language: CSharp
    name:
      CSharp: RigidbodyController
      VB: RigidbodyController
    nameWithType:
      CSharp: RigidbodyController
      VB: RigidbodyController
    qualifiedName:
      CSharp: Interaction.RigidbodyController
      VB: Interaction.RigidbodyController
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Interaction
    source:
      id: RigidbodyController
      path: ''
      startLine: 3601
    summary: "\nThe RigidbodyController is attached to TrainAR object on conversion. It handles the activation and\ndeactivation of physics, as we do want TrainAR objects to elicit physics when released but not when\nstationary as this could e.g. cause users to &quot;knock over&quot; the assembly with grabbed objects.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class RigidbodyController : MonoBehaviour'
        VB: >-
          Public Class RigidbodyController

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Interaction.TrainARObject
    commentId: T:Interaction.TrainARObject
    language: CSharp
    name:
      CSharp: TrainARObject
      VB: TrainARObject
    nameWithType:
      CSharp: TrainARObject
      VB: TrainARObject
    qualifiedName:
      CSharp: Interaction.TrainARObject
      VB: Interaction.TrainARObject
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Interaction
    source:
      id: TrainARObject
      path: ''
      startLine: 3701
    summary: "\nThe main behaviour script for a TrainAR object.\nThis is automatically added when converting GameObject to TrainAR objects\nAfter adding this script all following RequiredComponents are added.\nSelectionBase, MeshCollider, BoxCollider, RigidbodyController,\nMaterialController, AudioController, Rigidbody, Outline,\nCollisionController.\nThe TrainAR events that are triggered on actions are also defined in this script.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class TrainARObject : MonoBehaviour'
        VB: >-
          Public Class TrainARObject

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Interaction.TrainARObject.isGrabbable
      commentId: F:Interaction.TrainARObject.isGrabbable
      language: CSharp
      name:
        CSharp: isGrabbable
        VB: isGrabbable
      nameWithType:
        CSharp: TrainARObject.isGrabbable
        VB: TrainARObject.isGrabbable
      qualifiedName:
        CSharp: Interaction.TrainARObject.isGrabbable
        VB: Interaction.TrainARObject.isGrabbable
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: isGrabbable
        path: ''
        startLine: 3718
      summary: "\nIs the object grabbable?\n"
      example: []
      syntax:
        content:
          CSharp: public bool isGrabbable
          VB: Public isGrabbable As Boolean
        return:
          type: System.Boolean
          description: If true it is grabbable.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.isInteractable
      commentId: F:Interaction.TrainARObject.isInteractable
      language: CSharp
      name:
        CSharp: isInteractable
        VB: isInteractable
      nameWithType:
        CSharp: TrainARObject.isInteractable
        VB: TrainARObject.isInteractable
      qualifiedName:
        CSharp: Interaction.TrainARObject.isInteractable
        VB: Interaction.TrainARObject.isInteractable
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: isInteractable
        path: ''
        startLine: 3723
      summary: "\nIs the object interactable?\n"
      example: []
      syntax:
        content:
          CSharp: public bool isInteractable
          VB: Public isInteractable As Boolean
        return:
          type: System.Boolean
          description: If true it is interactable.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.isCombineable
      commentId: F:Interaction.TrainARObject.isCombineable
      language: CSharp
      name:
        CSharp: isCombineable
        VB: isCombineable
      nameWithType:
        CSharp: TrainARObject.isCombineable
        VB: TrainARObject.isCombineable
      qualifiedName:
        CSharp: Interaction.TrainARObject.isCombineable
        VB: Interaction.TrainARObject.isCombineable
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: isCombineable
        path: ''
        startLine: 3728
      summary: "\nIs the object combineable?\n"
      example: []
      syntax:
        content:
          CSharp: public bool isCombineable
          VB: Public isCombineable As Boolean
        return:
          type: System.Boolean
          description: If true it is combinable.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.interactableName
      commentId: F:Interaction.TrainARObject.interactableName
      language: CSharp
      name:
        CSharp: interactableName
        VB: interactableName
      nameWithType:
        CSharp: TrainARObject.interactableName
        VB: TrainARObject.interactableName
      qualifiedName:
        CSharp: Interaction.TrainARObject.interactableName
        VB: Interaction.TrainARObject.interactableName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: interactableName
        path: ''
        startLine: 3734
      summary: "\nThe name of the TrainAR object that is used for the statemachine check.\nBy default, this is the name of the TrainAR object.\n"
      example: []
      syntax:
        content:
          CSharp: public string interactableName
          VB: Public interactableName As String
        return:
          type: System.String
          description: String based on the object name.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.TrainARObjectDisabled
      commentId: F:Interaction.TrainARObject.TrainARObjectDisabled
      language: CSharp
      name:
        CSharp: TrainARObjectDisabled
        VB: TrainARObjectDisabled
      nameWithType:
        CSharp: TrainARObject.TrainARObjectDisabled
        VB: TrainARObject.TrainARObjectDisabled
      qualifiedName:
        CSharp: Interaction.TrainARObject.TrainARObjectDisabled
        VB: Interaction.TrainARObject.TrainARObjectDisabled
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: TrainARObjectDisabled
        path: ''
        startLine: 3739
      summary: "\nIf true the object is not selectable, grabbable, interactable, combineable but might be visible.\n"
      example: []
      syntax:
        content:
          CSharp: public bool TrainARObjectDisabled
          VB: Public TrainARObjectDisabled As Boolean
        return:
          type: System.Boolean
          description: Default is false.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.lerpingDistance
      commentId: F:Interaction.TrainARObject.lerpingDistance
      language: CSharp
      name:
        CSharp: lerpingDistance
        VB: lerpingDistance
      nameWithType:
        CSharp: TrainARObject.lerpingDistance
        VB: TrainARObject.lerpingDistance
      qualifiedName:
        CSharp: Interaction.TrainARObject.lerpingDistance
        VB: Interaction.TrainARObject.lerpingDistance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: lerpingDistance
        path: ''
        startLine: 3746
      summary: "\nThe distance in front of the camera, where the object is lerped to.\nThis can e.g. be useful, if objects are larger than usual.\n"
      example: []
      syntax:
        content:
          CSharp: public float lerpingDistance
          VB: Public lerpingDistance As Single
        return:
          type: System.Single
          description: Default is 0.2f
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.pivotOffsetPosition
      commentId: F:Interaction.TrainARObject.pivotOffsetPosition
      language: CSharp
      name:
        CSharp: pivotOffsetPosition
        VB: pivotOffsetPosition
      nameWithType:
        CSharp: TrainARObject.pivotOffsetPosition
        VB: TrainARObject.pivotOffsetPosition
      qualifiedName:
        CSharp: Interaction.TrainARObject.pivotOffsetPosition
        VB: Interaction.TrainARObject.pivotOffsetPosition
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: pivotOffsetPosition
        path: ''
        startLine: 3752
      summary: "\nOffset of the pivot point. Use this, if the given pivot point by the model is weird.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3 pivotOffsetPosition
          VB: Public pivotOffsetPosition As Vector3
        return:
          type: Global.Vector3
          description: Default is (0, 0, 0).
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.pivotOffsetRotation
      commentId: F:Interaction.TrainARObject.pivotOffsetRotation
      language: CSharp
      name:
        CSharp: pivotOffsetRotation
        VB: pivotOffsetRotation
      nameWithType:
        CSharp: TrainARObject.pivotOffsetRotation
        VB: TrainARObject.pivotOffsetRotation
      qualifiedName:
        CSharp: Interaction.TrainARObject.pivotOffsetRotation
        VB: Interaction.TrainARObject.pivotOffsetRotation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: pivotOffsetRotation
        path: ''
        startLine: 3758
      summary: "\nOffset of the pivot rotation. Use this, if the given pivot point by the model is weird.\n"
      example: []
      syntax:
        content:
          CSharp: public Vector3 pivotOffsetRotation
          VB: Public pivotOffsetRotation As Vector3
        return:
          type: Global.Vector3
          description: Default is (0, 0, 0).
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.Intersection
      commentId: F:Interaction.TrainARObject.Intersection
      language: CSharp
      name:
        CSharp: Intersection
        VB: Intersection
      nameWithType:
        CSharp: TrainARObject.Intersection
        VB: TrainARObject.Intersection
      qualifiedName:
        CSharp: Interaction.TrainARObject.Intersection
        VB: Interaction.TrainARObject.Intersection
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: Intersection
        path: ''
        startLine: 3764
      summary: "\nThe Object this object is currently intersecting with.\n"
      example: []
      syntax:
        content:
          CSharp: public CollisionController.Intersection Intersection
          VB: Public Intersection As CollisionController.Intersection
        return:
          type: Interaction.CollisionController.Intersection
          description: Is set on runtime.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.OnSelect
      commentId: F:Interaction.TrainARObject.OnSelect
      language: CSharp
      name:
        CSharp: OnSelect
        VB: OnSelect
      nameWithType:
        CSharp: TrainARObject.OnSelect
        VB: TrainARObject.OnSelect
      qualifiedName:
        CSharp: Interaction.TrainARObject.OnSelect
        VB: Interaction.TrainARObject.OnSelect
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: OnSelect
        path: ''
        startLine: 3772
      syntax:
        content:
          CSharp: public UnityEvent OnSelect
          VB: Public OnSelect As UnityEvent
        return:
          type: Global.UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.OnDeselect
      commentId: F:Interaction.TrainARObject.OnDeselect
      language: CSharp
      name:
        CSharp: OnDeselect
        VB: OnDeselect
      nameWithType:
        CSharp: TrainARObject.OnDeselect
        VB: TrainARObject.OnDeselect
      qualifiedName:
        CSharp: Interaction.TrainARObject.OnDeselect
        VB: Interaction.TrainARObject.OnDeselect
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: OnDeselect
        path: ''
        startLine: 3778
      syntax:
        content:
          CSharp: public UnityEvent OnDeselect
          VB: Public OnDeselect As UnityEvent
        return:
          type: Global.UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.isSelected
      commentId: F:Interaction.TrainARObject.isSelected
      language: CSharp
      name:
        CSharp: isSelected
        VB: isSelected
      nameWithType:
        CSharp: TrainARObject.isSelected
        VB: TrainARObject.isSelected
      qualifiedName:
        CSharp: Interaction.TrainARObject.isSelected
        VB: Interaction.TrainARObject.isSelected
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: isSelected
        path: ''
        startLine: 3781
      syntax:
        content:
          CSharp: public bool isSelected
          VB: Public isSelected As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.OnGrabbed
      commentId: F:Interaction.TrainARObject.OnGrabbed
      language: CSharp
      name:
        CSharp: OnGrabbed
        VB: OnGrabbed
      nameWithType:
        CSharp: TrainARObject.OnGrabbed
        VB: TrainARObject.OnGrabbed
      qualifiedName:
        CSharp: Interaction.TrainARObject.OnGrabbed
        VB: Interaction.TrainARObject.OnGrabbed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: OnGrabbed
        path: ''
        startLine: 3790
      syntax:
        content:
          CSharp: public UnityEvent OnGrabbed
          VB: Public OnGrabbed As UnityEvent
        return:
          type: Global.UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.OnReleased
      commentId: F:Interaction.TrainARObject.OnReleased
      language: CSharp
      name:
        CSharp: OnReleased
        VB: OnReleased
      nameWithType:
        CSharp: TrainARObject.OnReleased
        VB: TrainARObject.OnReleased
      qualifiedName:
        CSharp: Interaction.TrainARObject.OnReleased
        VB: Interaction.TrainARObject.OnReleased
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: OnReleased
        path: ''
        startLine: 3796
      syntax:
        content:
          CSharp: public UnityEvent OnReleased
          VB: Public OnReleased As UnityEvent
        return:
          type: Global.UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.isGrabbed
      commentId: F:Interaction.TrainARObject.isGrabbed
      language: CSharp
      name:
        CSharp: isGrabbed
        VB: isGrabbed
      nameWithType:
        CSharp: TrainARObject.isGrabbed
        VB: TrainARObject.isGrabbed
      qualifiedName:
        CSharp: Interaction.TrainARObject.isGrabbed
        VB: Interaction.TrainARObject.isGrabbed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: isGrabbed
        path: ''
        startLine: 3799
      syntax:
        content:
          CSharp: public bool isGrabbed
          VB: Public isGrabbed As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.OnInteraction
      commentId: F:Interaction.TrainARObject.OnInteraction
      language: CSharp
      name:
        CSharp: OnInteraction
        VB: OnInteraction
      nameWithType:
        CSharp: TrainARObject.OnInteraction
        VB: TrainARObject.OnInteraction
      qualifiedName:
        CSharp: Interaction.TrainARObject.OnInteraction
        VB: Interaction.TrainARObject.OnInteraction
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: OnInteraction
        path: ''
        startLine: 3808
      syntax:
        content:
          CSharp: public UnityEvent OnInteraction
          VB: Public OnInteraction As UnityEvent
        return:
          type: Global.UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.OnCombination
      commentId: F:Interaction.TrainARObject.OnCombination
      language: CSharp
      name:
        CSharp: OnCombination
        VB: OnCombination
      nameWithType:
        CSharp: TrainARObject.OnCombination
        VB: TrainARObject.OnCombination
      qualifiedName:
        CSharp: Interaction.TrainARObject.OnCombination
        VB: Interaction.TrainARObject.OnCombination
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: OnCombination
        path: ''
        startLine: 3823
      syntax:
        content:
          CSharp: public TrainARObject.CustomUnityEvent OnCombination
          VB: Public OnCombination As TrainARObject.CustomUnityEvent
        return:
          type: Interaction.TrainARObject.CustomUnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.error
      commentId: F:Interaction.TrainARObject.error
      language: CSharp
      name:
        CSharp: error
        VB: error
      nameWithType:
        CSharp: TrainARObject.error
        VB: TrainARObject.error
      qualifiedName:
        CSharp: Interaction.TrainARObject.error
        VB: Interaction.TrainARObject.error
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: error
        path: ''
        startLine: 3834
      summary: "\nError event. Triggered when an action is triggered on this TrainAR object that was not accepted by the statemachine.\n"
      example: []
      syntax:
        content:
          CSharp: public UnityEvent error
          VB: Public error As UnityEvent
        return:
          type: Global.UnityEvent
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.Select
      commentId: M:Interaction.TrainARObject.Select
      language: CSharp
      name:
        CSharp: Select()
        VB: Select()
      nameWithType:
        CSharp: TrainARObject.Select()
        VB: TrainARObject.Select()
      qualifiedName:
        CSharp: Interaction.TrainARObject.Select()
        VB: Interaction.TrainARObject.Select()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: Select
        path: ''
        startLine: 3859
      summary: "\nInvokes the select event of this TrainARObject and sets it&apos;s isSelected bool accordingly.\n"
      example: []
      syntax:
        content:
          CSharp: public void Select()
          VB: Public Sub Select
      overload: Interaction.TrainARObject.Select*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.Deselect
      commentId: M:Interaction.TrainARObject.Deselect
      language: CSharp
      name:
        CSharp: Deselect()
        VB: Deselect()
      nameWithType:
        CSharp: TrainARObject.Deselect()
        VB: TrainARObject.Deselect()
      qualifiedName:
        CSharp: Interaction.TrainARObject.Deselect()
        VB: Interaction.TrainARObject.Deselect()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: Deselect
        path: ''
        startLine: 3872
      summary: "\nInvokes the Deselect event of this TrainARObject and sets it&apos;s isSelected bool accordingly.\n"
      example: []
      syntax:
        content:
          CSharp: public void Deselect()
          VB: Public Sub Deselect
      overload: Interaction.TrainARObject.Deselect*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.Interact(System.String)
      commentId: M:Interaction.TrainARObject.Interact(System.String)
      language: CSharp
      name:
        CSharp: Interact(String)
        VB: Interact(String)
      nameWithType:
        CSharp: TrainARObject.Interact(String)
        VB: TrainARObject.Interact(String)
      qualifiedName:
        CSharp: Interaction.TrainARObject.Interact(System.String)
        VB: Interaction.TrainARObject.Interact(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: Interact
        path: ''
        startLine: 3888
      summary: "\nSends a request to the statemachine to check if this interaction was valid.\nIf so, the interact event of this TrainARObject is invoked\notherwise the error event is invoked instead.\n"
      example: []
      syntax:
        content:
          CSharp: public void Interact(string parameter = " ")
          VB: Public Sub Interact(parameter As String = " ")
        parameters:
        - id: parameter
          type: System.String
          description: A string parameter which is passed to the statemachine.
      overload: Interaction.TrainARObject.Interact*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.Combine(System.String,GameObject)
      commentId: M:Interaction.TrainARObject.Combine(System.String,GameObject)
      language: CSharp
      name:
        CSharp: Combine(String, GameObject)
        VB: Combine(String, GameObject)
      nameWithType:
        CSharp: TrainARObject.Combine(String, GameObject)
        VB: TrainARObject.Combine(String, GameObject)
      qualifiedName:
        CSharp: Interaction.TrainARObject.Combine(System.String, GameObject)
        VB: Interaction.TrainARObject.Combine(System.String, GameObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: Combine
        path: ''
        startLine: 3921
      summary: "\nSends a request to the statemachine to check if this combine was valid.\nIf so, the combine event of this TrainARObject is invoked\notherwise the error event is invoked instead.\n\nThis does NOT physically combine the object, which has to be handled by hand or e.g. the TrainAR Object\nhelper in the visual scripting.\n"
      example: []
      syntax:
        content:
          CSharp: public void Combine(string combinedWithName, GameObject intersectedObject)
          VB: Public Sub Combine(combinedWithName As String, intersectedObject As GameObject)
        parameters:
        - id: combinedWithName
          type: System.String
        - id: intersectedObject
          type: Global.GameObject
      overload: Interaction.TrainARObject.Combine*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.Grab
      commentId: M:Interaction.TrainARObject.Grab
      language: CSharp
      name:
        CSharp: Grab()
        VB: Grab()
      nameWithType:
        CSharp: TrainARObject.Grab()
        VB: TrainARObject.Grab()
      qualifiedName:
        CSharp: Interaction.TrainARObject.Grab()
        VB: Interaction.TrainARObject.Grab()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: Grab
        path: ''
        startLine: 3967
      summary: "\nSends a request to the statemachine to check if this grab was valid.\nIf so, the grab event of this TrainARObject is invoked\notherwise the error event is invoked instead.\n\nThis does NOT grab the object, which is handled in the InteractionController\n"
      example: []
      syntax:
        content:
          CSharp: public bool Grab()
          VB: Public Function Grab As Boolean
        return:
          type: System.Boolean
      overload: Interaction.TrainARObject.Grab*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.Release
      commentId: M:Interaction.TrainARObject.Release
      language: CSharp
      name:
        CSharp: Release()
        VB: Release()
      nameWithType:
        CSharp: TrainARObject.Release()
        VB: TrainARObject.Release()
      qualifiedName:
        CSharp: Interaction.TrainARObject.Release()
        VB: Interaction.TrainARObject.Release()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: Release
        path: ''
        startLine: 3997
      summary: "\nInvokes the Release event of this TrainARObject and sets it&apos;s isGrabbed bool accordingly.\n\nThis does NOT release the object, which is handled in the InteractionController\n"
      example: []
      syntax:
        content:
          CSharp: public void Release()
          VB: Public Sub Release
      overload: Interaction.TrainARObject.Release*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.Error
      commentId: M:Interaction.TrainARObject.Error
      language: CSharp
      name:
        CSharp: Error()
        VB: Error()
      nameWithType:
        CSharp: TrainARObject.Error()
        VB: TrainARObject.Error()
      qualifiedName:
        CSharp: Interaction.TrainARObject.Error()
        VB: Interaction.TrainARObject.Error()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: Error
        path: ''
        startLine: 4010
      summary: "\nInvokes the error event of this TrainARObject.\n"
      example: []
      syntax:
        content:
          CSharp: public void Error()
          VB: Public Sub Error
      overload: Interaction.TrainARObject.Error*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.DisableTrainARObject
      commentId: M:Interaction.TrainARObject.DisableTrainARObject
      language: CSharp
      name:
        CSharp: DisableTrainARObject()
        VB: DisableTrainARObject()
      nameWithType:
        CSharp: TrainARObject.DisableTrainARObject()
        VB: TrainARObject.DisableTrainARObject()
      qualifiedName:
        CSharp: Interaction.TrainARObject.DisableTrainARObject()
        VB: Interaction.TrainARObject.DisableTrainARObject()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: DisableTrainARObject
        path: ''
        startLine: 4018
      summary: "\nDisables interactions with this TrainARObject by disabling it&apos;s colliders and Mesh Renderer.\n"
      example: []
      syntax:
        content:
          CSharp: public void DisableTrainARObject()
          VB: Public Sub DisableTrainARObject
      overload: Interaction.TrainARObject.DisableTrainARObject*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Interaction.TrainARObject.EnableTrainARObject
      commentId: M:Interaction.TrainARObject.EnableTrainARObject
      language: CSharp
      name:
        CSharp: EnableTrainARObject()
        VB: EnableTrainARObject()
      nameWithType:
        CSharp: TrainARObject.EnableTrainARObject()
        VB: TrainARObject.EnableTrainARObject()
      qualifiedName:
        CSharp: Interaction.TrainARObject.EnableTrainARObject()
        VB: Interaction.TrainARObject.EnableTrainARObject()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Interaction
      source:
        id: EnableTrainARObject
        path: ''
        startLine: 4029
      summary: "\nEnables interactions with this TrainARObject by disabling it&apos;s colliders and Mesh Renderer.\n"
      example: []
      syntax:
        content:
          CSharp: public void EnableTrainARObject()
          VB: Public Sub EnableTrainARObject
      overload: Interaction.TrainARObject.EnableTrainARObject*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Interaction.TrainARObject.CustomUnityEvent
    commentId: T:Interaction.TrainARObject.CustomUnityEvent
    language: CSharp
    name:
      CSharp: TrainARObject.CustomUnityEvent
      VB: TrainARObject.CustomUnityEvent
    nameWithType:
      CSharp: TrainARObject.CustomUnityEvent
      VB: TrainARObject.CustomUnityEvent
    qualifiedName:
      CSharp: Interaction.TrainARObject.CustomUnityEvent
      VB: Interaction.TrainARObject.CustomUnityEvent
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Interaction
    source:
      id: CustomUnityEvent
      path: ''
      startLine: 3815
    summary: "\nThe CustomUnityEvent that is used for the OnCombination event. This Event also passes a string with\nits invocation indicating the other to be combined with TrainAR objects name.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class CustomUnityEvent : UnityEvent<string>
        VB: >-
          <Serializable>

          Public Class CustomUnityEvent

              Inherits UnityEvent(Of String)
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
- id: Others
  commentId: N:Others
  language: CSharp
  name:
    CSharp: Others
    VB: Others
  nameWithType:
    CSharp: Others
    VB: Others
  qualifiedName:
    CSharp: Others
    VB: Others
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Others.ApplicationRuntimeManager
    commentId: T:Others.ApplicationRuntimeManager
    language: CSharp
    name:
      CSharp: ApplicationRuntimeManager
      VB: ApplicationRuntimeManager
    nameWithType:
      CSharp: ApplicationRuntimeManager
      VB: ApplicationRuntimeManager
    qualifiedName:
      CSharp: Others.ApplicationRuntimeManager
      VB: Others.ApplicationRuntimeManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Others
    source:
      id: ApplicationRuntimeManager
      path: ''
      startLine: 4048
    summary: "\nThe ApplicationRuntimeManager handles the TrainAR menu lifecycle. It start and quits Trainings and Application.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ApplicationRuntimeManager : MonoBehaviour'
        VB: >-
          Public Class ApplicationRuntimeManager

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Others.ApplicationRuntimeManager.QuitApplication
      commentId: M:Others.ApplicationRuntimeManager.QuitApplication
      language: CSharp
      name:
        CSharp: QuitApplication()
        VB: QuitApplication()
      nameWithType:
        CSharp: ApplicationRuntimeManager.QuitApplication()
        VB: ApplicationRuntimeManager.QuitApplication()
      qualifiedName:
        CSharp: Others.ApplicationRuntimeManager.QuitApplication()
        VB: Others.ApplicationRuntimeManager.QuitApplication()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: QuitApplication
        path: ''
        startLine: 4055
      summary: "\nQuits the whole Application\n\nWhen in Editor, just stops the preview\n"
      example: []
      syntax:
        content:
          CSharp: public void QuitApplication()
          VB: Public Sub QuitApplication
      overload: Others.ApplicationRuntimeManager.QuitApplication*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Others.ApplicationRuntimeManager.StartTraining(System.Int32)
      commentId: M:Others.ApplicationRuntimeManager.StartTraining(System.Int32)
      language: CSharp
      name:
        CSharp: StartTraining(Int32)
        VB: StartTraining(Int32)
      nameWithType:
        CSharp: ApplicationRuntimeManager.StartTraining(Int32)
        VB: ApplicationRuntimeManager.StartTraining(Int32)
      qualifiedName:
        CSharp: Others.ApplicationRuntimeManager.StartTraining(System.Int32)
        VB: Others.ApplicationRuntimeManager.StartTraining(System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: StartTraining
        path: ''
        startLine: 4068
      summary: "\nStarts a Training with the provided ID\n"
      example: []
      syntax:
        content:
          CSharp: public void StartTraining(int trainingID)
          VB: Public Sub StartTraining(trainingID As Integer)
        parameters:
        - id: trainingID
          type: System.Int32
          description: ''
      overload: Others.ApplicationRuntimeManager.StartTraining*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Others.ARSessionIsReady
    commentId: T:Others.ARSessionIsReady
    language: CSharp
    name:
      CSharp: ARSessionIsReady
      VB: ARSessionIsReady
    nameWithType:
      CSharp: ARSessionIsReady
      VB: ARSessionIsReady
    qualifiedName:
      CSharp: Others.ARSessionIsReady
      VB: Others.ARSessionIsReady
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Others
    source:
      id: ARSessionIsReady
      path: ''
      startLine: 4089
    summary: "\nDetects if the ARSession is loaded and deactivates the loading screen.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ARSessionIsReady : MonoBehaviour'
        VB: >-
          Public Class ARSessionIsReady

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Others.LeaveAndResetARScene
    commentId: T:Others.LeaveAndResetARScene
    language: CSharp
    name:
      CSharp: LeaveAndResetARScene
      VB: LeaveAndResetARScene
    nameWithType:
      CSharp: LeaveAndResetARScene
      VB: LeaveAndResetARScene
    qualifiedName:
      CSharp: Others.LeaveAndResetARScene
      VB: Others.LeaveAndResetARScene
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Others
    source:
      id: LeaveAndResetARScene
      path: ''
      startLine: 4121
    summary: "\nAdds basic functionality like leave and reset application and scenarios.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class LeaveAndResetARScene : MonoBehaviour'
        VB: >-
          Public Class LeaveAndResetARScene

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Others.LeaveAndResetARScene.LeaveAndReset
      commentId: M:Others.LeaveAndResetARScene.LeaveAndReset
      language: CSharp
      name:
        CSharp: LeaveAndReset()
        VB: LeaveAndReset()
      nameWithType:
        CSharp: LeaveAndResetARScene.LeaveAndReset()
        VB: LeaveAndResetARScene.LeaveAndReset()
      qualifiedName:
        CSharp: Others.LeaveAndResetARScene.LeaveAndReset()
        VB: Others.LeaveAndResetARScene.LeaveAndReset()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: LeaveAndReset
        path: ''
        startLine: 4141
      summary: "\nResets the static variables and returns to the main menu scene.\n"
      example: []
      syntax:
        content:
          CSharp: public void LeaveAndReset()
          VB: Public Sub LeaveAndReset
      overload: Others.LeaveAndResetARScene.LeaveAndReset*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Others.LeaveAndResetARScene.QuitApplication
      commentId: M:Others.LeaveAndResetARScene.QuitApplication
      language: CSharp
      name:
        CSharp: QuitApplication()
        VB: QuitApplication()
      nameWithType:
        CSharp: LeaveAndResetARScene.QuitApplication()
        VB: LeaveAndResetARScene.QuitApplication()
      qualifiedName:
        CSharp: Others.LeaveAndResetARScene.QuitApplication()
        VB: Others.LeaveAndResetARScene.QuitApplication()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: QuitApplication
        path: ''
        startLine: 4169
      summary: "\nCloses the application.\n"
      example: []
      syntax:
        content:
          CSharp: public void QuitApplication()
          VB: Public Sub QuitApplication
      overload: Others.LeaveAndResetARScene.QuitApplication*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Others.MeshCombiner
    commentId: T:Others.MeshCombiner
    language: CSharp
    name:
      CSharp: MeshCombiner
      VB: MeshCombiner
    nameWithType:
      CSharp: MeshCombiner
      VB: MeshCombiner
    qualifiedName:
      CSharp: Others.MeshCombiner
      VB: Others.MeshCombiner
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Others
    source:
      id: MeshCombiner
      path: ''
      startLine: 4190
    summary: "\nThe MeshCombiner is a utility class used by ConvertToTrainARObject to combine and simplify meshes before\nconverting them into TrainAR objects and computing their outlines and adding behaviours.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class MeshCombiner : MonoBehaviour'
        VB: >-
          Public Class MeshCombiner

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Others.MeshCombiner.CreateMultiMaterialMesh
      commentId: P:Others.MeshCombiner.CreateMultiMaterialMesh
      language: CSharp
      name:
        CSharp: CreateMultiMaterialMesh
        VB: CreateMultiMaterialMesh
      nameWithType:
        CSharp: MeshCombiner.CreateMultiMaterialMesh
        VB: MeshCombiner.CreateMultiMaterialMesh
      qualifiedName:
        CSharp: Others.MeshCombiner.CreateMultiMaterialMesh
        VB: Others.MeshCombiner.CreateMultiMaterialMesh
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: CreateMultiMaterialMesh
        path: ''
        startLine: 4205
      syntax:
        content:
          CSharp: public bool CreateMultiMaterialMesh { get; set; }
          VB: Public Property CreateMultiMaterialMesh As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Others.MeshCombiner.CreateMultiMaterialMesh*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Others.MeshCombiner.CombineInactiveChildren
      commentId: P:Others.MeshCombiner.CombineInactiveChildren
      language: CSharp
      name:
        CSharp: CombineInactiveChildren
        VB: CombineInactiveChildren
      nameWithType:
        CSharp: MeshCombiner.CombineInactiveChildren
        VB: MeshCombiner.CombineInactiveChildren
      qualifiedName:
        CSharp: Others.MeshCombiner.CombineInactiveChildren
        VB: Others.MeshCombiner.CombineInactiveChildren
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: CombineInactiveChildren
        path: ''
        startLine: 4206
      syntax:
        content:
          CSharp: public bool CombineInactiveChildren { get; set; }
          VB: Public Property CombineInactiveChildren As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Others.MeshCombiner.CombineInactiveChildren*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Others.MeshCombiner.DeactivateCombinedChildren
      commentId: P:Others.MeshCombiner.DeactivateCombinedChildren
      language: CSharp
      name:
        CSharp: DeactivateCombinedChildren
        VB: DeactivateCombinedChildren
      nameWithType:
        CSharp: MeshCombiner.DeactivateCombinedChildren
        VB: MeshCombiner.DeactivateCombinedChildren
      qualifiedName:
        CSharp: Others.MeshCombiner.DeactivateCombinedChildren
        VB: Others.MeshCombiner.DeactivateCombinedChildren
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: DeactivateCombinedChildren
        path: ''
        startLine: 4207
      syntax:
        content:
          CSharp: public bool DeactivateCombinedChildren { get; set; }
          VB: Public Property DeactivateCombinedChildren As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Others.MeshCombiner.DeactivateCombinedChildren*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Others.MeshCombiner.DeactivateCombinedChildrenMeshRenderers
      commentId: P:Others.MeshCombiner.DeactivateCombinedChildrenMeshRenderers
      language: CSharp
      name:
        CSharp: DeactivateCombinedChildrenMeshRenderers
        VB: DeactivateCombinedChildrenMeshRenderers
      nameWithType:
        CSharp: MeshCombiner.DeactivateCombinedChildrenMeshRenderers
        VB: MeshCombiner.DeactivateCombinedChildrenMeshRenderers
      qualifiedName:
        CSharp: Others.MeshCombiner.DeactivateCombinedChildrenMeshRenderers
        VB: Others.MeshCombiner.DeactivateCombinedChildrenMeshRenderers
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: DeactivateCombinedChildrenMeshRenderers
        path: ''
        startLine: 4216
      syntax:
        content:
          CSharp: public bool DeactivateCombinedChildrenMeshRenderers { get; set; }
          VB: Public Property DeactivateCombinedChildrenMeshRenderers As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Others.MeshCombiner.DeactivateCombinedChildrenMeshRenderers*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Others.MeshCombiner.GenerateUVMap
      commentId: P:Others.MeshCombiner.GenerateUVMap
      language: CSharp
      name:
        CSharp: GenerateUVMap
        VB: GenerateUVMap
      nameWithType:
        CSharp: MeshCombiner.GenerateUVMap
        VB: MeshCombiner.GenerateUVMap
      qualifiedName:
        CSharp: Others.MeshCombiner.GenerateUVMap
        VB: Others.MeshCombiner.GenerateUVMap
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: GenerateUVMap
        path: ''
        startLine: 4225
      syntax:
        content:
          CSharp: public bool GenerateUVMap { get; set; }
          VB: Public Property GenerateUVMap As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Others.MeshCombiner.GenerateUVMap*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Others.MeshCombiner.DestroyCombinedChildren
      commentId: P:Others.MeshCombiner.DestroyCombinedChildren
      language: CSharp
      name:
        CSharp: DestroyCombinedChildren
        VB: DestroyCombinedChildren
      nameWithType:
        CSharp: MeshCombiner.DestroyCombinedChildren
        VB: MeshCombiner.DestroyCombinedChildren
      qualifiedName:
        CSharp: Others.MeshCombiner.DestroyCombinedChildren
        VB: Others.MeshCombiner.DestroyCombinedChildren
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: DestroyCombinedChildren
        path: ''
        startLine: 4226
      syntax:
        content:
          CSharp: public bool DestroyCombinedChildren { get; set; }
          VB: Public Property DestroyCombinedChildren As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Others.MeshCombiner.DestroyCombinedChildren*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Others.MeshCombiner.FolderPath
      commentId: P:Others.MeshCombiner.FolderPath
      language: CSharp
      name:
        CSharp: FolderPath
        VB: FolderPath
      nameWithType:
        CSharp: MeshCombiner.FolderPath
        VB: MeshCombiner.FolderPath
      qualifiedName:
        CSharp: Others.MeshCombiner.FolderPath
        VB: Others.MeshCombiner.FolderPath
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: FolderPath
        path: ''
        startLine: 4235
      syntax:
        content:
          CSharp: public string FolderPath { get; set; }
          VB: Public Property FolderPath As String
        parameters: []
        return:
          type: System.String
      overload: Others.MeshCombiner.FolderPath*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Others.MeshCombiner.CombineMeshes(System.Boolean)
      commentId: M:Others.MeshCombiner.CombineMeshes(System.Boolean)
      language: CSharp
      name:
        CSharp: CombineMeshes(Boolean)
        VB: CombineMeshes(Boolean)
      nameWithType:
        CSharp: MeshCombiner.CombineMeshes(Boolean)
        VB: MeshCombiner.CombineMeshes(Boolean)
      qualifiedName:
        CSharp: Others.MeshCombiner.CombineMeshes(System.Boolean)
        VB: Others.MeshCombiner.CombineMeshes(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: CombineMeshes
        path: ''
        startLine: 4258
      summary: "\nCombine children&apos;s Meshes into one Mesh. Set &apos;showCreatedMeshInfo&apos; to true if want to show info about created Mesh in the console.\n"
      example: []
      syntax:
        content:
          CSharp: public void CombineMeshes(bool showCreatedMeshInfo)
          VB: Public Sub CombineMeshes(showCreatedMeshInfo As Boolean)
        parameters:
        - id: showCreatedMeshInfo
          type: System.Boolean
      overload: Others.MeshCombiner.CombineMeshes*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Others.ObjectInsideCollider
    commentId: T:Others.ObjectInsideCollider
    language: CSharp
    name:
      CSharp: ObjectInsideCollider
      VB: ObjectInsideCollider
    nameWithType:
      CSharp: ObjectInsideCollider
      VB: ObjectInsideCollider
    qualifiedName:
      CSharp: Others.ObjectInsideCollider
      VB: Others.ObjectInsideCollider
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Others
    source:
      id: ObjectInsideCollider
      path: ''
      startLine: 4593
    summary: "\nDetects collisions of the object it is attached to with other objects\nto enable combination.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ObjectInsideCollider : MonoBehaviour'
        VB: >-
          Public Class ObjectInsideCollider

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Others.ObjectInsideCollider.combinedWithName
      commentId: F:Others.ObjectInsideCollider.combinedWithName
      language: CSharp
      name:
        CSharp: combinedWithName
        VB: combinedWithName
      nameWithType:
        CSharp: ObjectInsideCollider.combinedWithName
        VB: ObjectInsideCollider.combinedWithName
      qualifiedName:
        CSharp: Others.ObjectInsideCollider.combinedWithName
        VB: Others.ObjectInsideCollider.combinedWithName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: combinedWithName
        path: ''
        startLine: 4599
      summary: "\nTemporary store of the name of the collided object.\n"
      example: []
      syntax:
        content:
          CSharp: public string combinedWithName
          VB: Public combinedWithName As String
        return:
          type: System.String
          description: ''
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Others.PrefabSpawningController
    commentId: T:Others.PrefabSpawningController
    language: CSharp
    name:
      CSharp: PrefabSpawningController
      VB: PrefabSpawningController
    nameWithType:
      CSharp: PrefabSpawningController
      VB: PrefabSpawningController
    qualifiedName:
      CSharp: Others.PrefabSpawningController
      VB: Others.PrefabSpawningController
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Others
    source:
      id: PrefabSpawningController
      path: ''
      startLine: 4669
    summary: "\nHandles the initial spawning and positioning as well as the repositioning of the training assembly. \n"
    example: []
    syntax:
      content:
        CSharp: 'public class PrefabSpawningController : MonoBehaviour'
        VB: >-
          Public Class PrefabSpawningController

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Others.PrefabSpawningController.objectWasSpawned
      commentId: F:Others.PrefabSpawningController.objectWasSpawned
      language: CSharp
      name:
        CSharp: objectWasSpawned
        VB: objectWasSpawned
      nameWithType:
        CSharp: PrefabSpawningController.objectWasSpawned
        VB: PrefabSpawningController.objectWasSpawned
      qualifiedName:
        CSharp: Others.PrefabSpawningController.objectWasSpawned
        VB: Others.PrefabSpawningController.objectWasSpawned
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: objectWasSpawned
        path: ''
        startLine: 4741
      summary: "\nIs the prefab spawned?\n"
      example: []
      syntax:
        content:
          CSharp: public bool objectWasSpawned
          VB: Public objectWasSpawned As Boolean
        return:
          type: System.Boolean
          description: True if spawned.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Others.PrefabSpawningController.placementPoseIsValid
      commentId: F:Others.PrefabSpawningController.placementPoseIsValid
      language: CSharp
      name:
        CSharp: placementPoseIsValid
        VB: placementPoseIsValid
      nameWithType:
        CSharp: PrefabSpawningController.placementPoseIsValid
        VB: PrefabSpawningController.placementPoseIsValid
      qualifiedName:
        CSharp: Others.PrefabSpawningController.placementPoseIsValid
        VB: Others.PrefabSpawningController.placementPoseIsValid
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: placementPoseIsValid
        path: ''
        startLine: 4752
      summary: "\nIs the attempted placement pose valid?\n"
      example: []
      syntax:
        content:
          CSharp: public bool placementPoseIsValid
          VB: Public placementPoseIsValid As Boolean
        return:
          type: System.Boolean
          description: True if valid.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Others.PrefabSpawningController.instantiatedPrefab
      commentId: F:Others.PrefabSpawningController.instantiatedPrefab
      language: CSharp
      name:
        CSharp: instantiatedPrefab
        VB: instantiatedPrefab
      nameWithType:
        CSharp: PrefabSpawningController.instantiatedPrefab
        VB: PrefabSpawningController.instantiatedPrefab
      qualifiedName:
        CSharp: Others.PrefabSpawningController.instantiatedPrefab
        VB: Others.PrefabSpawningController.instantiatedPrefab
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: instantiatedPrefab
        path: ''
        startLine: 4757
      summary: "\nReference to the spawned training assembly.\n"
      example: []
      syntax:
        content:
          CSharp: public static GameObject instantiatedPrefab
          VB: Public Shared instantiatedPrefab As GameObject
        return:
          type: Global.GameObject
          description: Gets created on runtime.
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Others.PrefabSpawningController.prefabSpawned
      commentId: E:Others.PrefabSpawningController.prefabSpawned
      language: CSharp
      name:
        CSharp: prefabSpawned
        VB: prefabSpawned
      nameWithType:
        CSharp: PrefabSpawningController.prefabSpawned
        VB: PrefabSpawningController.prefabSpawned
      qualifiedName:
        CSharp: Others.PrefabSpawningController.prefabSpawned
        VB: Others.PrefabSpawningController.prefabSpawned
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: prefabSpawned
        path: ''
        startLine: 4785
      summary: "\nEvent that is triggered after the assembly is spawned.\n"
      example: []
      syntax:
        content:
          CSharp: public static event Action prefabSpawned
          VB: Public Shared Event prefabSpawned As Action
        return:
          type: Global.Action
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Others.PrefabSpawningController.RepositionPrefab
      commentId: E:Others.PrefabSpawningController.RepositionPrefab
      language: CSharp
      name:
        CSharp: RepositionPrefab
        VB: RepositionPrefab
      nameWithType:
        CSharp: PrefabSpawningController.RepositionPrefab
        VB: PrefabSpawningController.RepositionPrefab
      qualifiedName:
        CSharp: Others.PrefabSpawningController.RepositionPrefab
        VB: Others.PrefabSpawningController.RepositionPrefab
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: RepositionPrefab
        path: ''
        startLine: 4789
      summary: "\nEvent that is triggered after repositioning of the training assembly.\n"
      example: []
      syntax:
        content:
          CSharp: public static event Action RepositionPrefab
          VB: Public Shared Event RepositionPrefab As Action
        return:
          type: Global.Action
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Others.PrefabSpawningController.GetSpawnedObject
      commentId: M:Others.PrefabSpawningController.GetSpawnedObject
      language: CSharp
      name:
        CSharp: GetSpawnedObject()
        VB: GetSpawnedObject()
      nameWithType:
        CSharp: PrefabSpawningController.GetSpawnedObject()
        VB: PrefabSpawningController.GetSpawnedObject()
      qualifiedName:
        CSharp: Others.PrefabSpawningController.GetSpawnedObject()
        VB: Others.PrefabSpawningController.GetSpawnedObject()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: GetSpawnedObject
        path: ''
        startLine: 4955
      summary: "\nReturns the instantiated prefab.\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject GetSpawnedObject()
          VB: Public Function GetSpawnedObject As GameObject
        return:
          type: Global.GameObject
          description: The instantiated prefab.
      overload: Others.PrefabSpawningController.GetSpawnedObject*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Others.PrefabSpawningController.Reposition
      commentId: M:Others.PrefabSpawningController.Reposition
      language: CSharp
      name:
        CSharp: Reposition()
        VB: Reposition()
      nameWithType:
        CSharp: PrefabSpawningController.Reposition()
        VB: PrefabSpawningController.Reposition()
      qualifiedName:
        CSharp: Others.PrefabSpawningController.Reposition()
        VB: Others.PrefabSpawningController.Reposition()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: Reposition
        path: ''
        startLine: 4998
      summary: "\nRestarts the positioning process to make reposition of the prefab possible.\n"
      example: []
      syntax:
        content:
          CSharp: public void Reposition()
          VB: Public Sub Reposition
      overload: Others.PrefabSpawningController.Reposition*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Others.ScenarioCompleted
    commentId: T:Others.ScenarioCompleted
    language: CSharp
    name:
      CSharp: ScenarioCompleted
      VB: ScenarioCompleted
    nameWithType:
      CSharp: ScenarioCompleted
      VB: ScenarioCompleted
    qualifiedName:
      CSharp: Others.ScenarioCompleted
      VB: Others.ScenarioCompleted
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Others
    source:
      id: ScenarioCompleted
      path: ''
      startLine: 5043
    summary: "\nHandles the completion overlay that is shown at the end of the training.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ScenarioCompleted : MonoBehaviour'
        VB: >-
          Public Class ScenarioCompleted

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Others.SelectionBase
    commentId: T:Others.SelectionBase
    language: CSharp
    name:
      CSharp: SelectionBase
      VB: SelectionBase
    nameWithType:
      CSharp: SelectionBase
      VB: SelectionBase
    qualifiedName:
      CSharp: Others.SelectionBase
      VB: Others.SelectionBase
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Others
    source:
      id: SelectionBase
      path: ''
      startLine: 5207
    summary: "\nEditor utility script that is attached on TrainAR object conversion.\nWith this, authors always select this object when a child is selected in the Scene view.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class SelectionBase : MonoBehaviour'
        VB: >-
          Public Class SelectionBase

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: Others.StartARScene
    commentId: T:Others.StartARScene
    language: CSharp
    name:
      CSharp: StartARScene
      VB: StartARScene
    nameWithType:
      CSharp: StartARScene
      VB: StartARScene
    qualifiedName:
      CSharp: Others.StartARScene
      VB: Others.StartARScene
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Others
    source:
      id: StartARScene
      path: ''
      startLine: 5224
    summary: "\nStarts the ARScene after the tutorial is finished.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class StartARScene : MonoBehaviour'
        VB: >-
          Public Class StartARScene

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Others.StartARScene.LoadArScene
      commentId: M:Others.StartARScene.LoadArScene
      language: CSharp
      name:
        CSharp: LoadArScene()
        VB: LoadArScene()
      nameWithType:
        CSharp: StartARScene.LoadArScene()
        VB: StartARScene.LoadArScene()
      qualifiedName:
        CSharp: Others.StartARScene.LoadArScene()
        VB: Others.StartARScene.LoadArScene()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: LoadArScene
        path: ''
        startLine: 5235
      summary: "\nLoads the (main) AR scene\n"
      example: []
      syntax:
        content:
          CSharp: public void LoadArScene()
          VB: Public Sub LoadArScene
      overload: Others.StartARScene.LoadArScene*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Others.StartARScene.QuitApplication
      commentId: M:Others.StartARScene.QuitApplication
      language: CSharp
      name:
        CSharp: QuitApplication()
        VB: QuitApplication()
      nameWithType:
        CSharp: StartARScene.QuitApplication()
        VB: StartARScene.QuitApplication()
      qualifiedName:
        CSharp: Others.StartARScene.QuitApplication()
        VB: Others.StartARScene.QuitApplication()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: QuitApplication
        path: ''
        startLine: 5252
      summary: "\nCloses the Application.\n"
      example: []
      syntax:
        content:
          CSharp: public void QuitApplication()
          VB: Public Sub QuitApplication
      overload: Others.StartARScene.QuitApplication*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Others.StateRequestSimulator
    commentId: T:Others.StateRequestSimulator
    language: CSharp
    name:
      CSharp: StateRequestSimulator
      VB: StateRequestSimulator
    nameWithType:
      CSharp: StateRequestSimulator
      VB: StateRequestSimulator
    qualifiedName:
      CSharp: Others.StateRequestSimulator
      VB: Others.StateRequestSimulator
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Others
    source:
      id: StateRequestSimulator
      path: ''
      startLine: 5274
    summary: "\nDeveloper Utility. The StateRequestSimulator allows to test the visual scripting stateflows in the editor by simulating\nrequests to the statemachine manually. This is attached to the framework but not active by default.\nTo use it, the PlayModeButtonOverride has to be deactivated/deleted so the playmode can be entered. The StateRequestSimulator\nis attached to the root object of the TrainAR framework and can then be used in the Hierarchy.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class StateRequestSimulator : MonoBehaviour'
        VB: >-
          Public Class StateRequestSimulator

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Others.StateRequestSimulator.interactionType
      commentId: F:Others.StateRequestSimulator.interactionType
      language: CSharp
      name:
        CSharp: interactionType
        VB: interactionType
      nameWithType:
        CSharp: StateRequestSimulator.interactionType
        VB: StateRequestSimulator.interactionType
      qualifiedName:
        CSharp: Others.StateRequestSimulator.interactionType
        VB: Others.StateRequestSimulator.interactionType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: interactionType
        path: ''
        startLine: 5281
      summary: "\nWhat kind of interaction should be requested.\n"
      example: []
      syntax:
        content:
          CSharp: public InteractionType interactionType
          VB: Public interactionType As InteractionType
        return:
          type: Global.InteractionType
          description: Default is Interact.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Others.StateRequestSimulator.primaryObjectName
      commentId: F:Others.StateRequestSimulator.primaryObjectName
      language: CSharp
      name:
        CSharp: primaryObjectName
        VB: primaryObjectName
      nameWithType:
        CSharp: StateRequestSimulator.primaryObjectName
        VB: StateRequestSimulator.primaryObjectName
      qualifiedName:
        CSharp: Others.StateRequestSimulator.primaryObjectName
        VB: Others.StateRequestSimulator.primaryObjectName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: primaryObjectName
        path: ''
        startLine: 5287
      summary: "\nWhat is the TrainAR object name of the first object.\n"
      example: []
      syntax:
        content:
          CSharp: public string primaryObjectName
          VB: Public primaryObjectName As String
        return:
          type: System.String
          description: Default is &quot;&quot;.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Others.StateRequestSimulator.secondaryObjectName
      commentId: F:Others.StateRequestSimulator.secondaryObjectName
      language: CSharp
      name:
        CSharp: secondaryObjectName
        VB: secondaryObjectName
      nameWithType:
        CSharp: StateRequestSimulator.secondaryObjectName
        VB: StateRequestSimulator.secondaryObjectName
      qualifiedName:
        CSharp: Others.StateRequestSimulator.secondaryObjectName
        VB: Others.StateRequestSimulator.secondaryObjectName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: secondaryObjectName
        path: ''
        startLine: 5293
      summary: "\nWhat is the TrainAR object name of the second object.\n"
      example: []
      syntax:
        content:
          CSharp: public string secondaryObjectName
          VB: Public secondaryObjectName As String
        return:
          type: System.String
          description: Default is &quot;&quot;.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Others.StateRequestSimulator.parameter
      commentId: F:Others.StateRequestSimulator.parameter
      language: CSharp
      name:
        CSharp: parameter
        VB: parameter
      nameWithType:
        CSharp: StateRequestSimulator.parameter
        VB: StateRequestSimulator.parameter
      qualifiedName:
        CSharp: Others.StateRequestSimulator.parameter
        VB: Others.StateRequestSimulator.parameter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Others
      source:
        id: parameter
        path: ''
        startLine: 5299
      summary: "\nWhat parameter should be requested.\n"
      example: []
      syntax:
        content:
          CSharp: public string parameter
          VB: Public parameter As String
        return:
          type: System.String
          description: Default is &quot;&quot;.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: Static
  commentId: N:Static
  language: CSharp
  name:
    CSharp: Static
    VB: Static
  nameWithType:
    CSharp: Static
    VB: Static
  qualifiedName:
    CSharp: Static
    VB: Static
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Static.CustomAction
    commentId: T:Static.CustomAction
    language: CSharp
    name:
      CSharp: CustomAction
      VB: CustomAction
    nameWithType:
      CSharp: CustomAction
      VB: CustomAction
    qualifiedName:
      CSharp: Static.CustomAction
      VB: Static.CustomAction
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Static
    source:
      id: CustomAction
      path: ''
      startLine: 5333
    summary: "\nCustom actions are actions triggered by events outside of Interacting or combining (e.g. UI quizes) and can send parameters\nthat are then checked against the statemachine.\n\nThis class is also what authors can use to trigger actions beyond the scope of TrainAR and can be handled by the statemachine\nby using the Action Node and the &quot;Custom Action&quot; type.\n\nCustomAction can either be triggered form the instantiated or static context.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class CustomAction : MonoBehaviour'
        VB: >-
          Public Class CustomAction

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Static.CustomAction.DynamicTrigger(System.String)
      commentId: M:Static.CustomAction.DynamicTrigger(System.String)
      language: CSharp
      name:
        CSharp: DynamicTrigger(String)
        VB: DynamicTrigger(String)
      nameWithType:
        CSharp: CustomAction.DynamicTrigger(String)
        VB: CustomAction.DynamicTrigger(String)
      qualifiedName:
        CSharp: Static.CustomAction.DynamicTrigger(System.String)
        VB: Static.CustomAction.DynamicTrigger(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: DynamicTrigger
        path: ''
        startLine: 5339
      summary: "\nTriggers a CustomAction with the given parameter.\n"
      example: []
      syntax:
        content:
          CSharp: public void DynamicTrigger(string parameter)
          VB: Public Sub DynamicTrigger(parameter As String)
        parameters:
        - id: parameter
          type: System.String
          description: The parameter to be checked against the statemachine.
      overload: Static.CustomAction.DynamicTrigger*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.CustomAction.StaticTrigger(System.String)
      commentId: M:Static.CustomAction.StaticTrigger(System.String)
      language: CSharp
      name:
        CSharp: StaticTrigger(String)
        VB: StaticTrigger(String)
      nameWithType:
        CSharp: CustomAction.StaticTrigger(String)
        VB: CustomAction.StaticTrigger(String)
      qualifiedName:
        CSharp: Static.CustomAction.StaticTrigger(System.String)
        VB: Static.CustomAction.StaticTrigger(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: StaticTrigger
        path: ''
        startLine: 5349
      summary: "\nTriggers a CustomAction with the given parameter from a static context.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool StaticTrigger(string parameter)
          VB: Public Shared Function StaticTrigger(parameter As String) As Boolean
        parameters:
        - id: parameter
          type: System.String
          description: The parameter to be checked against the statemachine.
        return:
          type: System.Boolean
          description: Whether this was a correct statechange and triggered to statemachine to proceed.
      overload: Static.CustomAction.StaticTrigger*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Static.InteractionType
    commentId: T:Static.InteractionType
    language: CSharp
    name:
      CSharp: InteractionType
      VB: InteractionType
    nameWithType:
      CSharp: InteractionType
      VB: InteractionType
    qualifiedName:
      CSharp: Static.InteractionType
      VB: Static.InteractionType
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Static
    source:
      id: InteractionType
      path: ''
      startLine: 5367
    summary: "\nThe type of interaction that is used in a StateInformation struct through a state change request.\n"
    example: []
    syntax:
      content:
        CSharp: public enum InteractionType
        VB: Public Enum InteractionType
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Static.InteractionType.Select
      commentId: F:Static.InteractionType.Select
      language: CSharp
      name:
        CSharp: Select
        VB: Select
      nameWithType:
        CSharp: InteractionType.Select
        VB: InteractionType.Select
      qualifiedName:
        CSharp: Static.InteractionType.Select
        VB: Static.InteractionType.Select
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: Select
        path: ''
        startLine: 5369
      syntax:
        content:
          CSharp: Select = 0
          VB: Select = 0
        return:
          type: Static.InteractionType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Static.InteractionType.Deselect
      commentId: F:Static.InteractionType.Deselect
      language: CSharp
      name:
        CSharp: Deselect
        VB: Deselect
      nameWithType:
        CSharp: InteractionType.Deselect
        VB: InteractionType.Deselect
      qualifiedName:
        CSharp: Static.InteractionType.Deselect
        VB: Static.InteractionType.Deselect
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: Deselect
        path: ''
        startLine: 5370
      syntax:
        content:
          CSharp: Deselect = 1
          VB: Deselect = 1
        return:
          type: Static.InteractionType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Static.InteractionType.Grab
      commentId: F:Static.InteractionType.Grab
      language: CSharp
      name:
        CSharp: Grab
        VB: Grab
      nameWithType:
        CSharp: InteractionType.Grab
        VB: InteractionType.Grab
      qualifiedName:
        CSharp: Static.InteractionType.Grab
        VB: Static.InteractionType.Grab
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: Grab
        path: ''
        startLine: 5371
      syntax:
        content:
          CSharp: Grab = 2
          VB: Grab = 2
        return:
          type: Static.InteractionType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Static.InteractionType.Release
      commentId: F:Static.InteractionType.Release
      language: CSharp
      name:
        CSharp: Release
        VB: Release
      nameWithType:
        CSharp: InteractionType.Release
        VB: InteractionType.Release
      qualifiedName:
        CSharp: Static.InteractionType.Release
        VB: Static.InteractionType.Release
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: Release
        path: ''
        startLine: 5372
      syntax:
        content:
          CSharp: Release = 3
          VB: Release = 3
        return:
          type: Static.InteractionType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Static.InteractionType.Interact
      commentId: F:Static.InteractionType.Interact
      language: CSharp
      name:
        CSharp: Interact
        VB: Interact
      nameWithType:
        CSharp: InteractionType.Interact
        VB: InteractionType.Interact
      qualifiedName:
        CSharp: Static.InteractionType.Interact
        VB: Static.InteractionType.Interact
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: Interact
        path: ''
        startLine: 5373
      syntax:
        content:
          CSharp: Interact = 4
          VB: Interact = 4
        return:
          type: Static.InteractionType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Static.InteractionType.Combine
      commentId: F:Static.InteractionType.Combine
      language: CSharp
      name:
        CSharp: Combine
        VB: Combine
      nameWithType:
        CSharp: InteractionType.Combine
        VB: InteractionType.Combine
      qualifiedName:
        CSharp: Static.InteractionType.Combine
        VB: Static.InteractionType.Combine
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: Combine
        path: ''
        startLine: 5374
      syntax:
        content:
          CSharp: Combine = 5
          VB: Combine = 5
        return:
          type: Static.InteractionType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Static.InteractionType.Custom
      commentId: F:Static.InteractionType.Custom
      language: CSharp
      name:
        CSharp: Custom
        VB: Custom
      nameWithType:
        CSharp: InteractionType.Custom
        VB: InteractionType.Custom
      qualifiedName:
        CSharp: Static.InteractionType.Custom
        VB: Static.InteractionType.Custom
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: Custom
        path: ''
        startLine: 5375
      syntax:
        content:
          CSharp: Custom = 6
          VB: Custom = 6
        return:
          type: Static.InteractionType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Static.StateInformation
    commentId: T:Static.StateInformation
    language: CSharp
    name:
      CSharp: StateInformation
      VB: StateInformation
    nameWithType:
      CSharp: StateInformation
      VB: StateInformation
    qualifiedName:
      CSharp: Static.StateInformation
      VB: Static.StateInformation
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: Static
    source:
      id: StateInformation
      path: ''
      startLine: 5381
    summary: "\nThe StateInformation is a struct created for state change requests. It holds the information of the request to the statemachine.\n"
    example: []
    syntax:
      content:
        CSharp: public struct StateInformation
        VB: Public Structure StateInformation
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: Static.StateInformation.primaryObjectName
      commentId: F:Static.StateInformation.primaryObjectName
      language: CSharp
      name:
        CSharp: primaryObjectName
        VB: primaryObjectName
      nameWithType:
        CSharp: StateInformation.primaryObjectName
        VB: StateInformation.primaryObjectName
      qualifiedName:
        CSharp: Static.StateInformation.primaryObjectName
        VB: Static.StateInformation.primaryObjectName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: primaryObjectName
        path: ''
        startLine: 5386
      summary: "\nThe primary object of this request.\n"
      example: []
      syntax:
        content:
          CSharp: public string primaryObjectName
          VB: Public primaryObjectName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StateInformation.secondaryObjectName
      commentId: F:Static.StateInformation.secondaryObjectName
      language: CSharp
      name:
        CSharp: secondaryObjectName
        VB: secondaryObjectName
      nameWithType:
        CSharp: StateInformation.secondaryObjectName
        VB: StateInformation.secondaryObjectName
      qualifiedName:
        CSharp: Static.StateInformation.secondaryObjectName
        VB: Static.StateInformation.secondaryObjectName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: secondaryObjectName
        path: ''
        startLine: 5390
      summary: "\nThe secondary object of this request (e.g. for a combination, the object that is not grabbed)\n"
      example: []
      syntax:
        content:
          CSharp: public string secondaryObjectName
          VB: Public secondaryObjectName As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StateInformation.interactionType
      commentId: F:Static.StateInformation.interactionType
      language: CSharp
      name:
        CSharp: interactionType
        VB: interactionType
      nameWithType:
        CSharp: StateInformation.interactionType
        VB: StateInformation.interactionType
      qualifiedName:
        CSharp: Static.StateInformation.interactionType
        VB: Static.StateInformation.interactionType
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: interactionType
        path: ''
        startLine: 5394
      summary: "\nThe type of interaction that is requested.\n"
      example: []
      syntax:
        content:
          CSharp: public InteractionType interactionType
          VB: Public interactionType As InteractionType
        return:
          type: Static.InteractionType
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StateInformation.parameter
      commentId: F:Static.StateInformation.parameter
      language: CSharp
      name:
        CSharp: parameter
        VB: parameter
      nameWithType:
        CSharp: StateInformation.parameter
        VB: StateInformation.parameter
      qualifiedName:
        CSharp: Static.StateInformation.parameter
        VB: Static.StateInformation.parameter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: parameter
        path: ''
        startLine: 5399
      summary: "\nThe parameter that is passed with the request. E.g. for custom actions or questionnaires this can also be the only thing that is checked\nagainst by the statemachine.\n"
      example: []
      syntax:
        content:
          CSharp: public string parameter
          VB: Public parameter As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StateInformation.firstGameObject
      commentId: F:Static.StateInformation.firstGameObject
      language: CSharp
      name:
        CSharp: firstGameObject
        VB: firstGameObject
      nameWithType:
        CSharp: StateInformation.firstGameObject
        VB: StateInformation.firstGameObject
      qualifiedName:
        CSharp: Static.StateInformation.firstGameObject
        VB: Static.StateInformation.firstGameObject
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: firstGameObject
        path: ''
        startLine: 5403
      summary: "\nThe primary GameObject request of this request.\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject firstGameObject
          VB: Public firstGameObject As GameObject
        return:
          type: Global.GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StateInformation.secondGameObject
      commentId: F:Static.StateInformation.secondGameObject
      language: CSharp
      name:
        CSharp: secondGameObject
        VB: secondGameObject
      nameWithType:
        CSharp: StateInformation.secondGameObject
        VB: StateInformation.secondGameObject
      qualifiedName:
        CSharp: Static.StateInformation.secondGameObject
        VB: Static.StateInformation.secondGameObject
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: secondGameObject
        path: ''
        startLine: 5407
      summary: "\nThe secondary GameObject request of this request.\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject secondGameObject
          VB: Public secondGameObject As GameObject
        return:
          type: Global.GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StateInformation.#ctor(System.String,System.String,Static.InteractionType,System.String,GameObject,GameObject)
      commentId: M:Static.StateInformation.#ctor(System.String,System.String,Static.InteractionType,System.String,GameObject,GameObject)
      language: CSharp
      name:
        CSharp: StateInformation(String, String, InteractionType, String, GameObject, GameObject)
        VB: StateInformation(String, String, InteractionType, String, GameObject, GameObject)
      nameWithType:
        CSharp: StateInformation.StateInformation(String, String, InteractionType, String, GameObject, GameObject)
        VB: StateInformation.StateInformation(String, String, InteractionType, String, GameObject, GameObject)
      qualifiedName:
        CSharp: Static.StateInformation.StateInformation(System.String, System.String, Static.InteractionType, System.String, GameObject, GameObject)
        VB: Static.StateInformation.StateInformation(System.String, System.String, Static.InteractionType, System.String, GameObject, GameObject)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: .ctor
        path: ''
        startLine: 5412
      summary: "\nConstructor of the StateInformation struct.\n"
      example: []
      syntax:
        content:
          CSharp: public StateInformation(string primaryObjectName = "", string secondaryObjectName = "", InteractionType interactionType = InteractionType.Custom, string parameter = " ", GameObject firstGameObject = null, GameObject secondGameObject = null)
          VB: Public Sub New(primaryObjectName As String = "", secondaryObjectName As String = "", interactionType As InteractionType = InteractionType.Custom, parameter As String = " ", firstGameObject As GameObject = Nothing, secondGameObject As GameObject = Nothing)
        parameters:
        - id: primaryObjectName
          type: System.String
        - id: secondaryObjectName
          type: System.String
        - id: interactionType
          type: Static.InteractionType
        - id: parameter
          type: System.String
        - id: firstGameObject
          type: Global.GameObject
        - id: secondGameObject
          type: Global.GameObject
      overload: Static.StateInformation.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: Static.StatemachineConnector
    commentId: T:Static.StatemachineConnector
    language: CSharp
    name:
      CSharp: StatemachineConnector
      VB: StatemachineConnector
    nameWithType:
      CSharp: StatemachineConnector
      VB: StatemachineConnector
    qualifiedName:
      CSharp: Static.StatemachineConnector
      VB: Static.StatemachineConnector
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Static
    source:
      id: StatemachineConnector
      path: ''
      startLine: 5433
    summary: "\nThe StatemachineConnector connects interaction inputs with the visual scripting flow and outputs \nwith the instruction, error and insight controller through events. It therefore functions as a funnel\nbetween the Visual Statemachine and the rest of the logic.\n\nEither the visual statemachien decides whether actions are correct or wrong (default) or the connection\ncan also be commented out and the decisions on wrong/correct actions can be made manually in the\nRequestStateChange method by using C# programming.\n"
    example: []
    syntax:
      content:
        CSharp: public class StatemachineConnector
        VB: Public Class StatemachineConnector
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Static.StatemachineConnector.Instance
      commentId: F:Static.StatemachineConnector.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: StatemachineConnector.Instance
        VB: StatemachineConnector.Instance
      qualifiedName:
        CSharp: Static.StatemachineConnector.Instance
        VB: Static.StatemachineConnector.Instance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: Instance
        path: ''
        startLine: 5438
      summary: "\nThe static instance of this StatemachineConnector.\n"
      example: []
      syntax:
        content:
          CSharp: public static StatemachineConnector Instance
          VB: Public Shared Instance As StatemachineConnector
        return:
          type: Static.StatemachineConnector
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Static.StatemachineConnector.errorCounter
      commentId: F:Static.StatemachineConnector.errorCounter
      language: CSharp
      name:
        CSharp: errorCounter
        VB: errorCounter
      nameWithType:
        CSharp: StatemachineConnector.errorCounter
        VB: StatemachineConnector.errorCounter
      qualifiedName:
        CSharp: Static.StatemachineConnector.errorCounter
        VB: Static.StatemachineConnector.errorCounter
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: errorCounter
        path: ''
        startLine: 5443
      summary: "\nThe amount of errors performed by the user of the training.\n"
      example: []
      syntax:
        content:
          CSharp: public int errorCounter
          VB: Public errorCounter As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StatemachineConnector.TriggerTopPanelChange
      commentId: E:Static.StatemachineConnector.TriggerTopPanelChange
      language: CSharp
      name:
        CSharp: TriggerTopPanelChange
        VB: TriggerTopPanelChange
      nameWithType:
        CSharp: StatemachineConnector.TriggerTopPanelChange
        VB: StatemachineConnector.TriggerTopPanelChange
      qualifiedName:
        CSharp: Static.StatemachineConnector.TriggerTopPanelChange
        VB: Static.StatemachineConnector.TriggerTopPanelChange
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: TriggerTopPanelChange
        path: ''
        startLine: 5445
      syntax:
        content:
          CSharp: public event Action<string, int> TriggerTopPanelChange
          VB: Public Event TriggerTopPanelChange As Action(Of String, Integer)
        return:
          type: Global.Action{System.String,System.Int32}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StatemachineConnector.TriggerAcceptedStateChange
      commentId: E:Static.StatemachineConnector.TriggerAcceptedStateChange
      language: CSharp
      name:
        CSharp: TriggerAcceptedStateChange
        VB: TriggerAcceptedStateChange
      nameWithType:
        CSharp: StatemachineConnector.TriggerAcceptedStateChange
        VB: StatemachineConnector.TriggerAcceptedStateChange
      qualifiedName:
        CSharp: Static.StatemachineConnector.TriggerAcceptedStateChange
        VB: Static.StatemachineConnector.TriggerAcceptedStateChange
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: TriggerAcceptedStateChange
        path: ''
        startLine: 5446
      syntax:
        content:
          CSharp: public event Action<bool> TriggerAcceptedStateChange
          VB: Public Event TriggerAcceptedStateChange As Action(Of Boolean)
        return:
          type: Global.Action{System.Boolean}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StatemachineConnector.TriggerErrorOverlay
      commentId: E:Static.StatemachineConnector.TriggerErrorOverlay
      language: CSharp
      name:
        CSharp: TriggerErrorOverlay
        VB: TriggerErrorOverlay
      nameWithType:
        CSharp: StatemachineConnector.TriggerErrorOverlay
        VB: StatemachineConnector.TriggerErrorOverlay
      qualifiedName:
        CSharp: Static.StatemachineConnector.TriggerErrorOverlay
        VB: Static.StatemachineConnector.TriggerErrorOverlay
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: TriggerErrorOverlay
        path: ''
        startLine: 5447
      syntax:
        content:
          CSharp: public event Action<string, string> TriggerErrorOverlay
          VB: Public Event TriggerErrorOverlay As Action(Of String, String)
        return:
          type: Global.Action{System.String,System.String}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StatemachineConnector.TriggerExpertInsights
      commentId: E:Static.StatemachineConnector.TriggerExpertInsights
      language: CSharp
      name:
        CSharp: TriggerExpertInsights
        VB: TriggerExpertInsights
      nameWithType:
        CSharp: StatemachineConnector.TriggerExpertInsights
        VB: StatemachineConnector.TriggerExpertInsights
      qualifiedName:
        CSharp: Static.StatemachineConnector.TriggerExpertInsights
        VB: Static.StatemachineConnector.TriggerExpertInsights
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: TriggerExpertInsights
        path: ''
        startLine: 5448
      syntax:
        content:
          CSharp: public event Action<AudioClip, Sprite, string> TriggerExpertInsights
          VB: Public Event TriggerExpertInsights As Action(Of AudioClip, Sprite, String)
        return:
          type: Global.Action{AudioClip,Sprite,System.String}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StatemachineConnector.TriggerScenarioCompletionOverlay
      commentId: E:Static.StatemachineConnector.TriggerScenarioCompletionOverlay
      language: CSharp
      name:
        CSharp: TriggerScenarioCompletionOverlay
        VB: TriggerScenarioCompletionOverlay
      nameWithType:
        CSharp: StatemachineConnector.TriggerScenarioCompletionOverlay
        VB: StatemachineConnector.TriggerScenarioCompletionOverlay
      qualifiedName:
        CSharp: Static.StatemachineConnector.TriggerScenarioCompletionOverlay
        VB: Static.StatemachineConnector.TriggerScenarioCompletionOverlay
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: TriggerScenarioCompletionOverlay
        path: ''
        startLine: 5449
      syntax:
        content:
          CSharp: public event Action TriggerScenarioCompletionOverlay
          VB: Public Event TriggerScenarioCompletionOverlay As Action
        return:
          type: Global.Action
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StatemachineConnector.TriggerUIQuestion
      commentId: E:Static.StatemachineConnector.TriggerUIQuestion
      language: CSharp
      name:
        CSharp: TriggerUIQuestion
        VB: TriggerUIQuestion
      nameWithType:
        CSharp: StatemachineConnector.TriggerUIQuestion
        VB: StatemachineConnector.TriggerUIQuestion
      qualifiedName:
        CSharp: Static.StatemachineConnector.TriggerUIQuestion
        VB: Static.StatemachineConnector.TriggerUIQuestion
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: TriggerUIQuestion
        path: ''
        startLine: 5450
      syntax:
        content:
          CSharp: public event Action<QuestionUITypes, string, List<Answer>> TriggerUIQuestion
          VB: Public Event TriggerUIQuestion As Action(Of QuestionUITypes, String, List(Of Answer))
        return:
          type: Global.Action{QuestionUITypes,System.String,System.Collections.Generic.List{Answer}}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StatemachineConnector.RegisterNewStateChangeTrigger(Func{Static.StateInformation,System.Boolean})
      commentId: M:Static.StatemachineConnector.RegisterNewStateChangeTrigger(Func{Static.StateInformation,System.Boolean})
      language: CSharp
      name:
        CSharp: RegisterNewStateChangeTrigger(Func<StateInformation, Boolean>)
        VB: RegisterNewStateChangeTrigger(Func(Of StateInformation, Boolean))
      nameWithType:
        CSharp: StatemachineConnector.RegisterNewStateChangeTrigger(Func<StateInformation, Boolean>)
        VB: StatemachineConnector.RegisterNewStateChangeTrigger(Func(Of StateInformation, Boolean))
      qualifiedName:
        CSharp: Static.StatemachineConnector.RegisterNewStateChangeTrigger(Func<Static.StateInformation, System.Boolean>)
        VB: Static.StatemachineConnector.RegisterNewStateChangeTrigger(Func(Of Static.StateInformation, System.Boolean))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: RegisterNewStateChangeTrigger
        path: ''
        startLine: 5462
      summary: "\nRegisters a new state change trigger from the visual state flow. This trigger\ndetermines which node in the visual scripting graph is handling the state change request.\n"
      example: []
      syntax:
        content:
          CSharp: public static void RegisterNewStateChangeTrigger(Func<StateInformation, bool> action)
          VB: Public Shared Sub RegisterNewStateChangeTrigger(action As Func(Of StateInformation, Boolean))
        parameters:
        - id: action
          type: Global.Func{Static.StateInformation,System.Boolean}
          description: The Func to that is registered.
      overload: Static.StatemachineConnector.RegisterNewStateChangeTrigger*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Static.StatemachineConnector.RequestStateChange(Static.StateInformation)
      commentId: M:Static.StatemachineConnector.RequestStateChange(Static.StateInformation)
      language: CSharp
      name:
        CSharp: RequestStateChange(StateInformation)
        VB: RequestStateChange(StateInformation)
      nameWithType:
        CSharp: StatemachineConnector.RequestStateChange(StateInformation)
        VB: StatemachineConnector.RequestStateChange(StateInformation)
      qualifiedName:
        CSharp: Static.StatemachineConnector.RequestStateChange(Static.StateInformation)
        VB: Static.StatemachineConnector.RequestStateChange(Static.StateInformation)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: RequestStateChange
        path: ''
        startLine: 5473
      summary: "\nRequest a statechange from the statemachine.\n"
      example: []
      syntax:
        content:
          CSharp: public bool RequestStateChange(StateInformation stateInformation)
          VB: Public Function RequestStateChange(stateInformation As StateInformation) As Boolean
        parameters:
        - id: stateInformation
          type: Static.StateInformation
          description: ''
        return:
          type: System.Boolean
          description: ''
      overload: Static.StatemachineConnector.RequestStateChange*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StatemachineConnector.UpdateTopPanel(System.String,System.Int32)
      commentId: M:Static.StatemachineConnector.UpdateTopPanel(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: UpdateTopPanel(String, Int32)
        VB: UpdateTopPanel(String, Int32)
      nameWithType:
        CSharp: StatemachineConnector.UpdateTopPanel(String, Int32)
        VB: StatemachineConnector.UpdateTopPanel(String, Int32)
      qualifiedName:
        CSharp: Static.StatemachineConnector.UpdateTopPanel(System.String, System.Int32)
        VB: Static.StatemachineConnector.UpdateTopPanel(System.String, System.Int32)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: UpdateTopPanel
        path: ''
        startLine: 5576
      summary: "\nCalled by the visual state machine, triggers an Action that updates the instruction text and completion percentage\nof the top panel.\n"
      example: []
      syntax:
        content:
          CSharp: public void UpdateTopPanel(string text, int completionPercentage)
          VB: Public Sub UpdateTopPanel(text As String, completionPercentage As Integer)
        parameters:
        - id: text
          type: System.String
          description: New instruction displayed on the top panel
        - id: completionPercentage
          type: System.Int32
          description: New compeltion percentage displayed
      overload: Static.StatemachineConnector.UpdateTopPanel*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StatemachineConnector.AcceptedStateChange(System.Boolean)
      commentId: M:Static.StatemachineConnector.AcceptedStateChange(System.Boolean)
      language: CSharp
      name:
        CSharp: AcceptedStateChange(Boolean)
        VB: AcceptedStateChange(Boolean)
      nameWithType:
        CSharp: StatemachineConnector.AcceptedStateChange(Boolean)
        VB: StatemachineConnector.AcceptedStateChange(Boolean)
      qualifiedName:
        CSharp: Static.StatemachineConnector.AcceptedStateChange(System.Boolean)
        VB: Static.StatemachineConnector.AcceptedStateChange(System.Boolean)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: AcceptedStateChange
        path: ''
        startLine: 5586
      summary: "\nCalled by the state machine. Triggers an Action that indicates if the state change was accepted.\n"
      example: []
      syntax:
        content:
          CSharp: public void AcceptedStateChange(bool stateChangeAccepted)
          VB: Public Sub AcceptedStateChange(stateChangeAccepted As Boolean)
        parameters:
        - id: stateChangeAccepted
          type: System.Boolean
          description: Is the statechange accepted
      overload: Static.StatemachineConnector.AcceptedStateChange*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StatemachineConnector.ShowErrorOverlay(System.String,System.String)
      commentId: M:Static.StatemachineConnector.ShowErrorOverlay(System.String,System.String)
      language: CSharp
      name:
        CSharp: ShowErrorOverlay(String, String)
        VB: ShowErrorOverlay(String, String)
      nameWithType:
        CSharp: StatemachineConnector.ShowErrorOverlay(String, String)
        VB: StatemachineConnector.ShowErrorOverlay(String, String)
      qualifiedName:
        CSharp: Static.StatemachineConnector.ShowErrorOverlay(System.String, System.String)
        VB: Static.StatemachineConnector.ShowErrorOverlay(System.String, System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: ShowErrorOverlay
        path: ''
        startLine: 5597
      summary: "\nCalled by the visual state machine. Triggers an Action that shows the error overlay.\n"
      example: []
      syntax:
        content:
          CSharp: public void ShowErrorOverlay(string headerText, string errorText)
          VB: Public Sub ShowErrorOverlay(headerText As String, errorText As String)
        parameters:
        - id: headerText
          type: System.String
          description: The Header of the error overlay
        - id: errorText
          type: System.String
          description: The text body of the error overlay
      overload: Static.StatemachineConnector.ShowErrorOverlay*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StatemachineConnector.ShowExpertInsights(AudioClip,Sprite,System.String)
      commentId: M:Static.StatemachineConnector.ShowExpertInsights(AudioClip,Sprite,System.String)
      language: CSharp
      name:
        CSharp: ShowExpertInsights(AudioClip, Sprite, String)
        VB: ShowExpertInsights(AudioClip, Sprite, String)
      nameWithType:
        CSharp: StatemachineConnector.ShowExpertInsights(AudioClip, Sprite, String)
        VB: StatemachineConnector.ShowExpertInsights(AudioClip, Sprite, String)
      qualifiedName:
        CSharp: Static.StatemachineConnector.ShowExpertInsights(AudioClip, Sprite, System.String)
        VB: Static.StatemachineConnector.ShowExpertInsights(AudioClip, Sprite, System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: ShowExpertInsights
        path: ''
        startLine: 5609
      summary: "\nCalled by the visual state machine. Triggers an Action that shows the expert insight modality and plays and audio clip.\n"
      example: []
      syntax:
        content:
          CSharp: public void ShowExpertInsights(AudioClip audio, Sprite image, string text)
          VB: Public Sub ShowExpertInsights(audio As AudioClip, image As Sprite, text As String)
        parameters:
        - id: audio
          type: Global.AudioClip
          description: The audioclip that is played with the expert insight
        - id: image
          type: Global.Sprite
          description: The image that is displayed, e.g. the expert providing the insight.
        - id: text
          type: System.String
          description: The text displayed at the expert speechbubble
      overload: Static.StatemachineConnector.ShowExpertInsights*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StatemachineConnector.ShowCompletionOverlay
      commentId: M:Static.StatemachineConnector.ShowCompletionOverlay
      language: CSharp
      name:
        CSharp: ShowCompletionOverlay()
        VB: ShowCompletionOverlay()
      nameWithType:
        CSharp: StatemachineConnector.ShowCompletionOverlay()
        VB: StatemachineConnector.ShowCompletionOverlay()
      qualifiedName:
        CSharp: Static.StatemachineConnector.ShowCompletionOverlay()
        VB: Static.StatemachineConnector.ShowCompletionOverlay()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: ShowCompletionOverlay
        path: ''
        startLine: 5618
      summary: "\nTriggers the scenario completion overlay.\n"
      example: []
      syntax:
        content:
          CSharp: public void ShowCompletionOverlay()
          VB: Public Sub ShowCompletionOverlay
      overload: Static.StatemachineConnector.ShowCompletionOverlay*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StatemachineConnector.StartQuestionUI(QuestionUITypes,System.String,System.Collections.Generic.List{Answer})
      commentId: M:Static.StatemachineConnector.StartQuestionUI(QuestionUITypes,System.String,System.Collections.Generic.List{Answer})
      language: CSharp
      name:
        CSharp: StartQuestionUI(QuestionUITypes, String, List<Answer>)
        VB: StartQuestionUI(QuestionUITypes, String, List(Of Answer))
      nameWithType:
        CSharp: StatemachineConnector.StartQuestionUI(QuestionUITypes, String, List<Answer>)
        VB: StatemachineConnector.StartQuestionUI(QuestionUITypes, String, List(Of Answer))
      qualifiedName:
        CSharp: Static.StatemachineConnector.StartQuestionUI(QuestionUITypes, System.String, System.Collections.Generic.List<Answer>)
        VB: Static.StatemachineConnector.StartQuestionUI(QuestionUITypes, System.String, System.Collections.Generic.List(Of Answer))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: StartQuestionUI
        path: ''
        startLine: 5631
      summary: "\nTriggers a new Questionnaire to be answered by the user on the UI.\n"
      example: []
      syntax:
        content:
          CSharp: public void StartQuestionUI(QuestionUITypes type, string question, List<Answer> answers)
          VB: Public Sub StartQuestionUI(type As QuestionUITypes, question As String, answers As List(Of Answer))
        parameters:
        - id: type
          type: Global.QuestionUITypes
          description: The type of Question(MultipleChoice, List, Input).
        - id: question
          type: System.String
          description: The question.
        - id: answers
          type: System.Collections.Generic.List{Answer}
          description: A List of struct with all possible answers.
      overload: Static.StatemachineConnector.StartQuestionUI*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Static.StatemachineConnector.Reset
      commentId: M:Static.StatemachineConnector.Reset
      language: CSharp
      name:
        CSharp: Reset()
        VB: Reset()
      nameWithType:
        CSharp: StatemachineConnector.Reset()
        VB: StatemachineConnector.Reset()
      qualifiedName:
        CSharp: Static.StatemachineConnector.Reset()
        VB: Static.StatemachineConnector.Reset()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Static
      source:
        id: Reset
        path: ''
        startLine: 5640
      summary: "\nResets the instance of this static instance.\n"
      example: []
      syntax:
        content:
          CSharp: public void Reset()
          VB: Public Sub Reset
      overload: Static.StatemachineConnector.Reset*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: Tracking
  commentId: N:Tracking
  language: CSharp
  name:
    CSharp: Tracking
    VB: Tracking
  nameWithType:
    CSharp: Tracking
    VB: Tracking
  qualifiedName:
    CSharp: Tracking
    VB: Tracking
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Tracking.FetchAspectRatioFromARCamera
    commentId: T:Tracking.FetchAspectRatioFromARCamera
    language: CSharp
    name:
      CSharp: FetchAspectRatioFromARCamera
      VB: FetchAspectRatioFromARCamera
    nameWithType:
      CSharp: FetchAspectRatioFromARCamera
      VB: FetchAspectRatioFromARCamera
    qualifiedName:
      CSharp: Tracking.FetchAspectRatioFromARCamera
      VB: Tracking.FetchAspectRatioFromARCamera
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Tracking
    source:
      id: FetchAspectRatioFromARCamera
      path: ''
      startLine: 5654
    summary: "\nFetches the projectionmatrix from one camera and diretly applies it to another one.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class FetchAspectRatioFromARCamera : MonoBehaviour'
        VB: >-
          Public Class FetchAspectRatioFromARCamera

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
- id: UI
  commentId: N:UI
  language: CSharp
  name:
    CSharp: UI
    VB: UI
  nameWithType:
    CSharp: UI
    VB: UI
  qualifiedName:
    CSharp: UI
    VB: UI
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: UI.CrosshairOnOff
    commentId: T:UI.CrosshairOnOff
    language: CSharp
    name:
      CSharp: CrosshairOnOff
      VB: CrosshairOnOff
    nameWithType:
      CSharp: CrosshairOnOff
      VB: CrosshairOnOff
    qualifiedName:
      CSharp: UI.CrosshairOnOff
      VB: UI.CrosshairOnOff
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: CrosshairOnOff
      path: ''
      startLine: 5688
    summary: "\nControls the dynamic transformations of the crosshair. It activates and deactivates the crosshair\nbut also visualizes the distance to a grabbable TrainAR object by converging the crosshairs size until\nthe object would be selected (e.g. if the user is too far away from an object to grab it).\n"
    example: []
    syntax:
      content:
        CSharp: 'public class CrosshairOnOff : MonoBehaviour'
        VB: >-
          Public Class CrosshairOnOff

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: UI.DirectInfoController
    commentId: T:UI.DirectInfoController
    language: CSharp
    name:
      CSharp: DirectInfoController
      VB: DirectInfoController
    nameWithType:
      CSharp: DirectInfoController
      VB: DirectInfoController
    qualifiedName:
      CSharp: UI.DirectInfoController
      VB: UI.DirectInfoController
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: DirectInfoController
      path: ''
      startLine: 5771
    summary: "\nThe DirectInfoBoxController handles the displaying of direct info boxes that are used to display insishgts to the user.\nIt is triggerd through invocation of an action in the StatemachineConnector and therefore has no public methods.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class DirectInfoController : MonoBehaviour'
        VB: >-
          Public Class DirectInfoController

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: UI.ErrorOverlayController
    commentId: T:UI.ErrorOverlayController
    language: CSharp
    name:
      CSharp: ErrorOverlayController
      VB: ErrorOverlayController
    nameWithType:
      CSharp: ErrorOverlayController
      VB: ErrorOverlayController
    qualifiedName:
      CSharp: UI.ErrorOverlayController
      VB: UI.ErrorOverlayController
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: ErrorOverlayController
      path: ''
      startLine: 5893
    summary: "\nThe error overlay controller handles the error overlay, triggers it on actions from the statemachine and sets its texts.\nIt is triggerd through invocation of an action in the StatemachineConnector and therefore has no public methods.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ErrorOverlayController : MonoBehaviour'
        VB: >-
          Public Class ErrorOverlayController

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: UI.InputFieldAdjust
    commentId: T:UI.InputFieldAdjust
    language: CSharp
    name:
      CSharp: InputFieldAdjust
      VB: InputFieldAdjust
    nameWithType:
      CSharp: InputFieldAdjust
      VB: InputFieldAdjust
    qualifiedName:
      CSharp: UI.InputFieldAdjust
      VB: UI.InputFieldAdjust
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: InputFieldAdjust
      path: ''
      startLine: 5952
    summary: "\nInputFieldAdjust Adjusts the UI of the Input field when the keyboard is opened.\nThis is mostly problematic on Android otherwise.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class InputFieldAdjust : MonoBehaviour'
        VB: >-
          Public Class InputFieldAdjust

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.InputFieldAdjust.AdjustInputFieldPosition
      commentId: M:UI.InputFieldAdjust.AdjustInputFieldPosition
      language: CSharp
      name:
        CSharp: AdjustInputFieldPosition()
        VB: AdjustInputFieldPosition()
      nameWithType:
        CSharp: InputFieldAdjust.AdjustInputFieldPosition()
        VB: InputFieldAdjust.AdjustInputFieldPosition()
      qualifiedName:
        CSharp: UI.InputFieldAdjust.AdjustInputFieldPosition()
        VB: UI.InputFieldAdjust.AdjustInputFieldPosition()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: AdjustInputFieldPosition
        path: ''
        startLine: 6056
      summary: "\nAdjusts the position of the Inputfield UI when the Android or iOS keyboard is opened.\n"
      example: []
      syntax:
        content:
          CSharp: public void AdjustInputFieldPosition()
          VB: Public Sub AdjustInputFieldPosition
      overload: UI.InputFieldAdjust.AdjustInputFieldPosition*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.InteractButton
    commentId: T:UI.InteractButton
    language: CSharp
    name:
      CSharp: InteractButton
      VB: InteractButton
    nameWithType:
      CSharp: InteractButton
      VB: InteractButton
    qualifiedName:
      CSharp: UI.InteractButton
      VB: UI.InteractButton
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: InteractButton
      path: ''
      startLine: 6073
    summary: "\nHandles interactions with the interact button.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class InteractButton : MonoBehaviour'
        VB: >-
          Public Class InteractButton

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.InteractButton.ReleaseInteract
      commentId: M:UI.InteractButton.ReleaseInteract
      language: CSharp
      name:
        CSharp: ReleaseInteract()
        VB: ReleaseInteract()
      nameWithType:
        CSharp: InteractButton.ReleaseInteract()
        VB: InteractButton.ReleaseInteract()
      qualifiedName:
        CSharp: UI.InteractButton.ReleaseInteract()
        VB: UI.InteractButton.ReleaseInteract()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: ReleaseInteract
        path: ''
        startLine: 6102
      summary: "\nCalls either an interact or an combine, depending on the interactioncontroller context.\n"
      example: []
      syntax:
        content:
          CSharp: public void ReleaseInteract()
          VB: Public Sub ReleaseInteract
      overload: UI.InteractButton.ReleaseInteract*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.InteractionButtonController
    commentId: T:UI.InteractionButtonController
    language: CSharp
    name:
      CSharp: InteractionButtonController
      VB: InteractionButtonController
    nameWithType:
      CSharp: InteractionButtonController
      VB: InteractionButtonController
    qualifiedName:
      CSharp: UI.InteractionButtonController
      VB: UI.InteractionButtonController
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: InteractionButtonController
      path: ''
      startLine: 6140
    summary: "\nHandles the behaviour of the interaction buttons, such as enabling and disabling when appropriate\nor highlighting the combine button in orange when a combination would be possible.\n\nIt also allows for grabbed objects to be rotatable.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class InteractionButtonController : MonoBehaviour'
        VB: >-
          Public Class InteractionButtonController

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.InteractionButtonController.grabbedObjectRotationSpeed
      commentId: F:UI.InteractionButtonController.grabbedObjectRotationSpeed
      language: CSharp
      name:
        CSharp: grabbedObjectRotationSpeed
        VB: grabbedObjectRotationSpeed
      nameWithType:
        CSharp: InteractionButtonController.grabbedObjectRotationSpeed
        VB: InteractionButtonController.grabbedObjectRotationSpeed
      qualifiedName:
        CSharp: UI.InteractionButtonController.grabbedObjectRotationSpeed
        VB: UI.InteractionButtonController.grabbedObjectRotationSpeed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: grabbedObjectRotationSpeed
        path: ''
        startLine: 6184
      summary: "\nThe speed that a grabbed object is rotated.\n"
      example: []
      syntax:
        content:
          CSharp: public float grabbedObjectRotationSpeed
          VB: Public grabbedObjectRotationSpeed As Single
        return:
          type: System.Single
          description: Default is 0.2f.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.InteractionButtonController.ActivateInteractButtons
      commentId: M:UI.InteractionButtonController.ActivateInteractButtons
      language: CSharp
      name:
        CSharp: ActivateInteractButtons()
        VB: ActivateInteractButtons()
      nameWithType:
        CSharp: InteractionButtonController.ActivateInteractButtons()
        VB: InteractionButtonController.ActivateInteractButtons()
      qualifiedName:
        CSharp: UI.InteractionButtonController.ActivateInteractButtons()
        VB: UI.InteractionButtonController.ActivateInteractButtons()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: ActivateInteractButtons
        path: ''
        startLine: 6223
      summary: "\nActivates the interaction buttons for the user to see.\n"
      example: []
      syntax:
        content:
          CSharp: public void ActivateInteractButtons()
          VB: Public Sub ActivateInteractButtons
      overload: UI.InteractionButtonController.ActivateInteractButtons*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.InteractionButtonController.DeactivateInteractButtons
      commentId: M:UI.InteractionButtonController.DeactivateInteractButtons
      language: CSharp
      name:
        CSharp: DeactivateInteractButtons()
        VB: DeactivateInteractButtons()
      nameWithType:
        CSharp: InteractionButtonController.DeactivateInteractButtons()
        VB: InteractionButtonController.DeactivateInteractButtons()
      qualifiedName:
        CSharp: UI.InteractionButtonController.DeactivateInteractButtons()
        VB: UI.InteractionButtonController.DeactivateInteractButtons()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: DeactivateInteractButtons
        path: ''
        startLine: 6247
      summary: "\nDeactivates the interaction buttons.\n"
      example: []
      syntax:
        content:
          CSharp: public void DeactivateInteractButtons()
          VB: Public Sub DeactivateInteractButtons
      overload: UI.InteractionButtonController.DeactivateInteractButtons*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.InteractionButtonController.GrabRelease
      commentId: M:UI.InteractionButtonController.GrabRelease
      language: CSharp
      name:
        CSharp: GrabRelease()
        VB: GrabRelease()
      nameWithType:
        CSharp: InteractionButtonController.GrabRelease()
        VB: InteractionButtonController.GrabRelease()
      qualifiedName:
        CSharp: UI.InteractionButtonController.GrabRelease()
        VB: UI.InteractionButtonController.GrabRelease()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: GrabRelease
        path: ''
        startLine: 6310
      summary: "\nHandles what happenes when the grab/Release button is called depending on its current state.\n"
      example: []
      syntax:
        content:
          CSharp: public void GrabRelease()
          VB: Public Sub GrabRelease
      overload: UI.InteractionButtonController.GrabRelease*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.OnBoardingController
    commentId: T:UI.OnBoardingController
    language: CSharp
    name:
      CSharp: OnBoardingController
      VB: OnBoardingController
    nameWithType:
      CSharp: OnBoardingController
      VB: OnBoardingController
    qualifiedName:
      CSharp: UI.OnBoardingController
      VB: UI.OnBoardingController
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: OnBoardingController
      path: ''
      startLine: 6366
    summary: "\nThe OnBoardingController handles displaying the onboarding animations for scanning the environment and placing the\ntraining assembly by automaticaly detecting at which point and where sufficient feature points for a plane were detected.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class OnBoardingController : MonoBehaviour'
        VB: >-
          Public Class OnBoardingController

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: UI.OpenSidePanel
    commentId: T:UI.OpenSidePanel
    language: CSharp
    name:
      CSharp: OpenSidePanel
      VB: OpenSidePanel
    nameWithType:
      CSharp: OpenSidePanel
      VB: OpenSidePanel
    qualifiedName:
      CSharp: UI.OpenSidePanel
      VB: UI.OpenSidePanel
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: OpenSidePanel
      path: ''
      startLine: 6759
    summary: "\nHandles opening or closing of the side panel (burger menu) wiht options for help, quitting and replacing the assembly.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class OpenSidePanel : MonoBehaviour'
        VB: >-
          Public Class OpenSidePanel

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.OpenSidePanel.TogglePanel
      commentId: M:UI.OpenSidePanel.TogglePanel
      language: CSharp
      name:
        CSharp: TogglePanel()
        VB: TogglePanel()
      nameWithType:
        CSharp: OpenSidePanel.TogglePanel()
        VB: OpenSidePanel.TogglePanel()
      qualifiedName:
        CSharp: UI.OpenSidePanel.TogglePanel()
        VB: UI.OpenSidePanel.TogglePanel()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: TogglePanel
        path: ''
        startLine: 6772
      summary: "\nOpens or closes the Panel.\n"
      example: []
      syntax:
        content:
          CSharp: public void TogglePanel()
          VB: Public Sub TogglePanel
      overload: UI.OpenSidePanel.TogglePanel*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.Question
    commentId: T:UI.Question
    language: CSharp
    name:
      CSharp: Question
      VB: Question
    nameWithType:
      CSharp: Question
      VB: Question
    qualifiedName:
      CSharp: UI.Question
      VB: UI.Question
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: Question
      path: ''
      startLine: 6798
    summary: "\nThe abstract class for questions to share the same UI functions.\n"
    example: []
    syntax:
      content:
        CSharp: public abstract class Question
        VB: Public MustInherit Class Question
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - abstract
      - class
      VB:
      - Public
      - MustInherit
      - Class
    items:
    - id: UI.Question.questionText
      commentId: F:UI.Question.questionText
      language: CSharp
      name:
        CSharp: questionText
        VB: questionText
      nameWithType:
        CSharp: Question.questionText
        VB: Question.questionText
      qualifiedName:
        CSharp: UI.Question.questionText
        VB: UI.Question.questionText
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: questionText
        path: ''
        startLine: 6803
      summary: "\nEvery question needs a questionText.\n"
      example: []
      syntax:
        content:
          CSharp: public string questionText
          VB: Public questionText As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.QuestionnaireController
    commentId: T:UI.QuestionnaireController
    language: CSharp
    name:
      CSharp: QuestionnaireController
      VB: QuestionnaireController
    nameWithType:
      CSharp: QuestionnaireController
      VB: QuestionnaireController
    qualifiedName:
      CSharp: UI.QuestionnaireController
      VB: UI.QuestionnaireController
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: QuestionnaireController
      path: ''
      startLine: 6828
    summary: "\nThe QuestionaireController provides the functionality to control the input field questions, reqular question and question lists.\nThe input field question opens the keyboard and recives any given string input from the user.\nThe regular question opens a question with up to four possible pre-defined awnsers.\nThe question list opens a list with n possible items and continues when all right items were selected.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class QuestionnaireController : MonoBehaviour'
        VB: >-
          Public Class QuestionnaireController

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.QuestionnaireController.duration
      commentId: F:UI.QuestionnaireController.duration
      language: CSharp
      name:
        CSharp: duration
        VB: duration
      nameWithType:
        CSharp: QuestionnaireController.duration
        VB: QuestionnaireController.duration
      qualifiedName:
        CSharp: UI.QuestionnaireController.duration
        VB: UI.QuestionnaireController.duration
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: duration
        path: ''
        startLine: 6839
      summary: "\nHow long it takes to fade in the UI.\n"
      example: []
      syntax:
        content:
          CSharp: public float duration
          VB: Public duration As Single
        return:
          type: System.Single
          description: Default is 1.0f seconds.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.inputFieldQuestionUI
      commentId: F:UI.QuestionnaireController.inputFieldQuestionUI
      language: CSharp
      name:
        CSharp: inputFieldQuestionUI
        VB: inputFieldQuestionUI
      nameWithType:
        CSharp: QuestionnaireController.inputFieldQuestionUI
        VB: QuestionnaireController.inputFieldQuestionUI
      qualifiedName:
        CSharp: UI.QuestionnaireController.inputFieldQuestionUI
        VB: UI.QuestionnaireController.inputFieldQuestionUI
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: inputFieldQuestionUI
        path: ''
        startLine: 6856
      summary: "\nReference to the root gameObject of the inputFieldUI.\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject inputFieldQuestionUI
          VB: Public inputFieldQuestionUI As GameObject
        return:
          type: Global.GameObject
          description: Set in inspector.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.inputFieldQuestionText
      commentId: F:UI.QuestionnaireController.inputFieldQuestionText
      language: CSharp
      name:
        CSharp: inputFieldQuestionText
        VB: inputFieldQuestionText
      nameWithType:
        CSharp: QuestionnaireController.inputFieldQuestionText
        VB: QuestionnaireController.inputFieldQuestionText
      qualifiedName:
        CSharp: UI.QuestionnaireController.inputFieldQuestionText
        VB: UI.QuestionnaireController.inputFieldQuestionText
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: inputFieldQuestionText
        path: ''
        startLine: 6861
      summary: "\nReference to the inputFieldQuestionText.\n"
      example: []
      syntax:
        content:
          CSharp: public TextMeshProUGUI inputFieldQuestionText
          VB: Public inputFieldQuestionText As TextMeshProUGUI
        return:
          type: Global.TextMeshProUGUI
          description: Set in inspector.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.inputFieldAnswerText
      commentId: F:UI.QuestionnaireController.inputFieldAnswerText
      language: CSharp
      name:
        CSharp: inputFieldAnswerText
        VB: inputFieldAnswerText
      nameWithType:
        CSharp: QuestionnaireController.inputFieldAnswerText
        VB: QuestionnaireController.inputFieldAnswerText
      qualifiedName:
        CSharp: UI.QuestionnaireController.inputFieldAnswerText
        VB: UI.QuestionnaireController.inputFieldAnswerText
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: inputFieldAnswerText
        path: ''
        startLine: 6866
      summary: "\nReference to the inputFieldAnswerText.\n"
      example: []
      syntax:
        content:
          CSharp: public TextMeshProUGUI inputFieldAnswerText
          VB: Public inputFieldAnswerText As TextMeshProUGUI
        return:
          type: Global.TextMeshProUGUI
          description: Set in inspector.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.regularQuestionUI
      commentId: F:UI.QuestionnaireController.regularQuestionUI
      language: CSharp
      name:
        CSharp: regularQuestionUI
        VB: regularQuestionUI
      nameWithType:
        CSharp: QuestionnaireController.regularQuestionUI
        VB: QuestionnaireController.regularQuestionUI
      qualifiedName:
        CSharp: UI.QuestionnaireController.regularQuestionUI
        VB: UI.QuestionnaireController.regularQuestionUI
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: regularQuestionUI
        path: ''
        startLine: 6884
      summary: "\nReference to the root gameObject of the regularQuestionUI.\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject regularQuestionUI
          VB: Public regularQuestionUI As GameObject
        return:
          type: Global.GameObject
          description: Set in inspector.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.questionTextUI
      commentId: F:UI.QuestionnaireController.questionTextUI
      language: CSharp
      name:
        CSharp: questionTextUI
        VB: questionTextUI
      nameWithType:
        CSharp: QuestionnaireController.questionTextUI
        VB: QuestionnaireController.questionTextUI
      qualifiedName:
        CSharp: UI.QuestionnaireController.questionTextUI
        VB: UI.QuestionnaireController.questionTextUI
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: questionTextUI
        path: ''
        startLine: 6889
      summary: "\nReference to the questionText.\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject questionTextUI
          VB: Public questionTextUI As GameObject
        return:
          type: Global.GameObject
          description: Set in inspector.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.questionnaireUIRectTransform
      commentId: F:UI.QuestionnaireController.questionnaireUIRectTransform
      language: CSharp
      name:
        CSharp: questionnaireUIRectTransform
        VB: questionnaireUIRectTransform
      nameWithType:
        CSharp: QuestionnaireController.questionnaireUIRectTransform
        VB: QuestionnaireController.questionnaireUIRectTransform
      qualifiedName:
        CSharp: UI.QuestionnaireController.questionnaireUIRectTransform
        VB: UI.QuestionnaireController.questionnaireUIRectTransform
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: questionnaireUIRectTransform
        path: ''
        startLine: 6894
      summary: "\nReference to the UIRectTransform.\n"
      example: []
      syntax:
        content:
          CSharp: public RectTransform questionnaireUIRectTransform
          VB: Public questionnaireUIRectTransform As RectTransform
        return:
          type: Global.RectTransform
          description: Set in inspector.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.buttons
      commentId: F:UI.QuestionnaireController.buttons
      language: CSharp
      name:
        CSharp: buttons
        VB: buttons
      nameWithType:
        CSharp: QuestionnaireController.buttons
        VB: QuestionnaireController.buttons
      qualifiedName:
        CSharp: UI.QuestionnaireController.buttons
        VB: UI.QuestionnaireController.buttons
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: buttons
        path: ''
        startLine: 6904
      summary: "\nReferences to the Buttons\n"
      example: []
      syntax:
        content:
          CSharp: public List<Button> buttons
          VB: Public buttons As List(Of Button)
        return:
          type: System.Collections.Generic.List{Button}
          description: Set in inspector.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.questionText
      commentId: F:UI.QuestionnaireController.questionText
      language: CSharp
      name:
        CSharp: questionText
        VB: questionText
      nameWithType:
        CSharp: QuestionnaireController.questionText
        VB: QuestionnaireController.questionText
      qualifiedName:
        CSharp: UI.QuestionnaireController.questionText
        VB: UI.QuestionnaireController.questionText
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: questionText
        path: ''
        startLine: 6909
      summary: "\nReference to the questionText.\n"
      example: []
      syntax:
        content:
          CSharp: public TextMeshProUGUI questionText
          VB: Public questionText As TextMeshProUGUI
        return:
          type: Global.TextMeshProUGUI
          description: Set in inspector.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.responseText
      commentId: F:UI.QuestionnaireController.responseText
      language: CSharp
      name:
        CSharp: responseText
        VB: responseText
      nameWithType:
        CSharp: QuestionnaireController.responseText
        VB: QuestionnaireController.responseText
      qualifiedName:
        CSharp: UI.QuestionnaireController.responseText
        VB: UI.QuestionnaireController.responseText
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: responseText
        path: ''
        startLine: 6914
      summary: "\nReference to the ResponseText.\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject responseText
          VB: Public responseText As GameObject
        return:
          type: Global.GameObject
          description: Set in inspector.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.questionList
      commentId: F:UI.QuestionnaireController.questionList
      language: CSharp
      name:
        CSharp: questionList
        VB: questionList
      nameWithType:
        CSharp: QuestionnaireController.questionList
        VB: QuestionnaireController.questionList
      qualifiedName:
        CSharp: UI.QuestionnaireController.questionList
        VB: UI.QuestionnaireController.questionList
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: questionList
        path: ''
        startLine: 6921
      summary: "\nReference to the root of the question list UI.\n"
      example: []
      syntax:
        content:
          CSharp: public GameObject questionList
          VB: Public questionList As GameObject
        return:
          type: Global.GameObject
          description: Set in inspector.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.questionListQuestionText
      commentId: F:UI.QuestionnaireController.questionListQuestionText
      language: CSharp
      name:
        CSharp: questionListQuestionText
        VB: questionListQuestionText
      nameWithType:
        CSharp: QuestionnaireController.questionListQuestionText
        VB: QuestionnaireController.questionListQuestionText
      qualifiedName:
        CSharp: UI.QuestionnaireController.questionListQuestionText
        VB: UI.QuestionnaireController.questionListQuestionText
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: questionListQuestionText
        path: ''
        startLine: 6926
      summary: "\nReference to the QuestionListText.\n"
      example: []
      syntax:
        content:
          CSharp: public TextMeshProUGUI questionListQuestionText
          VB: Public questionListQuestionText As TextMeshProUGUI
        return:
          type: Global.TextMeshProUGUI
          description: Set in inspector.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.ButtonBlueprint
      commentId: F:UI.QuestionnaireController.ButtonBlueprint
      language: CSharp
      name:
        CSharp: ButtonBlueprint
        VB: ButtonBlueprint
      nameWithType:
        CSharp: QuestionnaireController.ButtonBlueprint
        VB: QuestionnaireController.ButtonBlueprint
      qualifiedName:
        CSharp: UI.QuestionnaireController.ButtonBlueprint
        VB: UI.QuestionnaireController.ButtonBlueprint
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: ButtonBlueprint
        path: ''
        startLine: 6931
      summary: "\nReference to the AnswerButtonPrefab.\n"
      example: []
      syntax:
        content:
          CSharp: public Button ButtonBlueprint
          VB: Public ButtonBlueprint As Button
        return:
          type: Global.Button
          description: Set in inspector.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.correctAnswerColor
      commentId: F:UI.QuestionnaireController.correctAnswerColor
      language: CSharp
      name:
        CSharp: correctAnswerColor
        VB: correctAnswerColor
      nameWithType:
        CSharp: QuestionnaireController.correctAnswerColor
        VB: QuestionnaireController.correctAnswerColor
      qualifiedName:
        CSharp: UI.QuestionnaireController.correctAnswerColor
        VB: UI.QuestionnaireController.correctAnswerColor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: correctAnswerColor
        path: ''
        startLine: 6948
      summary: "\nColor for correct answers.\n"
      example: []
      syntax:
        content:
          CSharp: public Color correctAnswerColor
          VB: Public correctAnswerColor As Color
        return:
          type: Global.Color
          description: Default set in inspector.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.wrongAnswerColor
      commentId: F:UI.QuestionnaireController.wrongAnswerColor
      language: CSharp
      name:
        CSharp: wrongAnswerColor
        VB: wrongAnswerColor
      nameWithType:
        CSharp: QuestionnaireController.wrongAnswerColor
        VB: QuestionnaireController.wrongAnswerColor
      qualifiedName:
        CSharp: UI.QuestionnaireController.wrongAnswerColor
        VB: UI.QuestionnaireController.wrongAnswerColor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: wrongAnswerColor
        path: ''
        startLine: 6953
      summary: "\nColor for wrong answers.\n"
      example: []
      syntax:
        content:
          CSharp: public Color wrongAnswerColor
          VB: Public wrongAnswerColor As Color
        return:
          type: Global.Color
          description: Default set in inspector.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.defaultUIColor
      commentId: F:UI.QuestionnaireController.defaultUIColor
      language: CSharp
      name:
        CSharp: defaultUIColor
        VB: defaultUIColor
      nameWithType:
        CSharp: QuestionnaireController.defaultUIColor
        VB: QuestionnaireController.defaultUIColor
      qualifiedName:
        CSharp: UI.QuestionnaireController.defaultUIColor
        VB: UI.QuestionnaireController.defaultUIColor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: defaultUIColor
        path: ''
        startLine: 6958
      summary: "\nColor for unpressed buttons.\n"
      example: []
      syntax:
        content:
          CSharp: public Color defaultUIColor
          VB: Public defaultUIColor As Color
        return:
          type: Global.Color
          description: Default set in inspector.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.correctAnswerSound
      commentId: F:UI.QuestionnaireController.correctAnswerSound
      language: CSharp
      name:
        CSharp: correctAnswerSound
        VB: correctAnswerSound
      nameWithType:
        CSharp: QuestionnaireController.correctAnswerSound
        VB: QuestionnaireController.correctAnswerSound
      qualifiedName:
        CSharp: UI.QuestionnaireController.correctAnswerSound
        VB: UI.QuestionnaireController.correctAnswerSound
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: correctAnswerSound
        path: ''
        startLine: 6970
      summary: "\nAudioclip that is played when correct answer is pressed.\n"
      example: []
      syntax:
        content:
          CSharp: public AudioClip correctAnswerSound
          VB: Public correctAnswerSound As AudioClip
        return:
          type: Global.AudioClip
          description: Default is set in inspector.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.wrongAnswerSound
      commentId: F:UI.QuestionnaireController.wrongAnswerSound
      language: CSharp
      name:
        CSharp: wrongAnswerSound
        VB: wrongAnswerSound
      nameWithType:
        CSharp: QuestionnaireController.wrongAnswerSound
        VB: QuestionnaireController.wrongAnswerSound
      qualifiedName:
        CSharp: UI.QuestionnaireController.wrongAnswerSound
        VB: UI.QuestionnaireController.wrongAnswerSound
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: wrongAnswerSound
        path: ''
        startLine: 6975
      summary: "\nAudioclip that is played when wrong answer is pressed.\n"
      example: []
      syntax:
        content:
          CSharp: public AudioClip wrongAnswerSound
          VB: Public wrongAnswerSound As AudioClip
        return:
          type: Global.AudioClip
          description: Default is set in inspector.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.wrongAnsweredQuestions
      commentId: F:UI.QuestionnaireController.wrongAnsweredQuestions
      language: CSharp
      name:
        CSharp: wrongAnsweredQuestions
        VB: wrongAnsweredQuestions
      nameWithType:
        CSharp: QuestionnaireController.wrongAnsweredQuestions
        VB: QuestionnaireController.wrongAnsweredQuestions
      qualifiedName:
        CSharp: UI.QuestionnaireController.wrongAnsweredQuestions
        VB: UI.QuestionnaireController.wrongAnsweredQuestions
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: wrongAnsweredQuestions
        path: ''
        startLine: 6986
      summary: "\nStores wrong answered questions for endscreen UI.\n"
      example: []
      syntax:
        content:
          CSharp: public List<string> wrongAnsweredQuestions
          VB: Public wrongAnsweredQuestions As List(Of String)
        return:
          type: System.Collections.Generic.List{System.String}
          description: Set on runtime.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.wrongAnswers
      commentId: F:UI.QuestionnaireController.wrongAnswers
      language: CSharp
      name:
        CSharp: wrongAnswers
        VB: wrongAnswers
      nameWithType:
        CSharp: QuestionnaireController.wrongAnswers
        VB: QuestionnaireController.wrongAnswers
      qualifiedName:
        CSharp: UI.QuestionnaireController.wrongAnswers
        VB: UI.QuestionnaireController.wrongAnswers
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: wrongAnswers
        path: ''
        startLine: 6991
      summary: "\nStores wrong answers for endscreen UI.\n"
      example: []
      syntax:
        content:
          CSharp: public List<string> wrongAnswers
          VB: Public wrongAnswers As List(Of String)
        return:
          type: System.Collections.Generic.List{System.String}
          description: Set on runtime.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.rightAnswer
      commentId: F:UI.QuestionnaireController.rightAnswer
      language: CSharp
      name:
        CSharp: rightAnswer
        VB: rightAnswer
      nameWithType:
        CSharp: QuestionnaireController.rightAnswer
        VB: QuestionnaireController.rightAnswer
      qualifiedName:
        CSharp: UI.QuestionnaireController.rightAnswer
        VB: UI.QuestionnaireController.rightAnswer
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: rightAnswer
        path: ''
        startLine: 6996
      summary: "\nStores right answers for endscreen UI.\n"
      example: []
      syntax:
        content:
          CSharp: public List<string> rightAnswer
          VB: Public rightAnswer As List(Of String)
        return:
          type: System.Collections.Generic.List{System.String}
          description: Set on runtime.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.InitQuestion(System.String,System.Collections.Generic.List{UI.QuestionnaireController.Answer})
      commentId: M:UI.QuestionnaireController.InitQuestion(System.String,System.Collections.Generic.List{UI.QuestionnaireController.Answer})
      language: CSharp
      name:
        CSharp: InitQuestion(String, List<QuestionnaireController.Answer>)
        VB: InitQuestion(String, List(Of QuestionnaireController.Answer))
      nameWithType:
        CSharp: QuestionnaireController.InitQuestion(String, List<QuestionnaireController.Answer>)
        VB: QuestionnaireController.InitQuestion(String, List(Of QuestionnaireController.Answer))
      qualifiedName:
        CSharp: UI.QuestionnaireController.InitQuestion(System.String, System.Collections.Generic.List<UI.QuestionnaireController.Answer>)
        VB: UI.QuestionnaireController.InitQuestion(System.String, System.Collections.Generic.List(Of UI.QuestionnaireController.Answer))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: InitQuestion
        path: ''
        startLine: 7087
      summary: "\nOpen the regular question UI.\n"
      example: []
      syntax:
        content:
          CSharp: public void InitQuestion(string question, List<QuestionnaireController.Answer> answers)
          VB: Public Sub InitQuestion(question As String, answers As List(Of QuestionnaireController.Answer))
        parameters:
        - id: question
          type: System.String
          description: Text of the question.
        - id: answers
          type: System.Collections.Generic.List{UI.QuestionnaireController.Answer}
          description: List of all possible answers.
      overload: UI.QuestionnaireController.InitQuestion*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.InitInputfield(System.String)
      commentId: M:UI.QuestionnaireController.InitInputfield(System.String)
      language: CSharp
      name:
        CSharp: InitInputfield(String)
        VB: InitInputfield(String)
      nameWithType:
        CSharp: QuestionnaireController.InitInputfield(String)
        VB: QuestionnaireController.InitInputfield(String)
      qualifiedName:
        CSharp: UI.QuestionnaireController.InitInputfield(System.String)
        VB: UI.QuestionnaireController.InitInputfield(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: InitInputfield
        path: ''
        startLine: 7114
      summary: "\nOpen the inputField question UI.\n"
      example: []
      syntax:
        content:
          CSharp: public void InitInputfield(string question)
          VB: Public Sub InitInputfield(question As String)
        parameters:
        - id: question
          type: System.String
          description: Text of the question.
      overload: UI.QuestionnaireController.InitInputfield*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.InitQuestionList(System.String,System.Collections.Generic.List{UI.QuestionnaireController.Answer})
      commentId: M:UI.QuestionnaireController.InitQuestionList(System.String,System.Collections.Generic.List{UI.QuestionnaireController.Answer})
      language: CSharp
      name:
        CSharp: InitQuestionList(String, List<QuestionnaireController.Answer>)
        VB: InitQuestionList(String, List(Of QuestionnaireController.Answer))
      nameWithType:
        CSharp: QuestionnaireController.InitQuestionList(String, List<QuestionnaireController.Answer>)
        VB: QuestionnaireController.InitQuestionList(String, List(Of QuestionnaireController.Answer))
      qualifiedName:
        CSharp: UI.QuestionnaireController.InitQuestionList(System.String, System.Collections.Generic.List<UI.QuestionnaireController.Answer>)
        VB: UI.QuestionnaireController.InitQuestionList(System.String, System.Collections.Generic.List(Of UI.QuestionnaireController.Answer))
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: InitQuestionList
        path: ''
        startLine: 7124
      summary: "\nOpen the questionList UI.\n"
      example: []
      syntax:
        content:
          CSharp: public void InitQuestionList(string question, List<QuestionnaireController.Answer> answers)
          VB: Public Sub InitQuestionList(question As String, answers As List(Of QuestionnaireController.Answer))
        parameters:
        - id: question
          type: System.String
          description: Text of the question.
        - id: answers
          type: System.Collections.Generic.List{UI.QuestionnaireController.Answer}
          description: List of all possbile answers.
      overload: UI.QuestionnaireController.InitQuestionList*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.QuestionInputValidate
      commentId: M:UI.QuestionnaireController.QuestionInputValidate
      language: CSharp
      name:
        CSharp: QuestionInputValidate()
        VB: QuestionInputValidate()
      nameWithType:
        CSharp: QuestionnaireController.QuestionInputValidate()
        VB: QuestionnaireController.QuestionInputValidate()
      qualifiedName:
        CSharp: UI.QuestionnaireController.QuestionInputValidate()
        VB: UI.QuestionnaireController.QuestionInputValidate()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: QuestionInputValidate
        path: ''
        startLine: 7238
      summary: "\nValidate if given input of the inputQuestion UI was correct.\n"
      example: []
      syntax:
        content:
          CSharp: public void QuestionInputValidate()
          VB: Public Sub QuestionInputValidate
      overload: UI.QuestionnaireController.QuestionInputValidate*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.NotifyStatemachine(System.String,UI.QuestionnaireController.QuestionUITypes)
      commentId: M:UI.QuestionnaireController.NotifyStatemachine(System.String,UI.QuestionnaireController.QuestionUITypes)
      language: CSharp
      name:
        CSharp: NotifyStatemachine(String, QuestionnaireController.QuestionUITypes)
        VB: NotifyStatemachine(String, QuestionnaireController.QuestionUITypes)
      nameWithType:
        CSharp: QuestionnaireController.NotifyStatemachine(String, QuestionnaireController.QuestionUITypes)
        VB: QuestionnaireController.NotifyStatemachine(String, QuestionnaireController.QuestionUITypes)
      qualifiedName:
        CSharp: UI.QuestionnaireController.NotifyStatemachine(System.String, UI.QuestionnaireController.QuestionUITypes)
        VB: UI.QuestionnaireController.NotifyStatemachine(System.String, UI.QuestionnaireController.QuestionUITypes)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: NotifyStatemachine
        path: ''
        startLine: 7303
      summary: "\nNotify the statemachine with the result of the question UI.\n"
      example: []
      syntax:
        content:
          CSharp: public void NotifyStatemachine(string value, QuestionnaireController.QuestionUITypes type = QuestionnaireController.QuestionUITypes.Question)
          VB: Public Sub NotifyStatemachine(value As String, type As QuestionnaireController.QuestionUITypes = QuestionnaireController.QuestionUITypes.Question)
        parameters:
        - id: value
          type: System.String
          description: Result in text form.
        - id: type
          type: UI.QuestionnaireController.QuestionUITypes
          description: Type of question.
      overload: UI.QuestionnaireController.NotifyStatemachine*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.ContinueButtonOnClick
      commentId: M:UI.QuestionnaireController.ContinueButtonOnClick
      language: CSharp
      name:
        CSharp: ContinueButtonOnClick()
        VB: ContinueButtonOnClick()
      nameWithType:
        CSharp: QuestionnaireController.ContinueButtonOnClick()
        VB: QuestionnaireController.ContinueButtonOnClick()
      qualifiedName:
        CSharp: UI.QuestionnaireController.ContinueButtonOnClick()
        VB: UI.QuestionnaireController.ContinueButtonOnClick()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: ContinueButtonOnClick
        path: ''
        startLine: 7420
      summary: "\nGet&apos;s called when the continue button is pressed.\nWhen the chosen answer was correct, the statemachine gets notified.\nWhen the chosen answer was wrong, the question gets displayed again.\n"
      example: []
      syntax:
        content:
          CSharp: public void ContinueButtonOnClick()
          VB: Public Sub ContinueButtonOnClick
      overload: UI.QuestionnaireController.ContinueButtonOnClick*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.QuestionnaireController.Answer
    commentId: T:UI.QuestionnaireController.Answer
    language: CSharp
    name:
      CSharp: QuestionnaireController.Answer
      VB: QuestionnaireController.Answer
    nameWithType:
      CSharp: QuestionnaireController.Answer
      VB: QuestionnaireController.Answer
    qualifiedName:
      CSharp: UI.QuestionnaireController.Answer
      VB: UI.QuestionnaireController.Answer
    type: Struct
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: Answer
      path: ''
      startLine: 7001
    summary: "\nHolder for information for one answer.\n"
    example: []
    syntax:
      content:
        CSharp: public struct Answer
        VB: Public Structure Answer
    modifiers:
      CSharp:
      - public
      - struct
      VB:
      - Public
      - Structure
    items:
    - id: UI.QuestionnaireController.Answer.answer
      commentId: F:UI.QuestionnaireController.Answer.answer
      language: CSharp
      name:
        CSharp: answer
        VB: answer
      nameWithType:
        CSharp: QuestionnaireController.Answer.answer
        VB: QuestionnaireController.Answer.answer
      qualifiedName:
        CSharp: UI.QuestionnaireController.Answer.answer
        VB: UI.QuestionnaireController.Answer.answer
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: answer
        path: ''
        startLine: 7007
      summary: "\nText of the answer.\n"
      example: []
      syntax:
        content:
          CSharp: public string answer
          VB: Public answer As String
        return:
          type: System.String
          description: Set by constructor.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.Answer.answerFeedback
      commentId: F:UI.QuestionnaireController.Answer.answerFeedback
      language: CSharp
      name:
        CSharp: answerFeedback
        VB: answerFeedback
      nameWithType:
        CSharp: QuestionnaireController.Answer.answerFeedback
        VB: QuestionnaireController.Answer.answerFeedback
      qualifiedName:
        CSharp: UI.QuestionnaireController.Answer.answerFeedback
        VB: UI.QuestionnaireController.Answer.answerFeedback
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: answerFeedback
        path: ''
        startLine: 7012
      summary: "\nText of the feedback.\n"
      example: []
      syntax:
        content:
          CSharp: public string answerFeedback
          VB: Public answerFeedback As String
        return:
          type: System.String
          description: Set by constructor.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.Answer.answerCorrect
      commentId: F:UI.QuestionnaireController.Answer.answerCorrect
      language: CSharp
      name:
        CSharp: answerCorrect
        VB: answerCorrect
      nameWithType:
        CSharp: QuestionnaireController.Answer.answerCorrect
        VB: QuestionnaireController.Answer.answerCorrect
      qualifiedName:
        CSharp: UI.QuestionnaireController.Answer.answerCorrect
        VB: UI.QuestionnaireController.Answer.answerCorrect
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: answerCorrect
        path: ''
        startLine: 7017
      summary: "\nIs this answer right or wrong.\n"
      example: []
      syntax:
        content:
          CSharp: public bool answerCorrect
          VB: Public answerCorrect As Boolean
        return:
          type: System.Boolean
          description: Set by constructor.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.QuestionnaireController.Answer.#ctor(System.String,System.String,System.Boolean)
      commentId: M:UI.QuestionnaireController.Answer.#ctor(System.String,System.String,System.Boolean)
      language: CSharp
      name:
        CSharp: Answer(String, String, Boolean)
        VB: Answer(String, String, Boolean)
      nameWithType:
        CSharp: QuestionnaireController.Answer.Answer(String, String, Boolean)
        VB: QuestionnaireController.Answer.Answer(String, String, Boolean)
      qualifiedName:
        CSharp: UI.QuestionnaireController.Answer.Answer(System.String, System.String, System.Boolean)
        VB: UI.QuestionnaireController.Answer.Answer(System.String, System.String, System.Boolean)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: .ctor
        path: ''
        startLine: 7024
      summary: "\nConstructor for Answers.\n"
      example: []
      syntax:
        content:
          CSharp: public Answer(string answer, string answerFeedback, bool answerCorrect)
          VB: Public Sub New(answer As String, answerFeedback As String, answerCorrect As Boolean)
        parameters:
        - id: answer
          type: System.String
          description: Text of the answer.
        - id: answerFeedback
          type: System.String
          description: Text for feedback when the answer was taken.
        - id: answerCorrect
          type: System.Boolean
          description: True if the answer is right.
      overload: UI.QuestionnaireController.Answer.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.QuestionnaireController.QuestionUITypes
    commentId: T:UI.QuestionnaireController.QuestionUITypes
    language: CSharp
    name:
      CSharp: QuestionnaireController.QuestionUITypes
      VB: QuestionnaireController.QuestionUITypes
    nameWithType:
      CSharp: QuestionnaireController.QuestionUITypes
      VB: QuestionnaireController.QuestionUITypes
    qualifiedName:
      CSharp: UI.QuestionnaireController.QuestionUITypes
      VB: UI.QuestionnaireController.QuestionUITypes
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: QuestionUITypes
      path: ''
      startLine: 7035
    summary: "\nThe type of the UI custom action/question.\n"
    example: []
    syntax:
      content:
        CSharp: public enum QuestionUITypes
        VB: Public Enum QuestionUITypes
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: UI.QuestionnaireController.QuestionUITypes.Question
      commentId: F:UI.QuestionnaireController.QuestionUITypes.Question
      language: CSharp
      name:
        CSharp: Question
        VB: Question
      nameWithType:
        CSharp: QuestionnaireController.QuestionUITypes.Question
        VB: QuestionnaireController.QuestionUITypes.Question
      qualifiedName:
        CSharp: UI.QuestionnaireController.QuestionUITypes.Question
        VB: UI.QuestionnaireController.QuestionUITypes.Question
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: Question
        path: ''
        startLine: 7037
      syntax:
        content:
          CSharp: Question = 0
          VB: Question = 0
        return:
          type: UI.QuestionnaireController.QuestionUITypes
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: UI.QuestionnaireController.QuestionUITypes.QuestionList
      commentId: F:UI.QuestionnaireController.QuestionUITypes.QuestionList
      language: CSharp
      name:
        CSharp: QuestionList
        VB: QuestionList
      nameWithType:
        CSharp: QuestionnaireController.QuestionUITypes.QuestionList
        VB: QuestionnaireController.QuestionUITypes.QuestionList
      qualifiedName:
        CSharp: UI.QuestionnaireController.QuestionUITypes.QuestionList
        VB: UI.QuestionnaireController.QuestionUITypes.QuestionList
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: QuestionList
        path: ''
        startLine: 7038
      syntax:
        content:
          CSharp: QuestionList = 1
          VB: QuestionList = 1
        return:
          type: UI.QuestionnaireController.QuestionUITypes
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: UI.QuestionnaireController.QuestionUITypes.InputQuestion
      commentId: F:UI.QuestionnaireController.QuestionUITypes.InputQuestion
      language: CSharp
      name:
        CSharp: InputQuestion
        VB: InputQuestion
      nameWithType:
        CSharp: QuestionnaireController.QuestionUITypes.InputQuestion
        VB: QuestionnaireController.QuestionUITypes.InputQuestion
      qualifiedName:
        CSharp: UI.QuestionnaireController.QuestionUITypes.InputQuestion
        VB: UI.QuestionnaireController.QuestionUITypes.InputQuestion
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: InputQuestion
        path: ''
        startLine: 7039
      syntax:
        content:
          CSharp: InputQuestion = 2
          VB: InputQuestion = 2
        return:
          type: UI.QuestionnaireController.QuestionUITypes
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: UI.SaveArea
    commentId: T:UI.SaveArea
    language: CSharp
    name:
      CSharp: SaveArea
      VB: SaveArea
    nameWithType:
      CSharp: SaveArea
      VB: SaveArea
    qualifiedName:
      CSharp: UI.SaveArea
      VB: UI.SaveArea
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: SaveArea
      path: ''
      startLine: 7569
    summary: "\nThe SafeArea scripts moves UI components when they would otherwise be occluded by e.g. cutout cameras or speakers\non some newer smartphone devices. \n"
    example: []
    syntax:
      content:
        CSharp: 'public class SaveArea : MonoBehaviour'
        VB: >-
          Public Class SaveArea

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items: []
  - id: UI.StreamVideo
    commentId: T:UI.StreamVideo
    language: CSharp
    name:
      CSharp: StreamVideo
      VB: StreamVideo
    nameWithType:
      CSharp: StreamVideo
      VB: StreamVideo
    qualifiedName:
      CSharp: UI.StreamVideo
      VB: UI.StreamVideo
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: StreamVideo
      path: ''
      startLine: 7641
    summary: "\nStreamVideo is a wrapper for the Videoplayer class and handles playing of the onboarding animations.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class StreamVideo : MonoBehaviour'
        VB: >-
          Public Class StreamVideo

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.StreamVideo.StartVideo
      commentId: M:UI.StreamVideo.StartVideo
      language: CSharp
      name:
        CSharp: StartVideo()
        VB: StartVideo()
      nameWithType:
        CSharp: StreamVideo.StartVideo()
        VB: StreamVideo.StartVideo()
      qualifiedName:
        CSharp: UI.StreamVideo.StartVideo()
        VB: UI.StreamVideo.StartVideo()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: StartVideo
        path: ''
        startLine: 7671
      summary: "\nStarts playing the specified video.\n"
      example: []
      syntax:
        content:
          CSharp: public void StartVideo()
          VB: Public Sub StartVideo
      overload: UI.StreamVideo.StartVideo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: UI.TopPanelController
    commentId: T:UI.TopPanelController
    language: CSharp
    name:
      CSharp: TopPanelController
      VB: TopPanelController
    nameWithType:
      CSharp: TopPanelController
      VB: TopPanelController
    qualifiedName:
      CSharp: UI.TopPanelController
      VB: UI.TopPanelController
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: UI
    source:
      id: TopPanelController
      path: ''
      startLine: 7709
    summary: "\nThe TopPanelController handpes updates to the UI panel of the trainign scenario, showing the instructions and progress percentage of the training.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class TopPanelController : MonoBehaviour'
        VB: >-
          Public Class TopPanelController

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: UI.TopPanelController.errorColor
      commentId: F:UI.TopPanelController.errorColor
      language: CSharp
      name:
        CSharp: errorColor
        VB: errorColor
      nameWithType:
        CSharp: TopPanelController.errorColor
        VB: TopPanelController.errorColor
      qualifiedName:
        CSharp: UI.TopPanelController.errorColor
        VB: UI.TopPanelController.errorColor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: errorColor
        path: ''
        startLine: 7727
      syntax:
        content:
          CSharp: public Color errorColor
          VB: Public errorColor As Color
        return:
          type: Global.Color
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: UI.TopPanelController.successColor
      commentId: F:UI.TopPanelController.successColor
      language: CSharp
      name:
        CSharp: successColor
        VB: successColor
      nameWithType:
        CSharp: TopPanelController.successColor
        VB: TopPanelController.successColor
      qualifiedName:
        CSharp: UI.TopPanelController.successColor
        VB: UI.TopPanelController.successColor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: UI
      source:
        id: successColor
        path: ''
        startLine: 7731
      summary: "\nThe color of the UI animation played on correct actions.\n"
      example: []
      syntax:
        content:
          CSharp: public Color successColor
          VB: Public successColor As Color
        return:
          type: Global.Color
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: Visual_Scripting
  commentId: N:Visual_Scripting
  language: CSharp
  name:
    CSharp: Visual_Scripting
    VB: Visual_Scripting
  nameWithType:
    CSharp: Visual_Scripting
    VB: Visual_Scripting
  qualifiedName:
    CSharp: Visual_Scripting
    VB: Visual_Scripting
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: Visual_Scripting.Action
    commentId: T:Visual_Scripting.Action
    language: CSharp
    name:
      CSharp: Action
      VB: Action
    nameWithType:
      CSharp: Action
      VB: Action
    qualifiedName:
      CSharp: Visual_Scripting.Action
      VB: Visual_Scripting.Action
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Visual_Scripting
    source:
      id: Action
      path: ''
      startLine: 7902
    summary: "\nImplements the &quot;Interacting&quot;, &quot;Combining&quot; and &quot;Custom&quot; Action functionality of the TrainAR Framework,\ntherefore it checks if the  user triggered the &quot;Interact&quot;, &quot;Combine&quot; Buttons or triggered a CustomAction through\nscripts and allows to check this against the stored state in the visual statemachine.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Action : Unit'
        VB: >-
          Public Class Action

              Inherits Unit
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Visual_Scripting.Action.actionChoice
      commentId: F:Visual_Scripting.Action.actionChoice
      language: CSharp
      name:
        CSharp: actionChoice
        VB: actionChoice
      nameWithType:
        CSharp: Action.actionChoice
        VB: Action.actionChoice
      qualifiedName:
        CSharp: Visual_Scripting.Action.actionChoice
        VB: Visual_Scripting.Action.actionChoice
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: actionChoice
        path: ''
        startLine: 7923
      summary: "\nWhat type of actions are accepted by this node.\n"
      example: []
      syntax:
        content:
          CSharp: public Action.TrainARActionChoices actionChoice
          VB: Public actionChoice As Action.TrainARActionChoices
        return:
          type: Visual_Scripting.Action.TrainARActionChoices
          description: Set in node in the editor. Default is Interaction.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Visual_Scripting.Action.InputFlow
      commentId: P:Visual_Scripting.Action.InputFlow
      language: CSharp
      name:
        CSharp: InputFlow
        VB: InputFlow
      nameWithType:
        CSharp: Action.InputFlow
        VB: Action.InputFlow
      qualifiedName:
        CSharp: Visual_Scripting.Action.InputFlow
        VB: Visual_Scripting.Action.InputFlow
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: InputFlow
        path: ''
        startLine: 7928
      summary: "\nThe Input port of the Unit that triggers the internal logic.\n"
      example: []
      syntax:
        content:
          CSharp: public ControlInput InputFlow { get; }
          VB: Public ReadOnly Property InputFlow As ControlInput
        parameters: []
        return:
          type: Global.ControlInput
          description: Set in node in the editor.
      overload: Visual_Scripting.Action.InputFlow*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Action.CorrectAction
      commentId: P:Visual_Scripting.Action.CorrectAction
      language: CSharp
      name:
        CSharp: CorrectAction
        VB: CorrectAction
      nameWithType:
        CSharp: Action.CorrectAction
        VB: Action.CorrectAction
      qualifiedName:
        CSharp: Visual_Scripting.Action.CorrectAction
        VB: Visual_Scripting.Action.CorrectAction
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: CorrectAction
        path: ''
        startLine: 7935
      summary: "\nThe Output port of the Unity that is triggered when the users interaction was CORRECT.\n"
      example: []
      syntax:
        content:
          CSharp: public ControlOutput CorrectAction { get; }
          VB: Public ReadOnly Property CorrectAction As ControlOutput
        parameters: []
        return:
          type: Global.ControlOutput
          description: Set in node in the editor.
      overload: Visual_Scripting.Action.CorrectAction*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Action.IncorrectAction
      commentId: P:Visual_Scripting.Action.IncorrectAction
      language: CSharp
      name:
        CSharp: IncorrectAction
        VB: IncorrectAction
      nameWithType:
        CSharp: Action.IncorrectAction
        VB: Action.IncorrectAction
      qualifiedName:
        CSharp: Visual_Scripting.Action.IncorrectAction
        VB: Visual_Scripting.Action.IncorrectAction
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: IncorrectAction
        path: ''
        startLine: 7942
      summary: "\nThe Output port of the Unity that is triggered when the users interaction was INCORRECT.\n"
      example: []
      syntax:
        content:
          CSharp: public ControlOutput IncorrectAction { get; }
          VB: Public ReadOnly Property IncorrectAction As ControlOutput
        parameters: []
        return:
          type: Global.ControlOutput
          description: Set in node in the editor.
      overload: Visual_Scripting.Action.IncorrectAction*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Action.ARCombinableName1
      commentId: P:Visual_Scripting.Action.ARCombinableName1
      language: CSharp
      name:
        CSharp: ARCombinableName1
        VB: ARCombinableName1
      nameWithType:
        CSharp: Action.ARCombinableName1
        VB: Action.ARCombinableName1
      qualifiedName:
        CSharp: Visual_Scripting.Action.ARCombinableName1
        VB: Visual_Scripting.Action.ARCombinableName1
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ARCombinableName1
        path: ''
        startLine: 7949
      summary: "\nThe Name of the first correct interactable for this step.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput ARCombinableName1 { get; }
          VB: Public ReadOnly Property ARCombinableName1 As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.Action.ARCombinableName1*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Action.ARCombinableName2
      commentId: P:Visual_Scripting.Action.ARCombinableName2
      language: CSharp
      name:
        CSharp: ARCombinableName2
        VB: ARCombinableName2
      nameWithType:
        CSharp: Action.ARCombinableName2
        VB: Action.ARCombinableName2
      qualifiedName:
        CSharp: Visual_Scripting.Action.ARCombinableName2
        VB: Visual_Scripting.Action.ARCombinableName2
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ARCombinableName2
        path: ''
        startLine: 7956
      summary: "\nThe Name of the second correct interactable for this step.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput ARCombinableName2 { get; }
          VB: Public ReadOnly Property ARCombinableName2 As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.Action.ARCombinableName2*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Action.graphReference
      commentId: P:Visual_Scripting.Action.graphReference
      language: CSharp
      name:
        CSharp: graphReference
        VB: graphReference
      nameWithType:
        CSharp: Action.graphReference
        VB: Action.graphReference
      qualifiedName:
        CSharp: Visual_Scripting.Action.graphReference
        VB: Visual_Scripting.Action.graphReference
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: graphReference
        path: ''
        startLine: 7963
      summary: "\nThe Graphreference stores the current position in the flow graph to revisit it on Event/Action triggers.\n"
      example: []
      syntax:
        content:
          CSharp: public GraphReference graphReference { get; }
          VB: Public ReadOnly Property graphReference As GraphReference
        parameters: []
        return:
          type: Global.GraphReference
          description: Set in node in the editor.
      overload: Visual_Scripting.Action.graphReference*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Action.ARInteractableName
      commentId: P:Visual_Scripting.Action.ARInteractableName
      language: CSharp
      name:
        CSharp: ARInteractableName
        VB: ARInteractableName
      nameWithType:
        CSharp: Action.ARInteractableName
        VB: Action.ARInteractableName
      qualifiedName:
        CSharp: Visual_Scripting.Action.ARInteractableName
        VB: Visual_Scripting.Action.ARInteractableName
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ARInteractableName
        path: ''
        startLine: 7981
      summary: "\nThe Name of the correct interactable for this step.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput ARInteractableName { get; }
          VB: Public ReadOnly Property ARInteractableName As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.Action.ARInteractableName*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Action.CorrectParameterText
      commentId: P:Visual_Scripting.Action.CorrectParameterText
      language: CSharp
      name:
        CSharp: CorrectParameterText
        VB: CorrectParameterText
      nameWithType:
        CSharp: Action.CorrectParameterText
        VB: Action.CorrectParameterText
      qualifiedName:
        CSharp: Visual_Scripting.Action.CorrectParameterText
        VB: Visual_Scripting.Action.CorrectParameterText
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: CorrectParameterText
        path: ''
        startLine: 7994
      summary: "\nThe correct parameter for the custom event.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput CorrectParameterText { get; }
          VB: Public ReadOnly Property CorrectParameterText As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.Action.CorrectParameterText*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Action.Definition
      commentId: M:Visual_Scripting.Action.Definition
      language: CSharp
      name:
        CSharp: Definition()
        VB: Definition()
      nameWithType:
        CSharp: Action.Definition()
        VB: Action.Definition()
      qualifiedName:
        CSharp: Visual_Scripting.Action.Definition()
        VB: Visual_Scripting.Action.Definition()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: Definition
        path: ''
        startLine: 8006
      summary: "\nDefines the Nodes input, output and value ports.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void Definition()
          VB: Protected Overrides Sub Definition
      overload: Visual_Scripting.Action.Definition*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: Visual_Scripting.Action.TrainARActionChoices
    commentId: T:Visual_Scripting.Action.TrainARActionChoices
    language: CSharp
    name:
      CSharp: Action.TrainARActionChoices
      VB: Action.TrainARActionChoices
    nameWithType:
      CSharp: Action.TrainARActionChoices
      VB: Action.TrainARActionChoices
    qualifiedName:
      CSharp: Visual_Scripting.Action.TrainARActionChoices
      VB: Visual_Scripting.Action.TrainARActionChoices
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Visual_Scripting
    source:
      id: TrainARActionChoices
      path: ''
      startLine: 7912
    summary: "\nThe type of interaction to check against.\n"
    example: []
    syntax:
      content:
        CSharp: public enum TrainARActionChoices
        VB: Public Enum TrainARActionChoices
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Visual_Scripting.Action.TrainARActionChoices.Interaction
      commentId: F:Visual_Scripting.Action.TrainARActionChoices.Interaction
      language: CSharp
      name:
        CSharp: Interaction
        VB: Interaction
      nameWithType:
        CSharp: Action.TrainARActionChoices.Interaction
        VB: Action.TrainARActionChoices.Interaction
      qualifiedName:
        CSharp: Visual_Scripting.Action.TrainARActionChoices.Interaction
        VB: Visual_Scripting.Action.TrainARActionChoices.Interaction
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: Interaction
        path: ''
        startLine: 7914
      syntax:
        content:
          CSharp: Interaction = 0
          VB: Interaction = 0
        return:
          type: Visual_Scripting.Action.TrainARActionChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Visual_Scripting.Action.TrainARActionChoices.Combination
      commentId: F:Visual_Scripting.Action.TrainARActionChoices.Combination
      language: CSharp
      name:
        CSharp: Combination
        VB: Combination
      nameWithType:
        CSharp: Action.TrainARActionChoices.Combination
        VB: Action.TrainARActionChoices.Combination
      qualifiedName:
        CSharp: Visual_Scripting.Action.TrainARActionChoices.Combination
        VB: Visual_Scripting.Action.TrainARActionChoices.Combination
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: Combination
        path: ''
        startLine: 7915
      syntax:
        content:
          CSharp: Combination = 1
          VB: Combination = 1
        return:
          type: Visual_Scripting.Action.TrainARActionChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Visual_Scripting.Action.TrainARActionChoices.CustomAction
      commentId: F:Visual_Scripting.Action.TrainARActionChoices.CustomAction
      language: CSharp
      name:
        CSharp: CustomAction
        VB: CustomAction
      nameWithType:
        CSharp: Action.TrainARActionChoices.CustomAction
        VB: Action.TrainARActionChoices.CustomAction
      qualifiedName:
        CSharp: Visual_Scripting.Action.TrainARActionChoices.CustomAction
        VB: Visual_Scripting.Action.TrainARActionChoices.CustomAction
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: CustomAction
        path: ''
        startLine: 7916
      syntax:
        content:
          CSharp: CustomAction = 2
          VB: CustomAction = 2
        return:
          type: Visual_Scripting.Action.TrainARActionChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Visual_Scripting.ActionFork
    commentId: T:Visual_Scripting.ActionFork
    language: CSharp
    name:
      CSharp: ActionFork
      VB: ActionFork
    nameWithType:
      CSharp: ActionFork
      VB: ActionFork
    qualifiedName:
      CSharp: Visual_Scripting.ActionFork
      VB: Visual_Scripting.ActionFork
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Visual_Scripting
    source:
      id: ActionFork
      path: ''
      startLine: 8163
    summary: "\nImplements the &quot;Interacting&quot;, &quot;Combining&quot; and &quot;Custom&quot; Action functionality of the TrainAR Framework,\ntherefore it checks if the  user triggered the &quot;Interact&quot;, &quot;Combine&quot; Buttons or triggered a CustomAction through\nscripts and allows to check this against the stored state in the visual statemachine.\n\nThis is the fork version of the action node. Therefore there are multiple correct answers and the stateflow enters a fork\ndepending on which one is selected.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ActionFork : Unit'
        VB: >-
          Public Class ActionFork

              Inherits Unit
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Visual_Scripting.ActionFork.actionChoice
      commentId: F:Visual_Scripting.ActionFork.actionChoice
      language: CSharp
      name:
        CSharp: actionChoice
        VB: actionChoice
      nameWithType:
        CSharp: ActionFork.actionChoice
        VB: ActionFork.actionChoice
      qualifiedName:
        CSharp: Visual_Scripting.ActionFork.actionChoice
        VB: Visual_Scripting.ActionFork.actionChoice
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: actionChoice
        path: ''
        startLine: 8182
      summary: "\nWhat type of actions are accepted by this node.\n"
      example: []
      syntax:
        content:
          CSharp: public ActionFork.TrainARActionChoices actionChoice
          VB: Public actionChoice As ActionFork.TrainARActionChoices
        return:
          type: Visual_Scripting.ActionFork.TrainARActionChoices
          description: Set in node in the editor. Default is Interaction.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Visual_Scripting.ActionFork.actionCount
      commentId: F:Visual_Scripting.ActionFork.actionCount
      language: CSharp
      name:
        CSharp: actionCount
        VB: actionCount
      nameWithType:
        CSharp: ActionFork.actionCount
        VB: ActionFork.actionCount
      qualifiedName:
        CSharp: Visual_Scripting.ActionFork.actionCount
        VB: Visual_Scripting.ActionFork.actionCount
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: actionCount
        path: ''
        startLine: 8188
      summary: "\nHow many actions are in this node.\n"
      example: []
      syntax:
        content:
          CSharp: public int actionCount
          VB: Public actionCount As Integer
        return:
          type: System.Int32
          description: Set in node in the editor.Default is 1.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Visual_Scripting.ActionFork.InputFlow
      commentId: P:Visual_Scripting.ActionFork.InputFlow
      language: CSharp
      name:
        CSharp: InputFlow
        VB: InputFlow
      nameWithType:
        CSharp: ActionFork.InputFlow
        VB: ActionFork.InputFlow
      qualifiedName:
        CSharp: Visual_Scripting.ActionFork.InputFlow
        VB: Visual_Scripting.ActionFork.InputFlow
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: InputFlow
        path: ''
        startLine: 8194
      summary: "\nThe Input port of the Unit that triggers the internal logic.\n"
      example: []
      syntax:
        content:
          CSharp: public ControlInput InputFlow { get; }
          VB: Public ReadOnly Property InputFlow As ControlInput
        parameters: []
        return:
          type: Global.ControlInput
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionFork.InputFlow*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionFork.CorrectActions
      commentId: P:Visual_Scripting.ActionFork.CorrectActions
      language: CSharp
      name:
        CSharp: CorrectActions
        VB: CorrectActions
      nameWithType:
        CSharp: ActionFork.CorrectActions
        VB: ActionFork.CorrectActions
      qualifiedName:
        CSharp: Visual_Scripting.ActionFork.CorrectActions
        VB: Visual_Scripting.ActionFork.CorrectActions
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: CorrectActions
        path: ''
        startLine: 8201
      summary: "\nThe Output port of the Unity that is triggered when the users interaction was CORRECT.\n"
      example: []
      syntax:
        content:
          CSharp: public List<ControlOutput> CorrectActions { get; }
          VB: Public ReadOnly Property CorrectActions As List(Of ControlOutput)
        parameters: []
        return:
          type: System.Collections.Generic.List{ControlOutput}
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionFork.CorrectActions*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionFork.IncorrectAction
      commentId: P:Visual_Scripting.ActionFork.IncorrectAction
      language: CSharp
      name:
        CSharp: IncorrectAction
        VB: IncorrectAction
      nameWithType:
        CSharp: ActionFork.IncorrectAction
        VB: ActionFork.IncorrectAction
      qualifiedName:
        CSharp: Visual_Scripting.ActionFork.IncorrectAction
        VB: Visual_Scripting.ActionFork.IncorrectAction
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: IncorrectAction
        path: ''
        startLine: 8208
      summary: "\nThe Output port of the Unity that is triggered when the users interaction was INCORRECT.\n"
      example: []
      syntax:
        content:
          CSharp: public ControlOutput IncorrectAction { get; }
          VB: Public ReadOnly Property IncorrectAction As ControlOutput
        parameters: []
        return:
          type: Global.ControlOutput
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionFork.IncorrectAction*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionFork.ARCombinableName1s
      commentId: P:Visual_Scripting.ActionFork.ARCombinableName1s
      language: CSharp
      name:
        CSharp: ARCombinableName1s
        VB: ARCombinableName1s
      nameWithType:
        CSharp: ActionFork.ARCombinableName1s
        VB: ActionFork.ARCombinableName1s
      qualifiedName:
        CSharp: Visual_Scripting.ActionFork.ARCombinableName1s
        VB: Visual_Scripting.ActionFork.ARCombinableName1s
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ARCombinableName1s
        path: ''
        startLine: 8215
      summary: "\nThe Name of the first correct interactable for this step.\n"
      example: []
      syntax:
        content:
          CSharp: public List<ValueInput> ARCombinableName1s { get; }
          VB: Public ReadOnly Property ARCombinableName1s As List(Of ValueInput)
        parameters: []
        return:
          type: System.Collections.Generic.List{ValueInput}
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionFork.ARCombinableName1s*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionFork.ARCombinableName2s
      commentId: P:Visual_Scripting.ActionFork.ARCombinableName2s
      language: CSharp
      name:
        CSharp: ARCombinableName2s
        VB: ARCombinableName2s
      nameWithType:
        CSharp: ActionFork.ARCombinableName2s
        VB: ActionFork.ARCombinableName2s
      qualifiedName:
        CSharp: Visual_Scripting.ActionFork.ARCombinableName2s
        VB: Visual_Scripting.ActionFork.ARCombinableName2s
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ARCombinableName2s
        path: ''
        startLine: 8222
      summary: "\nThe Name of the second correct interactable for this step.\n"
      example: []
      syntax:
        content:
          CSharp: public List<ValueInput> ARCombinableName2s { get; }
          VB: Public ReadOnly Property ARCombinableName2s As List(Of ValueInput)
        parameters: []
        return:
          type: System.Collections.Generic.List{ValueInput}
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionFork.ARCombinableName2s*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionFork.graphReference
      commentId: P:Visual_Scripting.ActionFork.graphReference
      language: CSharp
      name:
        CSharp: graphReference
        VB: graphReference
      nameWithType:
        CSharp: ActionFork.graphReference
        VB: ActionFork.graphReference
      qualifiedName:
        CSharp: Visual_Scripting.ActionFork.graphReference
        VB: Visual_Scripting.ActionFork.graphReference
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: graphReference
        path: ''
        startLine: 8229
      summary: "\nThe Graphreference stores the current position in the flow graph to revisit it on Event/Action triggers.\n"
      example: []
      syntax:
        content:
          CSharp: public GraphReference graphReference { get; }
          VB: Public ReadOnly Property graphReference As GraphReference
        parameters: []
        return:
          type: Global.GraphReference
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionFork.graphReference*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionFork.ARInteractableNames
      commentId: P:Visual_Scripting.ActionFork.ARInteractableNames
      language: CSharp
      name:
        CSharp: ARInteractableNames
        VB: ARInteractableNames
      nameWithType:
        CSharp: ActionFork.ARInteractableNames
        VB: ActionFork.ARInteractableNames
      qualifiedName:
        CSharp: Visual_Scripting.ActionFork.ARInteractableNames
        VB: Visual_Scripting.ActionFork.ARInteractableNames
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ARInteractableNames
        path: ''
        startLine: 8247
      summary: "\nThe Name of the correct interactable for this step.\n"
      example: []
      syntax:
        content:
          CSharp: public List<ValueInput> ARInteractableNames { get; }
          VB: Public ReadOnly Property ARInteractableNames As List(Of ValueInput)
        parameters: []
        return:
          type: System.Collections.Generic.List{ValueInput}
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionFork.ARInteractableNames*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionFork.CorrectParameterTexts
      commentId: P:Visual_Scripting.ActionFork.CorrectParameterTexts
      language: CSharp
      name:
        CSharp: CorrectParameterTexts
        VB: CorrectParameterTexts
      nameWithType:
        CSharp: ActionFork.CorrectParameterTexts
        VB: ActionFork.CorrectParameterTexts
      qualifiedName:
        CSharp: Visual_Scripting.ActionFork.CorrectParameterTexts
        VB: Visual_Scripting.ActionFork.CorrectParameterTexts
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: CorrectParameterTexts
        path: ''
        startLine: 8260
      summary: "\nThe correct parameter for the custom event.\n"
      example: []
      syntax:
        content:
          CSharp: public List<ValueInput> CorrectParameterTexts { get; }
          VB: Public ReadOnly Property CorrectParameterTexts As List(Of ValueInput)
        parameters: []
        return:
          type: System.Collections.Generic.List{ValueInput}
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionFork.CorrectParameterTexts*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionFork.Definition
      commentId: M:Visual_Scripting.ActionFork.Definition
      language: CSharp
      name:
        CSharp: Definition()
        VB: Definition()
      nameWithType:
        CSharp: ActionFork.Definition()
        VB: ActionFork.Definition()
      qualifiedName:
        CSharp: Visual_Scripting.ActionFork.Definition()
        VB: Visual_Scripting.ActionFork.Definition()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: Definition
        path: ''
        startLine: 8272
      summary: "\nDefines the Nodes input, output and value ports.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void Definition()
          VB: Protected Overrides Sub Definition
      overload: Visual_Scripting.ActionFork.Definition*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: Visual_Scripting.ActionFork.TrainARActionChoices
    commentId: T:Visual_Scripting.ActionFork.TrainARActionChoices
    language: CSharp
    name:
      CSharp: ActionFork.TrainARActionChoices
      VB: ActionFork.TrainARActionChoices
    nameWithType:
      CSharp: ActionFork.TrainARActionChoices
      VB: ActionFork.TrainARActionChoices
    qualifiedName:
      CSharp: Visual_Scripting.ActionFork.TrainARActionChoices
      VB: Visual_Scripting.ActionFork.TrainARActionChoices
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Visual_Scripting
    source:
      id: TrainARActionChoices
      path: ''
      startLine: 8172
    summary: "\nThe type of interaction to check against.\n"
    example: []
    syntax:
      content:
        CSharp: public enum TrainARActionChoices
        VB: Public Enum TrainARActionChoices
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Visual_Scripting.ActionFork.TrainARActionChoices.Interaction
      commentId: F:Visual_Scripting.ActionFork.TrainARActionChoices.Interaction
      language: CSharp
      name:
        CSharp: Interaction
        VB: Interaction
      nameWithType:
        CSharp: ActionFork.TrainARActionChoices.Interaction
        VB: ActionFork.TrainARActionChoices.Interaction
      qualifiedName:
        CSharp: Visual_Scripting.ActionFork.TrainARActionChoices.Interaction
        VB: Visual_Scripting.ActionFork.TrainARActionChoices.Interaction
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: Interaction
        path: ''
        startLine: 8174
      syntax:
        content:
          CSharp: Interaction = 0
          VB: Interaction = 0
        return:
          type: Visual_Scripting.ActionFork.TrainARActionChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Visual_Scripting.ActionFork.TrainARActionChoices.Combination
      commentId: F:Visual_Scripting.ActionFork.TrainARActionChoices.Combination
      language: CSharp
      name:
        CSharp: Combination
        VB: Combination
      nameWithType:
        CSharp: ActionFork.TrainARActionChoices.Combination
        VB: ActionFork.TrainARActionChoices.Combination
      qualifiedName:
        CSharp: Visual_Scripting.ActionFork.TrainARActionChoices.Combination
        VB: Visual_Scripting.ActionFork.TrainARActionChoices.Combination
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: Combination
        path: ''
        startLine: 8175
      syntax:
        content:
          CSharp: Combination = 1
          VB: Combination = 1
        return:
          type: Visual_Scripting.ActionFork.TrainARActionChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Visual_Scripting.ActionFork.TrainARActionChoices.CustomAction
      commentId: F:Visual_Scripting.ActionFork.TrainARActionChoices.CustomAction
      language: CSharp
      name:
        CSharp: CustomAction
        VB: CustomAction
      nameWithType:
        CSharp: ActionFork.TrainARActionChoices.CustomAction
        VB: ActionFork.TrainARActionChoices.CustomAction
      qualifiedName:
        CSharp: Visual_Scripting.ActionFork.TrainARActionChoices.CustomAction
        VB: Visual_Scripting.ActionFork.TrainARActionChoices.CustomAction
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: CustomAction
        path: ''
        startLine: 8176
      syntax:
        content:
          CSharp: CustomAction = 2
          VB: CustomAction = 2
        return:
          type: Visual_Scripting.ActionFork.TrainARActionChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Visual_Scripting.ActionMulti
    commentId: T:Visual_Scripting.ActionMulti
    language: CSharp
    name:
      CSharp: ActionMulti
      VB: ActionMulti
    nameWithType:
      CSharp: ActionMulti
      VB: ActionMulti
    qualifiedName:
      CSharp: Visual_Scripting.ActionMulti
      VB: Visual_Scripting.ActionMulti
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Visual_Scripting
    source:
      id: ActionMulti
      path: ''
      startLine: 8488
    summary: "\nImplements the &quot;Interacting&quot;, &quot;Combining&quot; and &quot;Custom&quot; Action functionality of the TrainAR Framework,\ntherefore it checks if the  user triggered the &quot;Interact&quot;, &quot;Combine&quot; Buttons or triggered a CustomAction through\nscripts and allows to check this against the stored state in the visual statemachine.\n\nThis is the multi version of the action node. Therefore all specified actions in this node have to be completed before advancing.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ActionMulti : Unit'
        VB: >-
          Public Class ActionMulti

              Inherits Unit
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Visual_Scripting.ActionMulti.actionChoice
      commentId: F:Visual_Scripting.ActionMulti.actionChoice
      language: CSharp
      name:
        CSharp: actionChoice
        VB: actionChoice
      nameWithType:
        CSharp: ActionMulti.actionChoice
        VB: ActionMulti.actionChoice
      qualifiedName:
        CSharp: Visual_Scripting.ActionMulti.actionChoice
        VB: Visual_Scripting.ActionMulti.actionChoice
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: actionChoice
        path: ''
        startLine: 8510
      summary: "\nWhat type of actions are accepted by this node.\n"
      example: []
      syntax:
        content:
          CSharp: public ActionMulti.TrainARActionChoices actionChoice
          VB: Public actionChoice As ActionMulti.TrainARActionChoices
        return:
          type: Visual_Scripting.ActionMulti.TrainARActionChoices
          description: Set in node in the editor. Default is Interaction.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Visual_Scripting.ActionMulti.actionCount
      commentId: F:Visual_Scripting.ActionMulti.actionCount
      language: CSharp
      name:
        CSharp: actionCount
        VB: actionCount
      nameWithType:
        CSharp: ActionMulti.actionCount
        VB: ActionMulti.actionCount
      qualifiedName:
        CSharp: Visual_Scripting.ActionMulti.actionCount
        VB: Visual_Scripting.ActionMulti.actionCount
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: actionCount
        path: ''
        startLine: 8517
      summary: "\nHow many actions are in this node.\n"
      example: []
      syntax:
        content:
          CSharp: public int actionCount
          VB: Public actionCount As Integer
        return:
          type: System.Int32
          description: Set in node in the editor.Default is 1.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Visual_Scripting.ActionMulti.InputFlow
      commentId: P:Visual_Scripting.ActionMulti.InputFlow
      language: CSharp
      name:
        CSharp: InputFlow
        VB: InputFlow
      nameWithType:
        CSharp: ActionMulti.InputFlow
        VB: ActionMulti.InputFlow
      qualifiedName:
        CSharp: Visual_Scripting.ActionMulti.InputFlow
        VB: Visual_Scripting.ActionMulti.InputFlow
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: InputFlow
        path: ''
        startLine: 8529
      summary: "\nThe Input port of the Unit that triggers the internal logic.\n"
      example: []
      syntax:
        content:
          CSharp: public ControlInput InputFlow { get; }
          VB: Public ReadOnly Property InputFlow As ControlInput
        parameters: []
        return:
          type: Global.ControlInput
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionMulti.InputFlow*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionMulti.AllActionsCorrect
      commentId: P:Visual_Scripting.ActionMulti.AllActionsCorrect
      language: CSharp
      name:
        CSharp: AllActionsCorrect
        VB: AllActionsCorrect
      nameWithType:
        CSharp: ActionMulti.AllActionsCorrect
        VB: ActionMulti.AllActionsCorrect
      qualifiedName:
        CSharp: Visual_Scripting.ActionMulti.AllActionsCorrect
        VB: Visual_Scripting.ActionMulti.AllActionsCorrect
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: AllActionsCorrect
        path: ''
        startLine: 8536
      summary: "\nThe Output port of the Unity that is triggered when the users interaction was CORRECT.\n"
      example: []
      syntax:
        content:
          CSharp: public ControlOutput AllActionsCorrect { get; }
          VB: Public ReadOnly Property AllActionsCorrect As ControlOutput
        parameters: []
        return:
          type: Global.ControlOutput
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionMulti.AllActionsCorrect*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionMulti.IncorrectAction
      commentId: P:Visual_Scripting.ActionMulti.IncorrectAction
      language: CSharp
      name:
        CSharp: IncorrectAction
        VB: IncorrectAction
      nameWithType:
        CSharp: ActionMulti.IncorrectAction
        VB: ActionMulti.IncorrectAction
      qualifiedName:
        CSharp: Visual_Scripting.ActionMulti.IncorrectAction
        VB: Visual_Scripting.ActionMulti.IncorrectAction
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: IncorrectAction
        path: ''
        startLine: 8543
      summary: "\nThe Output port of the Unity that is triggered when the users interaction was INCORRECT.\n"
      example: []
      syntax:
        content:
          CSharp: public ControlOutput IncorrectAction { get; }
          VB: Public ReadOnly Property IncorrectAction As ControlOutput
        parameters: []
        return:
          type: Global.ControlOutput
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionMulti.IncorrectAction*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionMulti.ARCombinableName1s
      commentId: P:Visual_Scripting.ActionMulti.ARCombinableName1s
      language: CSharp
      name:
        CSharp: ARCombinableName1s
        VB: ARCombinableName1s
      nameWithType:
        CSharp: ActionMulti.ARCombinableName1s
        VB: ActionMulti.ARCombinableName1s
      qualifiedName:
        CSharp: Visual_Scripting.ActionMulti.ARCombinableName1s
        VB: Visual_Scripting.ActionMulti.ARCombinableName1s
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ARCombinableName1s
        path: ''
        startLine: 8550
      summary: "\nThe Name of the first correct interactable for this step.\n"
      example: []
      syntax:
        content:
          CSharp: public List<ValueInput> ARCombinableName1s { get; }
          VB: Public ReadOnly Property ARCombinableName1s As List(Of ValueInput)
        parameters: []
        return:
          type: System.Collections.Generic.List{ValueInput}
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionMulti.ARCombinableName1s*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionMulti.ARCombinableName2s
      commentId: P:Visual_Scripting.ActionMulti.ARCombinableName2s
      language: CSharp
      name:
        CSharp: ARCombinableName2s
        VB: ARCombinableName2s
      nameWithType:
        CSharp: ActionMulti.ARCombinableName2s
        VB: ActionMulti.ARCombinableName2s
      qualifiedName:
        CSharp: Visual_Scripting.ActionMulti.ARCombinableName2s
        VB: Visual_Scripting.ActionMulti.ARCombinableName2s
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ARCombinableName2s
        path: ''
        startLine: 8557
      summary: "\nThe Name of the second correct interactable for this step.\n"
      example: []
      syntax:
        content:
          CSharp: public List<ValueInput> ARCombinableName2s { get; }
          VB: Public ReadOnly Property ARCombinableName2s As List(Of ValueInput)
        parameters: []
        return:
          type: System.Collections.Generic.List{ValueInput}
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionMulti.ARCombinableName2s*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionMulti.graphReference
      commentId: P:Visual_Scripting.ActionMulti.graphReference
      language: CSharp
      name:
        CSharp: graphReference
        VB: graphReference
      nameWithType:
        CSharp: ActionMulti.graphReference
        VB: ActionMulti.graphReference
      qualifiedName:
        CSharp: Visual_Scripting.ActionMulti.graphReference
        VB: Visual_Scripting.ActionMulti.graphReference
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: graphReference
        path: ''
        startLine: 8564
      summary: "\nThe Graphreference stores the current position in the flow graph to revisit it on Event/Action triggers.\n"
      example: []
      syntax:
        content:
          CSharp: public GraphReference graphReference { get; }
          VB: Public ReadOnly Property graphReference As GraphReference
        parameters: []
        return:
          type: Global.GraphReference
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionMulti.graphReference*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionMulti.ARInteractableNames
      commentId: P:Visual_Scripting.ActionMulti.ARInteractableNames
      language: CSharp
      name:
        CSharp: ARInteractableNames
        VB: ARInteractableNames
      nameWithType:
        CSharp: ActionMulti.ARInteractableNames
        VB: ActionMulti.ARInteractableNames
      qualifiedName:
        CSharp: Visual_Scripting.ActionMulti.ARInteractableNames
        VB: Visual_Scripting.ActionMulti.ARInteractableNames
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ARInteractableNames
        path: ''
        startLine: 8582
      summary: "\nThe Name of the correct interactable for this step.\n"
      example: []
      syntax:
        content:
          CSharp: public List<ValueInput> ARInteractableNames { get; }
          VB: Public ReadOnly Property ARInteractableNames As List(Of ValueInput)
        parameters: []
        return:
          type: System.Collections.Generic.List{ValueInput}
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionMulti.ARInteractableNames*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionMulti.CorrectParameterTexts
      commentId: P:Visual_Scripting.ActionMulti.CorrectParameterTexts
      language: CSharp
      name:
        CSharp: CorrectParameterTexts
        VB: CorrectParameterTexts
      nameWithType:
        CSharp: ActionMulti.CorrectParameterTexts
        VB: ActionMulti.CorrectParameterTexts
      qualifiedName:
        CSharp: Visual_Scripting.ActionMulti.CorrectParameterTexts
        VB: Visual_Scripting.ActionMulti.CorrectParameterTexts
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: CorrectParameterTexts
        path: ''
        startLine: 8595
      summary: "\nThe correct parameter for the custom event.\n"
      example: []
      syntax:
        content:
          CSharp: public List<ValueInput> CorrectParameterTexts { get; }
          VB: Public ReadOnly Property CorrectParameterTexts As List(Of ValueInput)
        parameters: []
        return:
          type: System.Collections.Generic.List{ValueInput}
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionMulti.CorrectParameterTexts*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionMulti.Definition
      commentId: M:Visual_Scripting.ActionMulti.Definition
      language: CSharp
      name:
        CSharp: Definition()
        VB: Definition()
      nameWithType:
        CSharp: ActionMulti.Definition()
        VB: ActionMulti.Definition()
      qualifiedName:
        CSharp: Visual_Scripting.ActionMulti.Definition()
        VB: Visual_Scripting.ActionMulti.Definition()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: Definition
        path: ''
        startLine: 8607
      summary: "\nDefines the Nodes input, output and value ports.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void Definition()
          VB: Protected Overrides Sub Definition
      overload: Visual_Scripting.ActionMulti.Definition*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: Visual_Scripting.ActionMulti.TrainARActionChoices
    commentId: T:Visual_Scripting.ActionMulti.TrainARActionChoices
    language: CSharp
    name:
      CSharp: ActionMulti.TrainARActionChoices
      VB: ActionMulti.TrainARActionChoices
    nameWithType:
      CSharp: ActionMulti.TrainARActionChoices
      VB: ActionMulti.TrainARActionChoices
    qualifiedName:
      CSharp: Visual_Scripting.ActionMulti.TrainARActionChoices
      VB: Visual_Scripting.ActionMulti.TrainARActionChoices
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Visual_Scripting
    source:
      id: TrainARActionChoices
      path: ''
      startLine: 8498
    summary: "\nThe type of interaction to check against.\n"
    example: []
    syntax:
      content:
        CSharp: public enum TrainARActionChoices
        VB: Public Enum TrainARActionChoices
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Visual_Scripting.ActionMulti.TrainARActionChoices.Interaction
      commentId: F:Visual_Scripting.ActionMulti.TrainARActionChoices.Interaction
      language: CSharp
      name:
        CSharp: Interaction
        VB: Interaction
      nameWithType:
        CSharp: ActionMulti.TrainARActionChoices.Interaction
        VB: ActionMulti.TrainARActionChoices.Interaction
      qualifiedName:
        CSharp: Visual_Scripting.ActionMulti.TrainARActionChoices.Interaction
        VB: Visual_Scripting.ActionMulti.TrainARActionChoices.Interaction
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: Interaction
        path: ''
        startLine: 8500
      syntax:
        content:
          CSharp: Interaction = 0
          VB: Interaction = 0
        return:
          type: Visual_Scripting.ActionMulti.TrainARActionChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Visual_Scripting.ActionMulti.TrainARActionChoices.Combination
      commentId: F:Visual_Scripting.ActionMulti.TrainARActionChoices.Combination
      language: CSharp
      name:
        CSharp: Combination
        VB: Combination
      nameWithType:
        CSharp: ActionMulti.TrainARActionChoices.Combination
        VB: ActionMulti.TrainARActionChoices.Combination
      qualifiedName:
        CSharp: Visual_Scripting.ActionMulti.TrainARActionChoices.Combination
        VB: Visual_Scripting.ActionMulti.TrainARActionChoices.Combination
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: Combination
        path: ''
        startLine: 8501
      syntax:
        content:
          CSharp: Combination = 1
          VB: Combination = 1
        return:
          type: Visual_Scripting.ActionMulti.TrainARActionChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Visual_Scripting.ActionMulti.TrainARActionChoices.CustomAction
      commentId: F:Visual_Scripting.ActionMulti.TrainARActionChoices.CustomAction
      language: CSharp
      name:
        CSharp: CustomAction
        VB: CustomAction
      nameWithType:
        CSharp: ActionMulti.TrainARActionChoices.CustomAction
        VB: ActionMulti.TrainARActionChoices.CustomAction
      qualifiedName:
        CSharp: Visual_Scripting.ActionMulti.TrainARActionChoices.CustomAction
        VB: Visual_Scripting.ActionMulti.TrainARActionChoices.CustomAction
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: CustomAction
        path: ''
        startLine: 8502
      syntax:
        content:
          CSharp: CustomAction = 2
          VB: CustomAction = 2
        return:
          type: Visual_Scripting.ActionMulti.TrainARActionChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Visual_Scripting.ActionUI
    commentId: T:Visual_Scripting.ActionUI
    language: CSharp
    name:
      CSharp: ActionUI
      VB: ActionUI
    nameWithType:
      CSharp: ActionUI
      VB: ActionUI
    qualifiedName:
      CSharp: Visual_Scripting.ActionUI
      VB: Visual_Scripting.ActionUI
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Visual_Scripting
    source:
      id: ActionUI
      path: ''
      startLine: 8892
    summary: "\nImplements the UI questionnaire functionality of TrainAR, therefore it triggers and checks against UI questions like\ntext input fields, questionnaires, and question lists.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ActionUI : Unit'
        VB: >-
          Public Class ActionUI

              Inherits Unit
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Visual_Scripting.ActionUI.actionChoice
      commentId: F:Visual_Scripting.ActionUI.actionChoice
      language: CSharp
      name:
        CSharp: actionChoice
        VB: actionChoice
      nameWithType:
        CSharp: ActionUI.actionChoice
        VB: ActionUI.actionChoice
      qualifiedName:
        CSharp: Visual_Scripting.ActionUI.actionChoice
        VB: Visual_Scripting.ActionUI.actionChoice
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: actionChoice
        path: ''
        startLine: 8912
      summary: "\nWhat type of question is triggered by this node.\n"
      example: []
      syntax:
        content:
          CSharp: public ActionUI.TrainARUIActionChoices actionChoice
          VB: Public actionChoice As ActionUI.TrainARUIActionChoices
        return:
          type: Visual_Scripting.ActionUI.TrainARUIActionChoices
          description: Set in node in the editor
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Visual_Scripting.ActionUI.correctAnswers
      commentId: F:Visual_Scripting.ActionUI.correctAnswers
      language: CSharp
      name:
        CSharp: correctAnswers
        VB: correctAnswers
      nameWithType:
        CSharp: ActionUI.correctAnswers
        VB: ActionUI.correctAnswers
      qualifiedName:
        CSharp: Visual_Scripting.ActionUI.correctAnswers
        VB: Visual_Scripting.ActionUI.correctAnswers
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: correctAnswers
        path: ''
        startLine: 8918
      summary: "\nThe amount of correct answers.\n"
      example: []
      syntax:
        content:
          CSharp: public int correctAnswers
          VB: Public correctAnswers As Integer
        return:
          type: System.Int32
          description: Set in node in the editor. Default is 2.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Visual_Scripting.ActionUI.wrongAnswers
      commentId: F:Visual_Scripting.ActionUI.wrongAnswers
      language: CSharp
      name:
        CSharp: wrongAnswers
        VB: wrongAnswers
      nameWithType:
        CSharp: ActionUI.wrongAnswers
        VB: ActionUI.wrongAnswers
      qualifiedName:
        CSharp: Visual_Scripting.ActionUI.wrongAnswers
        VB: Visual_Scripting.ActionUI.wrongAnswers
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: wrongAnswers
        path: ''
        startLine: 8924
      summary: "\nThe amount of wrong answers.\n"
      example: []
      syntax:
        content:
          CSharp: public int wrongAnswers
          VB: Public wrongAnswers As Integer
        return:
          type: System.Int32
          description: Set in node in the editor. Default is 2.
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Visual_Scripting.ActionUI.InputFlow
      commentId: P:Visual_Scripting.ActionUI.InputFlow
      language: CSharp
      name:
        CSharp: InputFlow
        VB: InputFlow
      nameWithType:
        CSharp: ActionUI.InputFlow
        VB: ActionUI.InputFlow
      qualifiedName:
        CSharp: Visual_Scripting.ActionUI.InputFlow
        VB: Visual_Scripting.ActionUI.InputFlow
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: InputFlow
        path: ''
        startLine: 8930
      summary: "\nThe Input port of the Unit that triggers the internal logic.\n"
      example: []
      syntax:
        content:
          CSharp: public ControlInput InputFlow { get; }
          VB: Public ReadOnly Property InputFlow As ControlInput
        parameters: []
        return:
          type: Global.ControlInput
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionUI.InputFlow*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionUI.CorrectAction
      commentId: P:Visual_Scripting.ActionUI.CorrectAction
      language: CSharp
      name:
        CSharp: CorrectAction
        VB: CorrectAction
      nameWithType:
        CSharp: ActionUI.CorrectAction
        VB: ActionUI.CorrectAction
      qualifiedName:
        CSharp: Visual_Scripting.ActionUI.CorrectAction
        VB: Visual_Scripting.ActionUI.CorrectAction
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: CorrectAction
        path: ''
        startLine: 8937
      summary: "\nThe Output port of the Unity that is triggered when the users interaction was CORRECT.\n"
      example: []
      syntax:
        content:
          CSharp: public List<ControlOutput> CorrectAction { get; }
          VB: Public ReadOnly Property CorrectAction As List(Of ControlOutput)
        parameters: []
        return:
          type: System.Collections.Generic.List{ControlOutput}
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionUI.CorrectAction*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionUI.IncorrectAction
      commentId: P:Visual_Scripting.ActionUI.IncorrectAction
      language: CSharp
      name:
        CSharp: IncorrectAction
        VB: IncorrectAction
      nameWithType:
        CSharp: ActionUI.IncorrectAction
        VB: ActionUI.IncorrectAction
      qualifiedName:
        CSharp: Visual_Scripting.ActionUI.IncorrectAction
        VB: Visual_Scripting.ActionUI.IncorrectAction
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: IncorrectAction
        path: ''
        startLine: 8944
      summary: "\nThe Output port of the Unity that is triggered when the users interaction was INCORRECT.\n"
      example: []
      syntax:
        content:
          CSharp: public List<ControlOutput> IncorrectAction { get; }
          VB: Public ReadOnly Property IncorrectAction As List(Of ControlOutput)
        parameters: []
        return:
          type: System.Collections.Generic.List{ControlOutput}
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionUI.IncorrectAction*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionUI.Question
      commentId: P:Visual_Scripting.ActionUI.Question
      language: CSharp
      name:
        CSharp: Question
        VB: Question
      nameWithType:
        CSharp: ActionUI.Question
        VB: ActionUI.Question
      qualifiedName:
        CSharp: Visual_Scripting.ActionUI.Question
        VB: Visual_Scripting.ActionUI.Question
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: Question
        path: ''
        startLine: 8951
      summary: "\nThe Text for the question for this step.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput Question { get; }
          VB: Public ReadOnly Property Question As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionUI.Question*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionUI.CorrectAnswers
      commentId: P:Visual_Scripting.ActionUI.CorrectAnswers
      language: CSharp
      name:
        CSharp: CorrectAnswers
        VB: CorrectAnswers
      nameWithType:
        CSharp: ActionUI.CorrectAnswers
        VB: ActionUI.CorrectAnswers
      qualifiedName:
        CSharp: Visual_Scripting.ActionUI.CorrectAnswers
        VB: Visual_Scripting.ActionUI.CorrectAnswers
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: CorrectAnswers
        path: ''
        startLine: 8958
      summary: "\nThe Texts for the correct answers for this step.\n"
      example: []
      syntax:
        content:
          CSharp: public List<ValueInput> CorrectAnswers { get; }
          VB: Public ReadOnly Property CorrectAnswers As List(Of ValueInput)
        parameters: []
        return:
          type: System.Collections.Generic.List{ValueInput}
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionUI.CorrectAnswers*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionUI.CorrectAnswersFeedback
      commentId: P:Visual_Scripting.ActionUI.CorrectAnswersFeedback
      language: CSharp
      name:
        CSharp: CorrectAnswersFeedback
        VB: CorrectAnswersFeedback
      nameWithType:
        CSharp: ActionUI.CorrectAnswersFeedback
        VB: ActionUI.CorrectAnswersFeedback
      qualifiedName:
        CSharp: Visual_Scripting.ActionUI.CorrectAnswersFeedback
        VB: Visual_Scripting.ActionUI.CorrectAnswersFeedback
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: CorrectAnswersFeedback
        path: ''
        startLine: 8965
      summary: "\nThe Texts for the correct answers for this step.\n"
      example: []
      syntax:
        content:
          CSharp: public List<ValueInput> CorrectAnswersFeedback { get; }
          VB: Public ReadOnly Property CorrectAnswersFeedback As List(Of ValueInput)
        parameters: []
        return:
          type: System.Collections.Generic.List{ValueInput}
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionUI.CorrectAnswersFeedback*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionUI.WrongAnswers
      commentId: P:Visual_Scripting.ActionUI.WrongAnswers
      language: CSharp
      name:
        CSharp: WrongAnswers
        VB: WrongAnswers
      nameWithType:
        CSharp: ActionUI.WrongAnswers
        VB: ActionUI.WrongAnswers
      qualifiedName:
        CSharp: Visual_Scripting.ActionUI.WrongAnswers
        VB: Visual_Scripting.ActionUI.WrongAnswers
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: WrongAnswers
        path: ''
        startLine: 8972
      summary: "\nThe Texts for the wrong answers for this step.\n"
      example: []
      syntax:
        content:
          CSharp: public List<ValueInput> WrongAnswers { get; }
          VB: Public ReadOnly Property WrongAnswers As List(Of ValueInput)
        parameters: []
        return:
          type: System.Collections.Generic.List{ValueInput}
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionUI.WrongAnswers*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionUI.WrongAnswersFeedback
      commentId: P:Visual_Scripting.ActionUI.WrongAnswersFeedback
      language: CSharp
      name:
        CSharp: WrongAnswersFeedback
        VB: WrongAnswersFeedback
      nameWithType:
        CSharp: ActionUI.WrongAnswersFeedback
        VB: ActionUI.WrongAnswersFeedback
      qualifiedName:
        CSharp: Visual_Scripting.ActionUI.WrongAnswersFeedback
        VB: Visual_Scripting.ActionUI.WrongAnswersFeedback
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: WrongAnswersFeedback
        path: ''
        startLine: 8979
      summary: "\nThe Texts for the wrong answers for this step.\n"
      example: []
      syntax:
        content:
          CSharp: public List<ValueInput> WrongAnswersFeedback { get; }
          VB: Public ReadOnly Property WrongAnswersFeedback As List(Of ValueInput)
        parameters: []
        return:
          type: System.Collections.Generic.List{ValueInput}
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionUI.WrongAnswersFeedback*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionUI.graphReference
      commentId: P:Visual_Scripting.ActionUI.graphReference
      language: CSharp
      name:
        CSharp: graphReference
        VB: graphReference
      nameWithType:
        CSharp: ActionUI.graphReference
        VB: ActionUI.graphReference
      qualifiedName:
        CSharp: Visual_Scripting.ActionUI.graphReference
        VB: Visual_Scripting.ActionUI.graphReference
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: graphReference
        path: ''
        startLine: 8986
      summary: "\nThe Graphreference stores the current position in the flow graph to revisit it on Event/Action triggers.\n"
      example: []
      syntax:
        content:
          CSharp: public GraphReference graphReference { get; }
          VB: Public ReadOnly Property graphReference As GraphReference
        parameters: []
        return:
          type: Global.GraphReference
          description: Set in node in the editor.
      overload: Visual_Scripting.ActionUI.graphReference*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ActionUI.Definition
      commentId: M:Visual_Scripting.ActionUI.Definition
      language: CSharp
      name:
        CSharp: Definition()
        VB: Definition()
      nameWithType:
        CSharp: ActionUI.Definition()
        VB: ActionUI.Definition()
      qualifiedName:
        CSharp: Visual_Scripting.ActionUI.Definition()
        VB: Visual_Scripting.ActionUI.Definition()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: Definition
        path: ''
        startLine: 8995
      summary: "\nDefines the Nodes input, output and value ports\n"
      example: []
      syntax:
        content:
          CSharp: protected override void Definition()
          VB: Protected Overrides Sub Definition
      overload: Visual_Scripting.ActionUI.Definition*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: Visual_Scripting.ActionUI.TrainARUIActionChoices
    commentId: T:Visual_Scripting.ActionUI.TrainARUIActionChoices
    language: CSharp
    name:
      CSharp: ActionUI.TrainARUIActionChoices
      VB: ActionUI.TrainARUIActionChoices
    nameWithType:
      CSharp: ActionUI.TrainARUIActionChoices
      VB: ActionUI.TrainARUIActionChoices
    qualifiedName:
      CSharp: Visual_Scripting.ActionUI.TrainARUIActionChoices
      VB: Visual_Scripting.ActionUI.TrainARUIActionChoices
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Visual_Scripting
    source:
      id: TrainARUIActionChoices
      path: ''
      startLine: 8901
    summary: "\nThe type of UI questionnaire triggered and check against.\n"
    example: []
    syntax:
      content:
        CSharp: public enum TrainARUIActionChoices
        VB: Public Enum TrainARUIActionChoices
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Visual_Scripting.ActionUI.TrainARUIActionChoices.InputField
      commentId: F:Visual_Scripting.ActionUI.TrainARUIActionChoices.InputField
      language: CSharp
      name:
        CSharp: InputField
        VB: InputField
      nameWithType:
        CSharp: ActionUI.TrainARUIActionChoices.InputField
        VB: ActionUI.TrainARUIActionChoices.InputField
      qualifiedName:
        CSharp: Visual_Scripting.ActionUI.TrainARUIActionChoices.InputField
        VB: Visual_Scripting.ActionUI.TrainARUIActionChoices.InputField
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: InputField
        path: ''
        startLine: 8903
      syntax:
        content:
          CSharp: InputField = 0
          VB: InputField = 0
        return:
          type: Visual_Scripting.ActionUI.TrainARUIActionChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Visual_Scripting.ActionUI.TrainARUIActionChoices.Questionnaire
      commentId: F:Visual_Scripting.ActionUI.TrainARUIActionChoices.Questionnaire
      language: CSharp
      name:
        CSharp: Questionnaire
        VB: Questionnaire
      nameWithType:
        CSharp: ActionUI.TrainARUIActionChoices.Questionnaire
        VB: ActionUI.TrainARUIActionChoices.Questionnaire
      qualifiedName:
        CSharp: Visual_Scripting.ActionUI.TrainARUIActionChoices.Questionnaire
        VB: Visual_Scripting.ActionUI.TrainARUIActionChoices.Questionnaire
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: Questionnaire
        path: ''
        startLine: 8904
      syntax:
        content:
          CSharp: Questionnaire = 1
          VB: Questionnaire = 1
        return:
          type: Visual_Scripting.ActionUI.TrainARUIActionChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Visual_Scripting.ActionUI.TrainARUIActionChoices.ListSelection
      commentId: F:Visual_Scripting.ActionUI.TrainARUIActionChoices.ListSelection
      language: CSharp
      name:
        CSharp: ListSelection
        VB: ListSelection
      nameWithType:
        CSharp: ActionUI.TrainARUIActionChoices.ListSelection
        VB: ActionUI.TrainARUIActionChoices.ListSelection
      qualifiedName:
        CSharp: Visual_Scripting.ActionUI.TrainARUIActionChoices.ListSelection
        VB: Visual_Scripting.ActionUI.TrainARUIActionChoices.ListSelection
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ListSelection
        path: ''
        startLine: 8905
      syntax:
        content:
          CSharp: ListSelection = 2
          VB: ListSelection = 2
        return:
          type: Visual_Scripting.ActionUI.TrainARUIActionChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Visual_Scripting.Conclusion
    commentId: T:Visual_Scripting.Conclusion
    language: CSharp
    name:
      CSharp: Conclusion
      VB: Conclusion
    nameWithType:
      CSharp: Conclusion
      VB: Conclusion
    qualifiedName:
      CSharp: Visual_Scripting.Conclusion
      VB: Visual_Scripting.Conclusion
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Visual_Scripting
    source:
      id: Conclusion
      path: ''
      startLine: 9211
    summary: "\nTriggers the Completion overlay that shows the training assessment of the scenario and ends the stateflow/training.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Conclusion : Unit'
        VB: >-
          Public Class Conclusion

              Inherits Unit
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Visual_Scripting.Conclusion.InputFlow
      commentId: P:Visual_Scripting.Conclusion.InputFlow
      language: CSharp
      name:
        CSharp: InputFlow
        VB: InputFlow
      nameWithType:
        CSharp: Conclusion.InputFlow
        VB: Conclusion.InputFlow
      qualifiedName:
        CSharp: Visual_Scripting.Conclusion.InputFlow
        VB: Visual_Scripting.Conclusion.InputFlow
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: InputFlow
        path: ''
        startLine: 9221
      summary: "\nThe Input port of the Unit that triggers the internal logic.\n"
      example: []
      syntax:
        content:
          CSharp: public ControlInput InputFlow { get; }
          VB: Public ReadOnly Property InputFlow As ControlInput
        parameters: []
        return:
          type: Global.ControlInput
          description: Set in node in the editor.
      overload: Visual_Scripting.Conclusion.InputFlow*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Conclusion.Definition
      commentId: M:Visual_Scripting.Conclusion.Definition
      language: CSharp
      name:
        CSharp: Definition()
        VB: Definition()
      nameWithType:
        CSharp: Conclusion.Definition()
        VB: Conclusion.Definition()
      qualifiedName:
        CSharp: Visual_Scripting.Conclusion.Definition()
        VB: Visual_Scripting.Conclusion.Definition()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: Definition
        path: ''
        startLine: 9230
      summary: "\nDefines the Nodes input and value ports\n\nAs this terminates the scenario, there is no output port or flow, the rest is handled through the\nscript-based components in the framework.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void Definition()
          VB: Protected Overrides Sub Definition
      overload: Visual_Scripting.Conclusion.Definition*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: Visual_Scripting.Feedback
    commentId: T:Visual_Scripting.Feedback
    language: CSharp
    name:
      CSharp: Feedback
      VB: Feedback
    nameWithType:
      CSharp: Feedback
      VB: Feedback
    qualifiedName:
      CSharp: Visual_Scripting.Feedback
      VB: Visual_Scripting.Feedback
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Visual_Scripting
    source:
      id: Feedback
      path: ''
      startLine: 9262
    summary: "\nImplements the &quot;Feedback&quot; functionality of the TrainAR Framework, therefore it triggers\nthe error overlay modality to show feedback (e.g. for an incorrect important action).\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Feedback : Unit'
        VB: >-
          Public Class Feedback

              Inherits Unit
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Visual_Scripting.Feedback.InputFlow
      commentId: P:Visual_Scripting.Feedback.InputFlow
      language: CSharp
      name:
        CSharp: InputFlow
        VB: InputFlow
      nameWithType:
        CSharp: Feedback.InputFlow
        VB: Feedback.InputFlow
      qualifiedName:
        CSharp: Visual_Scripting.Feedback.InputFlow
        VB: Visual_Scripting.Feedback.InputFlow
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: InputFlow
        path: ''
        startLine: 9272
      summary: "\nThe Input port of the Unit that triggers the internal logic.\n"
      example: []
      syntax:
        content:
          CSharp: public ControlInput InputFlow { get; }
          VB: Public ReadOnly Property InputFlow As ControlInput
        parameters: []
        return:
          type: Global.ControlInput
          description: Set in node in the editor.
      overload: Visual_Scripting.Feedback.InputFlow*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Feedback.OutputFlow
      commentId: P:Visual_Scripting.Feedback.OutputFlow
      language: CSharp
      name:
        CSharp: OutputFlow
        VB: OutputFlow
      nameWithType:
        CSharp: Feedback.OutputFlow
        VB: Feedback.OutputFlow
      qualifiedName:
        CSharp: Visual_Scripting.Feedback.OutputFlow
        VB: Visual_Scripting.Feedback.OutputFlow
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: OutputFlow
        path: ''
        startLine: 9279
      summary: "\nThe Output port of the Unit that is tirggered after executing the units logic.\n"
      example: []
      syntax:
        content:
          CSharp: public ControlOutput OutputFlow { get; }
          VB: Public ReadOnly Property OutputFlow As ControlOutput
        parameters: []
        return:
          type: Global.ControlOutput
          description: Set in node in the editor.
      overload: Visual_Scripting.Feedback.OutputFlow*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Feedback.HeaderText
      commentId: P:Visual_Scripting.Feedback.HeaderText
      language: CSharp
      name:
        CSharp: HeaderText
        VB: HeaderText
      nameWithType:
        CSharp: Feedback.HeaderText
        VB: Feedback.HeaderText
      qualifiedName:
        CSharp: Visual_Scripting.Feedback.HeaderText
        VB: Visual_Scripting.Feedback.HeaderText
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: HeaderText
        path: ''
        startLine: 9286
      summary: "\nThe Header text that is displayed for the current step.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput HeaderText { get; }
          VB: Public ReadOnly Property HeaderText As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.Feedback.HeaderText*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Feedback.ErrorText
      commentId: P:Visual_Scripting.Feedback.ErrorText
      language: CSharp
      name:
        CSharp: ErrorText
        VB: ErrorText
      nameWithType:
        CSharp: Feedback.ErrorText
        VB: Feedback.ErrorText
      qualifiedName:
        CSharp: Visual_Scripting.Feedback.ErrorText
        VB: Visual_Scripting.Feedback.ErrorText
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ErrorText
        path: ''
        startLine: 9293
      summary: "\nThe Error text that is displayed for the current step.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput ErrorText { get; }
          VB: Public ReadOnly Property ErrorText As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.Feedback.ErrorText*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Feedback.Definition
      commentId: M:Visual_Scripting.Feedback.Definition
      language: CSharp
      name:
        CSharp: Definition()
        VB: Definition()
      nameWithType:
        CSharp: Feedback.Definition()
        VB: Feedback.Definition()
      qualifiedName:
        CSharp: Visual_Scripting.Feedback.Definition()
        VB: Visual_Scripting.Feedback.Definition()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: Definition
        path: ''
        startLine: 9299
      summary: "\nDefines the Nodes input, output and value ports.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void Definition()
          VB: Protected Overrides Sub Definition
      overload: Visual_Scripting.Feedback.Definition*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: Visual_Scripting.Insights
    commentId: T:Visual_Scripting.Insights
    language: CSharp
    name:
      CSharp: Insights
      VB: Insights
    nameWithType:
      CSharp: Insights
      VB: Insights
    qualifiedName:
      CSharp: Visual_Scripting.Insights
      VB: Visual_Scripting.Insights
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Visual_Scripting
    source:
      id: Insights
      path: ''
      startLine: 9341
    summary: "\nImplements the &quot;Insights&quot; functionality of the TrainAR Framework, therefore it triggers\nthe expert input modality to show additional insights and tips and optionally plays audio clips.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Insights : Unit'
        VB: >-
          Public Class Insights

              Inherits Unit
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Visual_Scripting.Insights.InputFlow
      commentId: P:Visual_Scripting.Insights.InputFlow
      language: CSharp
      name:
        CSharp: InputFlow
        VB: InputFlow
      nameWithType:
        CSharp: Insights.InputFlow
        VB: Insights.InputFlow
      qualifiedName:
        CSharp: Visual_Scripting.Insights.InputFlow
        VB: Visual_Scripting.Insights.InputFlow
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: InputFlow
        path: ''
        startLine: 9351
      summary: "\nThe Input port of the Unit that triggers the internal logic.\n"
      example: []
      syntax:
        content:
          CSharp: public ControlInput InputFlow { get; }
          VB: Public ReadOnly Property InputFlow As ControlInput
        parameters: []
        return:
          type: Global.ControlInput
          description: Set in node in the editor.
      overload: Visual_Scripting.Insights.InputFlow*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Insights.OutputFlow
      commentId: P:Visual_Scripting.Insights.OutputFlow
      language: CSharp
      name:
        CSharp: OutputFlow
        VB: OutputFlow
      nameWithType:
        CSharp: Insights.OutputFlow
        VB: Insights.OutputFlow
      qualifiedName:
        CSharp: Visual_Scripting.Insights.OutputFlow
        VB: Visual_Scripting.Insights.OutputFlow
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: OutputFlow
        path: ''
        startLine: 9358
      summary: "\nThe Output port of the Unit that is tirggered after executing the units logic.\n"
      example: []
      syntax:
        content:
          CSharp: public ControlOutput OutputFlow { get; }
          VB: Public ReadOnly Property OutputFlow As ControlOutput
        parameters: []
        return:
          type: Global.ControlOutput
          description: Set in node in the editor.
      overload: Visual_Scripting.Insights.OutputFlow*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Insights.InsightText
      commentId: P:Visual_Scripting.Insights.InsightText
      language: CSharp
      name:
        CSharp: InsightText
        VB: InsightText
      nameWithType:
        CSharp: Insights.InsightText
        VB: Insights.InsightText
      qualifiedName:
        CSharp: Visual_Scripting.Insights.InsightText
        VB: Visual_Scripting.Insights.InsightText
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: InsightText
        path: ''
        startLine: 9365
      summary: "\nThe instruction text that is displayed for the current step.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput InsightText { get; }
          VB: Public ReadOnly Property InsightText As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.Insights.InsightText*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Insights.InsightAudioClip
      commentId: P:Visual_Scripting.Insights.InsightAudioClip
      language: CSharp
      name:
        CSharp: InsightAudioClip
        VB: InsightAudioClip
      nameWithType:
        CSharp: Insights.InsightAudioClip
        VB: Insights.InsightAudioClip
      qualifiedName:
        CSharp: Visual_Scripting.Insights.InsightAudioClip
        VB: Visual_Scripting.Insights.InsightAudioClip
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: InsightAudioClip
        path: ''
        startLine: 9372
      summary: "\nThe audioclip to be played with the expert insights.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput InsightAudioClip { get; }
          VB: Public ReadOnly Property InsightAudioClip As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.Insights.InsightAudioClip*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Insights.InsightExpertImage
      commentId: P:Visual_Scripting.Insights.InsightExpertImage
      language: CSharp
      name:
        CSharp: InsightExpertImage
        VB: InsightExpertImage
      nameWithType:
        CSharp: Insights.InsightExpertImage
        VB: Insights.InsightExpertImage
      qualifiedName:
        CSharp: Visual_Scripting.Insights.InsightExpertImage
        VB: Visual_Scripting.Insights.InsightExpertImage
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: InsightExpertImage
        path: ''
        startLine: 9379
      summary: "\nThe image/symbol to be displayed as the &quot;expert&quot; next to the text.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput InsightExpertImage { get; }
          VB: Public ReadOnly Property InsightExpertImage As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.Insights.InsightExpertImage*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Insights.Definition
      commentId: M:Visual_Scripting.Insights.Definition
      language: CSharp
      name:
        CSharp: Definition()
        VB: Definition()
      nameWithType:
        CSharp: Insights.Definition()
        VB: Insights.Definition()
      qualifiedName:
        CSharp: Visual_Scripting.Insights.Definition()
        VB: Visual_Scripting.Insights.Definition()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: Definition
        path: ''
        startLine: 9385
      summary: "\nDefines the Nodes input, output and value ports.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void Definition()
          VB: Protected Overrides Sub Definition
      overload: Visual_Scripting.Insights.Definition*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: Visual_Scripting.Instructions
    commentId: T:Visual_Scripting.Instructions
    language: CSharp
    name:
      CSharp: Instructions
      VB: Instructions
    nameWithType:
      CSharp: Instructions
      VB: Instructions
    qualifiedName:
      CSharp: Visual_Scripting.Instructions
      VB: Visual_Scripting.Instructions
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Visual_Scripting
    source:
      id: Instructions
      path: ''
      startLine: 9429
    summary: "\nImplements the &quot;Instruction&quot; functionality of the TrainAR Framework, therefore it updates the isntrutions and progress percentage of the Top panel.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class Instructions : Unit'
        VB: >-
          Public Class Instructions

              Inherits Unit
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Visual_Scripting.Instructions.InputFlow
      commentId: P:Visual_Scripting.Instructions.InputFlow
      language: CSharp
      name:
        CSharp: InputFlow
        VB: InputFlow
      nameWithType:
        CSharp: Instructions.InputFlow
        VB: Instructions.InputFlow
      qualifiedName:
        CSharp: Visual_Scripting.Instructions.InputFlow
        VB: Visual_Scripting.Instructions.InputFlow
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: InputFlow
        path: ''
        startLine: 9439
      summary: "\nThe Input port of the Unit that triggers the internal logic.\n"
      example: []
      syntax:
        content:
          CSharp: public ControlInput InputFlow { get; }
          VB: Public ReadOnly Property InputFlow As ControlInput
        parameters: []
        return:
          type: Global.ControlInput
          description: Set in node in the editor.
      overload: Visual_Scripting.Instructions.InputFlow*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Instructions.OutputFlow
      commentId: P:Visual_Scripting.Instructions.OutputFlow
      language: CSharp
      name:
        CSharp: OutputFlow
        VB: OutputFlow
      nameWithType:
        CSharp: Instructions.OutputFlow
        VB: Instructions.OutputFlow
      qualifiedName:
        CSharp: Visual_Scripting.Instructions.OutputFlow
        VB: Visual_Scripting.Instructions.OutputFlow
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: OutputFlow
        path: ''
        startLine: 9446
      summary: "\nThe Output port of the Unit that is tirggered after executing the units logic.\n"
      example: []
      syntax:
        content:
          CSharp: public ControlOutput OutputFlow { get; }
          VB: Public ReadOnly Property OutputFlow As ControlOutput
        parameters: []
        return:
          type: Global.ControlOutput
          description: Set in node in the editor.
      overload: Visual_Scripting.Instructions.OutputFlow*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Instructions.instructionText
      commentId: P:Visual_Scripting.Instructions.instructionText
      language: CSharp
      name:
        CSharp: instructionText
        VB: instructionText
      nameWithType:
        CSharp: Instructions.instructionText
        VB: Instructions.instructionText
      qualifiedName:
        CSharp: Visual_Scripting.Instructions.instructionText
        VB: Visual_Scripting.Instructions.instructionText
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: instructionText
        path: ''
        startLine: 9453
      summary: "\nThe instruction text that is displayed for the current step.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput instructionText { get; }
          VB: Public ReadOnly Property instructionText As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.Instructions.instructionText*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Instructions.progressPercentage
      commentId: P:Visual_Scripting.Instructions.progressPercentage
      language: CSharp
      name:
        CSharp: progressPercentage
        VB: progressPercentage
      nameWithType:
        CSharp: Instructions.progressPercentage
        VB: Instructions.progressPercentage
      qualifiedName:
        CSharp: Visual_Scripting.Instructions.progressPercentage
        VB: Visual_Scripting.Instructions.progressPercentage
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: progressPercentage
        path: ''
        startLine: 9460
      summary: "\nThe percentage that is displayed for the current step.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput progressPercentage { get; }
          VB: Public ReadOnly Property progressPercentage As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.Instructions.progressPercentage*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.Instructions.Definition
      commentId: M:Visual_Scripting.Instructions.Definition
      language: CSharp
      name:
        CSharp: Definition()
        VB: Definition()
      nameWithType:
        CSharp: Instructions.Definition()
        VB: Instructions.Definition()
      qualifiedName:
        CSharp: Visual_Scripting.Instructions.Definition()
        VB: Visual_Scripting.Instructions.Definition()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: Definition
        path: ''
        startLine: 9466
      summary: "\nDefines the Nodes input, output and value ports.\n"
      example: []
      syntax:
        content:
          CSharp: protected override void Definition()
          VB: Protected Overrides Sub Definition
      overload: Visual_Scripting.Instructions.Definition*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: Visual_Scripting.ObjectHelper
    commentId: T:Visual_Scripting.ObjectHelper
    language: CSharp
    name:
      CSharp: ObjectHelper
      VB: ObjectHelper
    nameWithType:
      CSharp: ObjectHelper
      VB: ObjectHelper
    qualifiedName:
      CSharp: Visual_Scripting.ObjectHelper
      VB: Visual_Scripting.ObjectHelper
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Visual_Scripting
    source:
      id: ObjectHelper
      path: ''
      startLine: 9512
    summary: "\nThe Object helper provides utility methods to toggle visibility, grabbability, interactability, and combinability of TrainAR objects, to destroy them, to get GameObject references to TrainAR object in the stateflow and many other utility functions.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class ObjectHelper : Unit'
        VB: >-
          Public Class ObjectHelper

              Inherits Unit
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Visual_Scripting.ObjectHelper.helperChoice
      commentId: F:Visual_Scripting.ObjectHelper.helperChoice
      language: CSharp
      name:
        CSharp: helperChoice
        VB: helperChoice
      nameWithType:
        CSharp: ObjectHelper.helperChoice
        VB: ObjectHelper.helperChoice
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.helperChoice
        VB: Visual_Scripting.ObjectHelper.helperChoice
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: helperChoice
        path: ''
        startLine: 9537
      syntax:
        content:
          CSharp: public ObjectHelper.TrainARHelperChoices helperChoice
          VB: Public helperChoice As ObjectHelper.TrainARHelperChoices
        return:
          type: Visual_Scripting.ObjectHelper.TrainARHelperChoices
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Visual_Scripting.ObjectHelper.InputFlow
      commentId: P:Visual_Scripting.ObjectHelper.InputFlow
      language: CSharp
      name:
        CSharp: InputFlow
        VB: InputFlow
      nameWithType:
        CSharp: ObjectHelper.InputFlow
        VB: ObjectHelper.InputFlow
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.InputFlow
        VB: Visual_Scripting.ObjectHelper.InputFlow
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: InputFlow
        path: ''
        startLine: 9543
      summary: "\nThe Input port of the Unit that triggers the internal logic.\n"
      example: []
      syntax:
        content:
          CSharp: public ControlInput InputFlow { get; }
          VB: Public ReadOnly Property InputFlow As ControlInput
        parameters: []
        return:
          type: Global.ControlInput
          description: Set in node in the editor.
      overload: Visual_Scripting.ObjectHelper.InputFlow*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ObjectHelper.OutputFlow
      commentId: P:Visual_Scripting.ObjectHelper.OutputFlow
      language: CSharp
      name:
        CSharp: OutputFlow
        VB: OutputFlow
      nameWithType:
        CSharp: ObjectHelper.OutputFlow
        VB: ObjectHelper.OutputFlow
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.OutputFlow
        VB: Visual_Scripting.ObjectHelper.OutputFlow
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: OutputFlow
        path: ''
        startLine: 9550
      summary: "\nThe Output port of the Unit that is tirggered after executing the units logic.\n"
      example: []
      syntax:
        content:
          CSharp: public ControlOutput OutputFlow { get; }
          VB: Public ReadOnly Property OutputFlow As ControlOutput
        parameters: []
        return:
          type: Global.ControlOutput
          description: Set in node in the editor.
      overload: Visual_Scripting.ObjectHelper.OutputFlow*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ObjectHelper.TrainARObjectName
      commentId: P:Visual_Scripting.ObjectHelper.TrainARObjectName
      language: CSharp
      name:
        CSharp: TrainARObjectName
        VB: TrainARObjectName
      nameWithType:
        CSharp: ObjectHelper.TrainARObjectName
        VB: ObjectHelper.TrainARObjectName
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.TrainARObjectName
        VB: Visual_Scripting.ObjectHelper.TrainARObjectName
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: TrainARObjectName
        path: ''
        startLine: 9557
      summary: "\nName of the Object we want to get the reference for.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput TrainARObjectName { get; }
          VB: Public ReadOnly Property TrainARObjectName As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.ObjectHelper.TrainARObjectName*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ObjectHelper.VisibilityToggle
      commentId: P:Visual_Scripting.ObjectHelper.VisibilityToggle
      language: CSharp
      name:
        CSharp: VisibilityToggle
        VB: VisibilityToggle
      nameWithType:
        CSharp: ObjectHelper.VisibilityToggle
        VB: ObjectHelper.VisibilityToggle
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.VisibilityToggle
        VB: Visual_Scripting.ObjectHelper.VisibilityToggle
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: VisibilityToggle
        path: ''
        startLine: 9564
      summary: "\nToggle for the visibility that is displayed when this helper is selected.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput VisibilityToggle { get; }
          VB: Public ReadOnly Property VisibilityToggle As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.ObjectHelper.VisibilityToggle*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ObjectHelper.GrabbabilityToggle
      commentId: P:Visual_Scripting.ObjectHelper.GrabbabilityToggle
      language: CSharp
      name:
        CSharp: GrabbabilityToggle
        VB: GrabbabilityToggle
      nameWithType:
        CSharp: ObjectHelper.GrabbabilityToggle
        VB: ObjectHelper.GrabbabilityToggle
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.GrabbabilityToggle
        VB: Visual_Scripting.ObjectHelper.GrabbabilityToggle
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: GrabbabilityToggle
        path: ''
        startLine: 9571
      summary: "\nToggle for the grabbability that is displayed when this helper is selected.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput GrabbabilityToggle { get; }
          VB: Public ReadOnly Property GrabbabilityToggle As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.ObjectHelper.GrabbabilityToggle*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ObjectHelper.InteractabilityToggle
      commentId: P:Visual_Scripting.ObjectHelper.InteractabilityToggle
      language: CSharp
      name:
        CSharp: InteractabilityToggle
        VB: InteractabilityToggle
      nameWithType:
        CSharp: ObjectHelper.InteractabilityToggle
        VB: ObjectHelper.InteractabilityToggle
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.InteractabilityToggle
        VB: Visual_Scripting.ObjectHelper.InteractabilityToggle
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: InteractabilityToggle
        path: ''
        startLine: 9578
      summary: "\nToggle for the interactability that is displayed when this helper is selected.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput InteractabilityToggle { get; }
          VB: Public ReadOnly Property InteractabilityToggle As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.ObjectHelper.InteractabilityToggle*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ObjectHelper.CombinabilityToggle
      commentId: P:Visual_Scripting.ObjectHelper.CombinabilityToggle
      language: CSharp
      name:
        CSharp: CombinabilityToggle
        VB: CombinabilityToggle
      nameWithType:
        CSharp: ObjectHelper.CombinabilityToggle
        VB: ObjectHelper.CombinabilityToggle
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.CombinabilityToggle
        VB: Visual_Scripting.ObjectHelper.CombinabilityToggle
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: CombinabilityToggle
        path: ''
        startLine: 9585
      summary: "\nToggle for the combinability that is displayed when this helper is selected.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput CombinabilityToggle { get; }
          VB: Public ReadOnly Property CombinabilityToggle As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.ObjectHelper.CombinabilityToggle*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ObjectHelper.objectReference
      commentId: P:Visual_Scripting.ObjectHelper.objectReference
      language: CSharp
      name:
        CSharp: objectReference
        VB: objectReference
      nameWithType:
        CSharp: ObjectHelper.objectReference
        VB: ObjectHelper.objectReference
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.objectReference
        VB: Visual_Scripting.ObjectHelper.objectReference
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: objectReference
        path: ''
        startLine: 9592
      summary: "\nThe reference to the GameObject in the scene.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueOutput objectReference { get; }
          VB: Public ReadOnly Property objectReference As ValueOutput
        parameters: []
        return:
          type: Global.ValueOutput
          description: Set in node in the editor.
      overload: Visual_Scripting.ObjectHelper.objectReference*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ObjectHelper.ObjectMesh
      commentId: P:Visual_Scripting.ObjectHelper.ObjectMesh
      language: CSharp
      name:
        CSharp: ObjectMesh
        VB: ObjectMesh
      nameWithType:
        CSharp: ObjectHelper.ObjectMesh
        VB: ObjectHelper.ObjectMesh
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.ObjectMesh
        VB: Visual_Scripting.ObjectHelper.ObjectMesh
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ObjectMesh
        path: ''
        startLine: 9604
      summary: "\nMesh to replace.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput ObjectMesh { get; }
          VB: Public ReadOnly Property ObjectMesh As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.ObjectHelper.ObjectMesh*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ObjectHelper.ObjectMaterial
      commentId: P:Visual_Scripting.ObjectHelper.ObjectMaterial
      language: CSharp
      name:
        CSharp: ObjectMaterial
        VB: ObjectMaterial
      nameWithType:
        CSharp: ObjectHelper.ObjectMaterial
        VB: ObjectHelper.ObjectMaterial
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.ObjectMaterial
        VB: Visual_Scripting.ObjectHelper.ObjectMaterial
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ObjectMaterial
        path: ''
        startLine: 9611
      summary: "\nTexture to replace.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput ObjectMaterial { get; }
          VB: Public ReadOnly Property ObjectMaterial As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.ObjectHelper.ObjectMaterial*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ObjectHelper.InteractableText
      commentId: P:Visual_Scripting.ObjectHelper.InteractableText
      language: CSharp
      name:
        CSharp: InteractableText
        VB: InteractableText
      nameWithType:
        CSharp: ObjectHelper.InteractableText
        VB: ObjectHelper.InteractableText
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.InteractableText
        VB: Visual_Scripting.ObjectHelper.InteractableText
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: InteractableText
        path: ''
        startLine: 9618
      summary: "\nThe interactable text that is displayed on the interaction button.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput InteractableText { get; }
          VB: Public ReadOnly Property InteractableText As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.ObjectHelper.InteractableText*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ObjectHelper.Lerpingdistance
      commentId: P:Visual_Scripting.ObjectHelper.Lerpingdistance
      language: CSharp
      name:
        CSharp: Lerpingdistance
        VB: Lerpingdistance
      nameWithType:
        CSharp: ObjectHelper.Lerpingdistance
        VB: ObjectHelper.Lerpingdistance
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.Lerpingdistance
        VB: Visual_Scripting.ObjectHelper.Lerpingdistance
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: Lerpingdistance
        path: ''
        startLine: 9625
      summary: "\nThe lerping distance of the object to the smartphone.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput Lerpingdistance { get; }
          VB: Public ReadOnly Property Lerpingdistance As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.ObjectHelper.Lerpingdistance*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ObjectHelper.ObjectTwo
      commentId: P:Visual_Scripting.ObjectHelper.ObjectTwo
      language: CSharp
      name:
        CSharp: ObjectTwo
        VB: ObjectTwo
      nameWithType:
        CSharp: ObjectHelper.ObjectTwo
        VB: ObjectHelper.ObjectTwo
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.ObjectTwo
        VB: Visual_Scripting.ObjectHelper.ObjectTwo
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ObjectTwo
        path: ''
        startLine: 9632
      summary: "\nThe second object to fuse together (with the original one).\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput ObjectTwo { get; }
          VB: Public ReadOnly Property ObjectTwo As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.ObjectHelper.ObjectTwo*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ObjectHelper.FusionOffsetPosition
      commentId: P:Visual_Scripting.ObjectHelper.FusionOffsetPosition
      language: CSharp
      name:
        CSharp: FusionOffsetPosition
        VB: FusionOffsetPosition
      nameWithType:
        CSharp: ObjectHelper.FusionOffsetPosition
        VB: ObjectHelper.FusionOffsetPosition
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.FusionOffsetPosition
        VB: Visual_Scripting.ObjectHelper.FusionOffsetPosition
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: FusionOffsetPosition
        path: ''
        startLine: 9639
      summary: "\nThe positional offset of the fusion of the objects.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput FusionOffsetPosition { get; }
          VB: Public ReadOnly Property FusionOffsetPosition As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.ObjectHelper.FusionOffsetPosition*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ObjectHelper.FusionOffsetRotation
      commentId: P:Visual_Scripting.ObjectHelper.FusionOffsetRotation
      language: CSharp
      name:
        CSharp: FusionOffsetRotation
        VB: FusionOffsetRotation
      nameWithType:
        CSharp: ObjectHelper.FusionOffsetRotation
        VB: ObjectHelper.FusionOffsetRotation
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.FusionOffsetRotation
        VB: Visual_Scripting.ObjectHelper.FusionOffsetRotation
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: FusionOffsetRotation
        path: ''
        startLine: 9646
      summary: "\nThe rotational offset of the fusion of the objects.\n"
      example: []
      syntax:
        content:
          CSharp: public ValueInput FusionOffsetRotation { get; }
          VB: Public ReadOnly Property FusionOffsetRotation As ValueInput
        parameters: []
        return:
          type: Global.ValueInput
          description: Set in node in the editor.
      overload: Visual_Scripting.ObjectHelper.FusionOffsetRotation*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: Visual_Scripting.ObjectHelper.Definition
      commentId: M:Visual_Scripting.ObjectHelper.Definition
      language: CSharp
      name:
        CSharp: Definition()
        VB: Definition()
      nameWithType:
        CSharp: ObjectHelper.Definition()
        VB: ObjectHelper.Definition()
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.Definition()
        VB: Visual_Scripting.ObjectHelper.Definition()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: Definition
        path: ''
        startLine: 9652
      summary: "\nDefines the Nodes input, output and value ports\n"
      example: []
      syntax:
        content:
          CSharp: protected override void Definition()
          VB: Protected Overrides Sub Definition
      overload: Visual_Scripting.ObjectHelper.Definition*
      modifiers:
        CSharp:
        - protected
        - override
        VB:
        - Protected
        - Overrides
  - id: Visual_Scripting.ObjectHelper.TrainARHelperChoices
    commentId: T:Visual_Scripting.ObjectHelper.TrainARHelperChoices
    language: CSharp
    name:
      CSharp: ObjectHelper.TrainARHelperChoices
      VB: ObjectHelper.TrainARHelperChoices
    nameWithType:
      CSharp: ObjectHelper.TrainARHelperChoices
      VB: ObjectHelper.TrainARHelperChoices
    qualifiedName:
      CSharp: Visual_Scripting.ObjectHelper.TrainARHelperChoices
      VB: Visual_Scripting.ObjectHelper.TrainARHelperChoices
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Visual_Scripting
    source:
      id: TrainARHelperChoices
      path: ''
      startLine: 9521
    summary: "\nThe available helper utility to select on the &quot;TrainAR: Object Helper&quot; nodes menu.\n"
    example: []
    syntax:
      content:
        CSharp: public enum TrainARHelperChoices
        VB: Public Enum TrainARHelperChoices
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ToggleVisibility
      commentId: F:Visual_Scripting.ObjectHelper.TrainARHelperChoices.ToggleVisibility
      language: CSharp
      name:
        CSharp: ToggleVisibility
        VB: ToggleVisibility
      nameWithType:
        CSharp: ObjectHelper.TrainARHelperChoices.ToggleVisibility
        VB: ObjectHelper.TrainARHelperChoices.ToggleVisibility
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ToggleVisibility
        VB: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ToggleVisibility
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ToggleVisibility
        path: ''
        startLine: 9523
      syntax:
        content:
          CSharp: ToggleVisibility = 0
          VB: ToggleVisibility = 0
        return:
          type: Visual_Scripting.ObjectHelper.TrainARHelperChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ToggleGrabbable
      commentId: F:Visual_Scripting.ObjectHelper.TrainARHelperChoices.ToggleGrabbable
      language: CSharp
      name:
        CSharp: ToggleGrabbable
        VB: ToggleGrabbable
      nameWithType:
        CSharp: ObjectHelper.TrainARHelperChoices.ToggleGrabbable
        VB: ObjectHelper.TrainARHelperChoices.ToggleGrabbable
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ToggleGrabbable
        VB: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ToggleGrabbable
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ToggleGrabbable
        path: ''
        startLine: 9524
      syntax:
        content:
          CSharp: ToggleGrabbable = 1
          VB: ToggleGrabbable = 1
        return:
          type: Visual_Scripting.ObjectHelper.TrainARHelperChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ToggleInteractable
      commentId: F:Visual_Scripting.ObjectHelper.TrainARHelperChoices.ToggleInteractable
      language: CSharp
      name:
        CSharp: ToggleInteractable
        VB: ToggleInteractable
      nameWithType:
        CSharp: ObjectHelper.TrainARHelperChoices.ToggleInteractable
        VB: ObjectHelper.TrainARHelperChoices.ToggleInteractable
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ToggleInteractable
        VB: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ToggleInteractable
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ToggleInteractable
        path: ''
        startLine: 9525
      syntax:
        content:
          CSharp: ToggleInteractable = 2
          VB: ToggleInteractable = 2
        return:
          type: Visual_Scripting.ObjectHelper.TrainARHelperChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ToggleCombinable
      commentId: F:Visual_Scripting.ObjectHelper.TrainARHelperChoices.ToggleCombinable
      language: CSharp
      name:
        CSharp: ToggleCombinable
        VB: ToggleCombinable
      nameWithType:
        CSharp: ObjectHelper.TrainARHelperChoices.ToggleCombinable
        VB: ObjectHelper.TrainARHelperChoices.ToggleCombinable
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ToggleCombinable
        VB: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ToggleCombinable
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ToggleCombinable
        path: ''
        startLine: 9526
      syntax:
        content:
          CSharp: ToggleCombinable = 3
          VB: ToggleCombinable = 3
        return:
          type: Visual_Scripting.ObjectHelper.TrainARHelperChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ChangeInteractionText
      commentId: F:Visual_Scripting.ObjectHelper.TrainARHelperChoices.ChangeInteractionText
      language: CSharp
      name:
        CSharp: ChangeInteractionText
        VB: ChangeInteractionText
      nameWithType:
        CSharp: ObjectHelper.TrainARHelperChoices.ChangeInteractionText
        VB: ObjectHelper.TrainARHelperChoices.ChangeInteractionText
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ChangeInteractionText
        VB: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ChangeInteractionText
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ChangeInteractionText
        path: ''
        startLine: 9527
      syntax:
        content:
          CSharp: ChangeInteractionText = 4
          VB: ChangeInteractionText = 4
        return:
          type: Visual_Scripting.ObjectHelper.TrainARHelperChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ChangeLerpingDistance
      commentId: F:Visual_Scripting.ObjectHelper.TrainARHelperChoices.ChangeLerpingDistance
      language: CSharp
      name:
        CSharp: ChangeLerpingDistance
        VB: ChangeLerpingDistance
      nameWithType:
        CSharp: ObjectHelper.TrainARHelperChoices.ChangeLerpingDistance
        VB: ObjectHelper.TrainARHelperChoices.ChangeLerpingDistance
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ChangeLerpingDistance
        VB: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ChangeLerpingDistance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ChangeLerpingDistance
        path: ''
        startLine: 9528
      syntax:
        content:
          CSharp: ChangeLerpingDistance = 5
          VB: ChangeLerpingDistance = 5
        return:
          type: Visual_Scripting.ObjectHelper.TrainARHelperChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ReplaceMeshAndTexture
      commentId: F:Visual_Scripting.ObjectHelper.TrainARHelperChoices.ReplaceMeshAndTexture
      language: CSharp
      name:
        CSharp: ReplaceMeshAndTexture
        VB: ReplaceMeshAndTexture
      nameWithType:
        CSharp: ObjectHelper.TrainARHelperChoices.ReplaceMeshAndTexture
        VB: ObjectHelper.TrainARHelperChoices.ReplaceMeshAndTexture
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ReplaceMeshAndTexture
        VB: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ReplaceMeshAndTexture
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ReplaceMeshAndTexture
        path: ''
        startLine: 9529
      syntax:
        content:
          CSharp: ReplaceMeshAndTexture = 6
          VB: ReplaceMeshAndTexture = 6
        return:
          type: Visual_Scripting.ObjectHelper.TrainARHelperChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Visual_Scripting.ObjectHelper.TrainARHelperChoices.GetObjectReference
      commentId: F:Visual_Scripting.ObjectHelper.TrainARHelperChoices.GetObjectReference
      language: CSharp
      name:
        CSharp: GetObjectReference
        VB: GetObjectReference
      nameWithType:
        CSharp: ObjectHelper.TrainARHelperChoices.GetObjectReference
        VB: ObjectHelper.TrainARHelperChoices.GetObjectReference
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.TrainARHelperChoices.GetObjectReference
        VB: Visual_Scripting.ObjectHelper.TrainARHelperChoices.GetObjectReference
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: GetObjectReference
        path: ''
        startLine: 9530
      syntax:
        content:
          CSharp: GetObjectReference = 7
          VB: GetObjectReference = 7
        return:
          type: Visual_Scripting.ObjectHelper.TrainARHelperChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Visual_Scripting.ObjectHelper.TrainARHelperChoices.FuseTwoObjects
      commentId: F:Visual_Scripting.ObjectHelper.TrainARHelperChoices.FuseTwoObjects
      language: CSharp
      name:
        CSharp: FuseTwoObjects
        VB: FuseTwoObjects
      nameWithType:
        CSharp: ObjectHelper.TrainARHelperChoices.FuseTwoObjects
        VB: ObjectHelper.TrainARHelperChoices.FuseTwoObjects
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.TrainARHelperChoices.FuseTwoObjects
        VB: Visual_Scripting.ObjectHelper.TrainARHelperChoices.FuseTwoObjects
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: FuseTwoObjects
        path: ''
        startLine: 9531
      syntax:
        content:
          CSharp: FuseTwoObjects = 8
          VB: FuseTwoObjects = 8
        return:
          type: Visual_Scripting.ObjectHelper.TrainARHelperChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Visual_Scripting.ObjectHelper.TrainARHelperChoices.DestroyObject
      commentId: F:Visual_Scripting.ObjectHelper.TrainARHelperChoices.DestroyObject
      language: CSharp
      name:
        CSharp: DestroyObject
        VB: DestroyObject
      nameWithType:
        CSharp: ObjectHelper.TrainARHelperChoices.DestroyObject
        VB: ObjectHelper.TrainARHelperChoices.DestroyObject
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.TrainARHelperChoices.DestroyObject
        VB: Visual_Scripting.ObjectHelper.TrainARHelperChoices.DestroyObject
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: DestroyObject
        path: ''
        startLine: 9532
      syntax:
        content:
          CSharp: DestroyObject = 9
          VB: DestroyObject = 9
        return:
          type: Visual_Scripting.ObjectHelper.TrainARHelperChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ReplaceTrainARObject
      commentId: F:Visual_Scripting.ObjectHelper.TrainARHelperChoices.ReplaceTrainARObject
      language: CSharp
      name:
        CSharp: ReplaceTrainARObject
        VB: ReplaceTrainARObject
      nameWithType:
        CSharp: ObjectHelper.TrainARHelperChoices.ReplaceTrainARObject
        VB: ObjectHelper.TrainARHelperChoices.ReplaceTrainARObject
      qualifiedName:
        CSharp: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ReplaceTrainARObject
        VB: Visual_Scripting.ObjectHelper.TrainARHelperChoices.ReplaceTrainARObject
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: ReplaceTrainARObject
        path: ''
        startLine: 9533
      syntax:
        content:
          CSharp: ReplaceTrainARObject = 10
          VB: ReplaceTrainARObject = 10
        return:
          type: Visual_Scripting.ObjectHelper.TrainARHelperChoices
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Visual_Scripting.VisualScriptingEventNames
    commentId: T:Visual_Scripting.VisualScriptingEventNames
    language: CSharp
    name:
      CSharp: VisualScriptingEventNames
      VB: VisualScriptingEventNames
    nameWithType:
      CSharp: VisualScriptingEventNames
      VB: VisualScriptingEventNames
    qualifiedName:
      CSharp: Visual_Scripting.VisualScriptingEventNames
      VB: Visual_Scripting.VisualScriptingEventNames
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Visual_Scripting
    source:
      id: VisualScriptingEventNames
      path: ''
      startLine: 9852
    summary: "\nRegistering a string name for your custom event to hook it to an event. You can save this class in a separated file and add multiple events to it as public static strings.\n"
    example: []
    syntax:
      content:
        CSharp: public static class VisualScriptingEventNames
        VB: Public Module VisualScriptingEventNames
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Visual_Scripting.VisualScriptingEventNames.OnboardingAndSetupCompleted
      commentId: F:Visual_Scripting.VisualScriptingEventNames.OnboardingAndSetupCompleted
      language: CSharp
      name:
        CSharp: OnboardingAndSetupCompleted
        VB: OnboardingAndSetupCompleted
      nameWithType:
        CSharp: VisualScriptingEventNames.OnboardingAndSetupCompleted
        VB: VisualScriptingEventNames.OnboardingAndSetupCompleted
      qualifiedName:
        CSharp: Visual_Scripting.VisualScriptingEventNames.OnboardingAndSetupCompleted
        VB: Visual_Scripting.VisualScriptingEventNames.OnboardingAndSetupCompleted
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: OnboardingAndSetupCompleted
        path: ''
        startLine: 9854
      syntax:
        content:
          CSharp: public static string OnboardingAndSetupCompleted
          VB: Public Shared OnboardingAndSetupCompleted As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Visual_Scripting.OnboardingSetup
    commentId: T:Visual_Scripting.OnboardingSetup
    language: CSharp
    name:
      CSharp: OnboardingSetup
      VB: OnboardingSetup
    nameWithType:
      CSharp: OnboardingSetup
      VB: OnboardingSetup
    qualifiedName:
      CSharp: Visual_Scripting.OnboardingSetup
      VB: Visual_Scripting.OnboardingSetup
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Visual_Scripting
    source:
      id: OnboardingSetup
      path: ''
      startLine: 9859
    summary: "\nAdds an EventHook for the onboarding setup that is used to trigger the start of the visual scripting stateflow after the onboarding was completed.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class OnboardingSetup : EventUnit<bool>'
        VB: >-
          Public Class OnboardingSetup

              Inherits EventUnit(Of Boolean)
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Visual_Scripting.OnboardingSetup.register
      commentId: P:Visual_Scripting.OnboardingSetup.register
      language: CSharp
      name:
        CSharp: register
        VB: register
      nameWithType:
        CSharp: OnboardingSetup.register
        VB: OnboardingSetup.register
      qualifiedName:
        CSharp: Visual_Scripting.OnboardingSetup.register
        VB: Visual_Scripting.OnboardingSetup.register
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: register
        path: ''
        startLine: 9863
      syntax:
        content:
          CSharp: protected override bool register { get; }
          VB: Protected Overrides ReadOnly Property register As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: Visual_Scripting.OnboardingSetup.register*
      modifiers:
        CSharp:
        - protected
        - override
        - get
        VB:
        - Protected
        - Overrides
        - ReadOnly
    - id: Visual_Scripting.OnboardingSetup.GetHook(GraphReference)
      commentId: M:Visual_Scripting.OnboardingSetup.GetHook(GraphReference)
      language: CSharp
      name:
        CSharp: GetHook(GraphReference)
        VB: GetHook(GraphReference)
      nameWithType:
        CSharp: OnboardingSetup.GetHook(GraphReference)
        VB: OnboardingSetup.GetHook(GraphReference)
      qualifiedName:
        CSharp: Visual_Scripting.OnboardingSetup.GetHook(GraphReference)
        VB: Visual_Scripting.OnboardingSetup.GetHook(GraphReference)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Visual_Scripting
      source:
        id: GetHook
        path: ''
        startLine: 9869
      summary: "\nAdding an EventHook with the name of the event to the list of visual scripting events.\n"
      example: []
      syntax:
        content:
          CSharp: public override EventHook GetHook(GraphReference reference)
          VB: Public Overrides Function GetHook(reference As GraphReference) As EventHook
        parameters:
        - id: reference
          type: Global.GraphReference
          description: ''
        return:
          type: Global.EventHook
          description: The event for visual scripting.
      overload: Visual_Scripting.OnboardingSetup.GetHook*
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
references:
  Editor.Scripts.ConvertToTrainARObject.AddConvertionContextItem*:
    name:
      CSharp:
      - id: Editor.Scripts.ConvertToTrainARObject.AddConvertionContextItem*
        name: AddConvertionContextItem
        nameWithType: ConvertToTrainARObject.AddConvertionContextItem
        qualifiedName: Editor.Scripts.ConvertToTrainARObject.AddConvertionContextItem
      VB:
      - id: Editor.Scripts.ConvertToTrainARObject.AddConvertionContextItem*
        name: AddConvertionContextItem
        nameWithType: ConvertToTrainARObject.AddConvertionContextItem
        qualifiedName: Editor.Scripts.ConvertToTrainARObject.AddConvertionContextItem
    isDefinition: true
    commentId: Overload:Editor.Scripts.ConvertToTrainARObject.AddConvertionContextItem
  Global.GameObject:
    name:
      CSharp:
      - id: Global.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: GameObject
        isExternal: true
      VB:
      - id: Global.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: GameObject
        isExternal: true
    isDefinition: true
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  Editor.Scripts.ConvertToTrainARObject.InitConversion*:
    name:
      CSharp:
      - id: Editor.Scripts.ConvertToTrainARObject.InitConversion*
        name: InitConversion
        nameWithType: ConvertToTrainARObject.InitConversion
        qualifiedName: Editor.Scripts.ConvertToTrainARObject.InitConversion
      VB:
      - id: Editor.Scripts.ConvertToTrainARObject.InitConversion*
        name: InitConversion
        nameWithType: ConvertToTrainARObject.InitConversion
        qualifiedName: Editor.Scripts.ConvertToTrainARObject.InitConversion
    isDefinition: true
    commentId: Overload:Editor.Scripts.ConvertToTrainARObject.InitConversion
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.IEnumerable{Mesh}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.Mesh
        name: Mesh
        nameWithType: Mesh
        qualifiedName: Mesh
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.Mesh
        name: Mesh
        nameWithType: Mesh
        qualifiedName: Mesh
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{Mesh}
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        nameWithType: Single
        qualifiedName: System.Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  Editor.Scripts.ConvertToTrainARObject.SimplifyMeshes*:
    name:
      CSharp:
      - id: Editor.Scripts.ConvertToTrainARObject.SimplifyMeshes*
        name: SimplifyMeshes
        nameWithType: ConvertToTrainARObject.SimplifyMeshes
        qualifiedName: Editor.Scripts.ConvertToTrainARObject.SimplifyMeshes
      VB:
      - id: Editor.Scripts.ConvertToTrainARObject.SimplifyMeshes*
        name: SimplifyMeshes
        nameWithType: ConvertToTrainARObject.SimplifyMeshes
        qualifiedName: Editor.Scripts.ConvertToTrainARObject.SimplifyMeshes
    isDefinition: true
    commentId: Overload:Editor.Scripts.ConvertToTrainARObject.SimplifyMeshes
  Editor.Scripts.ConvertToTrainARObject:
    name:
      CSharp:
      - id: Editor.Scripts.ConvertToTrainARObject
        name: ConvertToTrainARObject
        nameWithType: ConvertToTrainARObject
        qualifiedName: Editor.Scripts.ConvertToTrainARObject
      VB:
      - id: Editor.Scripts.ConvertToTrainARObject
        name: ConvertToTrainARObject
        nameWithType: ConvertToTrainARObject
        qualifiedName: Editor.Scripts.ConvertToTrainARObject
    isDefinition: true
    commentId: T:Editor.Scripts.ConvertToTrainARObject
  Editor.Scripts.EditorTrainARObjectToolbar.OnCreated*:
    name:
      CSharp:
      - id: Editor.Scripts.EditorTrainARObjectToolbar.OnCreated*
        name: OnCreated
        nameWithType: EditorTrainARObjectToolbar.OnCreated
        qualifiedName: Editor.Scripts.EditorTrainARObjectToolbar.OnCreated
      VB:
      - id: Editor.Scripts.EditorTrainARObjectToolbar.OnCreated*
        name: OnCreated
        nameWithType: EditorTrainARObjectToolbar.OnCreated
        qualifiedName: Editor.Scripts.EditorTrainARObjectToolbar.OnCreated
    isDefinition: true
    commentId: Overload:Editor.Scripts.EditorTrainARObjectToolbar.OnCreated
  Editor.Scripts.EditorTrainARObjectToolbar.OnWillBeDestroyed*:
    name:
      CSharp:
      - id: Editor.Scripts.EditorTrainARObjectToolbar.OnWillBeDestroyed*
        name: OnWillBeDestroyed
        nameWithType: EditorTrainARObjectToolbar.OnWillBeDestroyed
        qualifiedName: Editor.Scripts.EditorTrainARObjectToolbar.OnWillBeDestroyed
      VB:
      - id: Editor.Scripts.EditorTrainARObjectToolbar.OnWillBeDestroyed*
        name: OnWillBeDestroyed
        nameWithType: EditorTrainARObjectToolbar.OnWillBeDestroyed
        qualifiedName: Editor.Scripts.EditorTrainARObjectToolbar.OnWillBeDestroyed
    isDefinition: true
    commentId: Overload:Editor.Scripts.EditorTrainARObjectToolbar.OnWillBeDestroyed
  Editor.Scripts.EditorTrainARObjectToolbar:
    name:
      CSharp:
      - id: Editor.Scripts.EditorTrainARObjectToolbar
        name: EditorTrainARObjectToolbar
        nameWithType: EditorTrainARObjectToolbar
        qualifiedName: Editor.Scripts.EditorTrainARObjectToolbar
      VB:
      - id: Editor.Scripts.EditorTrainARObjectToolbar
        name: EditorTrainARObjectToolbar
        nameWithType: EditorTrainARObjectToolbar
        qualifiedName: Editor.Scripts.EditorTrainARObjectToolbar
    isDefinition: true
    commentId: T:Editor.Scripts.EditorTrainARObjectToolbar
  Editor.Scripts.MeshCombinerEditor.OnInspectorGUI*:
    name:
      CSharp:
      - id: Editor.Scripts.MeshCombinerEditor.OnInspectorGUI*
        name: OnInspectorGUI
        nameWithType: MeshCombinerEditor.OnInspectorGUI
        qualifiedName: Editor.Scripts.MeshCombinerEditor.OnInspectorGUI
      VB:
      - id: Editor.Scripts.MeshCombinerEditor.OnInspectorGUI*
        name: OnInspectorGUI
        nameWithType: MeshCombinerEditor.OnInspectorGUI
        qualifiedName: Editor.Scripts.MeshCombinerEditor.OnInspectorGUI
    isDefinition: true
    commentId: Overload:Editor.Scripts.MeshCombinerEditor.OnInspectorGUI
  Global.Mesh:
    name:
      CSharp:
      - id: Global.Mesh
        name: Mesh
        nameWithType: Mesh
        qualifiedName: Mesh
        isExternal: true
      VB:
      - id: Global.Mesh
        name: Mesh
        nameWithType: Mesh
        qualifiedName: Mesh
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Mesh'
  Editor.Scripts.MeshCombinerEditor.SaveCombinedMesh*:
    name:
      CSharp:
      - id: Editor.Scripts.MeshCombinerEditor.SaveCombinedMesh*
        name: SaveCombinedMesh
        nameWithType: MeshCombinerEditor.SaveCombinedMesh
        qualifiedName: Editor.Scripts.MeshCombinerEditor.SaveCombinedMesh
      VB:
      - id: Editor.Scripts.MeshCombinerEditor.SaveCombinedMesh*
        name: SaveCombinedMesh
        nameWithType: MeshCombinerEditor.SaveCombinedMesh
        qualifiedName: Editor.Scripts.MeshCombinerEditor.SaveCombinedMesh
    isDefinition: true
    commentId: Overload:Editor.Scripts.MeshCombinerEditor.SaveCombinedMesh
  Editor.Scripts.MeshCombinerEditor:
    name:
      CSharp:
      - id: Editor.Scripts.MeshCombinerEditor
        name: MeshCombinerEditor
        nameWithType: MeshCombinerEditor
        qualifiedName: Editor.Scripts.MeshCombinerEditor
      VB:
      - id: Editor.Scripts.MeshCombinerEditor
        name: MeshCombinerEditor
        nameWithType: MeshCombinerEditor
        qualifiedName: Editor.Scripts.MeshCombinerEditor
    isDefinition: true
    commentId: T:Editor.Scripts.MeshCombinerEditor
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  Editor.Scripts.OpenAuthoringToolOnLoad:
    name:
      CSharp:
      - id: Editor.Scripts.OpenAuthoringToolOnLoad
        name: OpenAuthoringToolOnLoad
        nameWithType: OpenAuthoringToolOnLoad
        qualifiedName: Editor.Scripts.OpenAuthoringToolOnLoad
      VB:
      - id: Editor.Scripts.OpenAuthoringToolOnLoad
        name: OpenAuthoringToolOnLoad
        nameWithType: OpenAuthoringToolOnLoad
        qualifiedName: Editor.Scripts.OpenAuthoringToolOnLoad
    isDefinition: true
    commentId: T:Editor.Scripts.OpenAuthoringToolOnLoad
  Editor.Scripts.PlayModeButtonOverride.ShowDialogBoxForBuilding*:
    name:
      CSharp:
      - id: Editor.Scripts.PlayModeButtonOverride.ShowDialogBoxForBuilding*
        name: ShowDialogBoxForBuilding
        nameWithType: PlayModeButtonOverride.ShowDialogBoxForBuilding
        qualifiedName: Editor.Scripts.PlayModeButtonOverride.ShowDialogBoxForBuilding
      VB:
      - id: Editor.Scripts.PlayModeButtonOverride.ShowDialogBoxForBuilding*
        name: ShowDialogBoxForBuilding
        nameWithType: PlayModeButtonOverride.ShowDialogBoxForBuilding
        qualifiedName: Editor.Scripts.PlayModeButtonOverride.ShowDialogBoxForBuilding
    isDefinition: true
    commentId: Overload:Editor.Scripts.PlayModeButtonOverride.ShowDialogBoxForBuilding
  Editor.Scripts.PlayModeButtonOverride.BuildAndDeployProjectToDevice*:
    name:
      CSharp:
      - id: Editor.Scripts.PlayModeButtonOverride.BuildAndDeployProjectToDevice*
        name: BuildAndDeployProjectToDevice
        nameWithType: PlayModeButtonOverride.BuildAndDeployProjectToDevice
        qualifiedName: Editor.Scripts.PlayModeButtonOverride.BuildAndDeployProjectToDevice
      VB:
      - id: Editor.Scripts.PlayModeButtonOverride.BuildAndDeployProjectToDevice*
        name: BuildAndDeployProjectToDevice
        nameWithType: PlayModeButtonOverride.BuildAndDeployProjectToDevice
        qualifiedName: Editor.Scripts.PlayModeButtonOverride.BuildAndDeployProjectToDevice
    isDefinition: true
    commentId: Overload:Editor.Scripts.PlayModeButtonOverride.BuildAndDeployProjectToDevice
  Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToIOS*:
    name:
      CSharp:
      - id: Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToIOS*
        name: SwitchBuildTargetToIOS
        nameWithType: PlayModeButtonOverride.SwitchBuildTargetToIOS
        qualifiedName: Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToIOS
      VB:
      - id: Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToIOS*
        name: SwitchBuildTargetToIOS
        nameWithType: PlayModeButtonOverride.SwitchBuildTargetToIOS
        qualifiedName: Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToIOS
    isDefinition: true
    commentId: Overload:Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToIOS
  Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToAndroid*:
    name:
      CSharp:
      - id: Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToAndroid*
        name: SwitchBuildTargetToAndroid
        nameWithType: PlayModeButtonOverride.SwitchBuildTargetToAndroid
        qualifiedName: Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToAndroid
      VB:
      - id: Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToAndroid*
        name: SwitchBuildTargetToAndroid
        nameWithType: PlayModeButtonOverride.SwitchBuildTargetToAndroid
        qualifiedName: Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToAndroid
    isDefinition: true
    commentId: Overload:Editor.Scripts.PlayModeButtonOverride.SwitchBuildTargetToAndroid
  Editor.Scripts.PlayModeButtonOverride:
    name:
      CSharp:
      - id: Editor.Scripts.PlayModeButtonOverride
        name: PlayModeButtonOverride
        nameWithType: PlayModeButtonOverride
        qualifiedName: Editor.Scripts.PlayModeButtonOverride
      VB:
      - id: Editor.Scripts.PlayModeButtonOverride
        name: PlayModeButtonOverride
        nameWithType: PlayModeButtonOverride
        qualifiedName: Editor.Scripts.PlayModeButtonOverride
    isDefinition: true
    commentId: T:Editor.Scripts.PlayModeButtonOverride
  Editor.Scripts.StateRequestSimulatorEditor.OnInspectorGUI*:
    name:
      CSharp:
      - id: Editor.Scripts.StateRequestSimulatorEditor.OnInspectorGUI*
        name: OnInspectorGUI
        nameWithType: StateRequestSimulatorEditor.OnInspectorGUI
        qualifiedName: Editor.Scripts.StateRequestSimulatorEditor.OnInspectorGUI
      VB:
      - id: Editor.Scripts.StateRequestSimulatorEditor.OnInspectorGUI*
        name: OnInspectorGUI
        nameWithType: StateRequestSimulatorEditor.OnInspectorGUI
        qualifiedName: Editor.Scripts.StateRequestSimulatorEditor.OnInspectorGUI
    isDefinition: true
    commentId: Overload:Editor.Scripts.StateRequestSimulatorEditor.OnInspectorGUI
  Editor.Scripts.StateRequestSimulatorEditor:
    name:
      CSharp:
      - id: Editor.Scripts.StateRequestSimulatorEditor
        name: StateRequestSimulatorEditor
        nameWithType: StateRequestSimulatorEditor
        qualifiedName: Editor.Scripts.StateRequestSimulatorEditor
      VB:
      - id: Editor.Scripts.StateRequestSimulatorEditor
        name: StateRequestSimulatorEditor
        nameWithType: StateRequestSimulatorEditor
        qualifiedName: Editor.Scripts.StateRequestSimulatorEditor
    isDefinition: true
    commentId: T:Editor.Scripts.StateRequestSimulatorEditor
  Global.VisualElement:
    name:
      CSharp:
      - id: Global.VisualElement
        name: VisualElement
        nameWithType: VisualElement
        qualifiedName: VisualElement
        isExternal: true
      VB:
      - id: Global.VisualElement
        name: VisualElement
        nameWithType: VisualElement
        qualifiedName: VisualElement
        isExternal: true
    isDefinition: true
  Editor.Scripts.TrainARConvertObjectToolbar.CreatePanelContent*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainARConvertObjectToolbar.CreatePanelContent*
        name: CreatePanelContent
        nameWithType: TrainARConvertObjectToolbar.CreatePanelContent
        qualifiedName: Editor.Scripts.TrainARConvertObjectToolbar.CreatePanelContent
      VB:
      - id: Editor.Scripts.TrainARConvertObjectToolbar.CreatePanelContent*
        name: CreatePanelContent
        nameWithType: TrainARConvertObjectToolbar.CreatePanelContent
        qualifiedName: Editor.Scripts.TrainARConvertObjectToolbar.CreatePanelContent
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainARConvertObjectToolbar.CreatePanelContent
  Editor.Scripts.TrainARConvertObjectToolbar.OnCreated*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainARConvertObjectToolbar.OnCreated*
        name: OnCreated
        nameWithType: TrainARConvertObjectToolbar.OnCreated
        qualifiedName: Editor.Scripts.TrainARConvertObjectToolbar.OnCreated
      VB:
      - id: Editor.Scripts.TrainARConvertObjectToolbar.OnCreated*
        name: OnCreated
        nameWithType: TrainARConvertObjectToolbar.OnCreated
        qualifiedName: Editor.Scripts.TrainARConvertObjectToolbar.OnCreated
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainARConvertObjectToolbar.OnCreated
  Editor.Scripts.TrainARConvertObjectToolbar.OnWillBeDestroyed*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainARConvertObjectToolbar.OnWillBeDestroyed*
        name: OnWillBeDestroyed
        nameWithType: TrainARConvertObjectToolbar.OnWillBeDestroyed
        qualifiedName: Editor.Scripts.TrainARConvertObjectToolbar.OnWillBeDestroyed
      VB:
      - id: Editor.Scripts.TrainARConvertObjectToolbar.OnWillBeDestroyed*
        name: OnWillBeDestroyed
        nameWithType: TrainARConvertObjectToolbar.OnWillBeDestroyed
        qualifiedName: Editor.Scripts.TrainARConvertObjectToolbar.OnWillBeDestroyed
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainARConvertObjectToolbar.OnWillBeDestroyed
  Editor.Scripts.TrainARConvertObjectToolbar:
    name:
      CSharp:
      - id: Editor.Scripts.TrainARConvertObjectToolbar
        name: TrainARConvertObjectToolbar
        nameWithType: TrainARConvertObjectToolbar
        qualifiedName: Editor.Scripts.TrainARConvertObjectToolbar
      VB:
      - id: Editor.Scripts.TrainARConvertObjectToolbar
        name: TrainARConvertObjectToolbar
        nameWithType: TrainARConvertObjectToolbar
        qualifiedName: Editor.Scripts.TrainARConvertObjectToolbar
    isDefinition: true
    commentId: T:Editor.Scripts.TrainARConvertObjectToolbar
  Editor.Scripts.TrainAREditorMenu.BuildToDevice*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainAREditorMenu.BuildToDevice*
        name: BuildToDevice
        nameWithType: TrainAREditorMenu.BuildToDevice
        qualifiedName: Editor.Scripts.TrainAREditorMenu.BuildToDevice
      VB:
      - id: Editor.Scripts.TrainAREditorMenu.BuildToDevice*
        name: BuildToDevice
        nameWithType: TrainAREditorMenu.BuildToDevice
        qualifiedName: Editor.Scripts.TrainAREditorMenu.BuildToDevice
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainAREditorMenu.BuildToDevice
  Editor.Scripts.TrainAREditorMenu.SwitchToAndroid*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainAREditorMenu.SwitchToAndroid*
        name: SwitchToAndroid
        nameWithType: TrainAREditorMenu.SwitchToAndroid
        qualifiedName: Editor.Scripts.TrainAREditorMenu.SwitchToAndroid
      VB:
      - id: Editor.Scripts.TrainAREditorMenu.SwitchToAndroid*
        name: SwitchToAndroid
        nameWithType: TrainAREditorMenu.SwitchToAndroid
        qualifiedName: Editor.Scripts.TrainAREditorMenu.SwitchToAndroid
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainAREditorMenu.SwitchToAndroid
  Editor.Scripts.TrainAREditorMenu.SwitchToIOS*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainAREditorMenu.SwitchToIOS*
        name: SwitchToIOS
        nameWithType: TrainAREditorMenu.SwitchToIOS
        qualifiedName: Editor.Scripts.TrainAREditorMenu.SwitchToIOS
      VB:
      - id: Editor.Scripts.TrainAREditorMenu.SwitchToIOS*
        name: SwitchToIOS
        nameWithType: TrainAREditorMenu.SwitchToIOS
        qualifiedName: Editor.Scripts.TrainAREditorMenu.SwitchToIOS
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainAREditorMenu.SwitchToIOS
  Editor.Scripts.TrainAREditorMenu.SwitchToTrainARMode*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainAREditorMenu.SwitchToTrainARMode*
        name: SwitchToTrainARMode
        nameWithType: TrainAREditorMenu.SwitchToTrainARMode
        qualifiedName: Editor.Scripts.TrainAREditorMenu.SwitchToTrainARMode
      VB:
      - id: Editor.Scripts.TrainAREditorMenu.SwitchToTrainARMode*
        name: SwitchToTrainARMode
        nameWithType: TrainAREditorMenu.SwitchToTrainARMode
        qualifiedName: Editor.Scripts.TrainAREditorMenu.SwitchToTrainARMode
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainAREditorMenu.SwitchToTrainARMode
  Editor.Scripts.TrainAREditorMenu.SwitchToUnityMode*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainAREditorMenu.SwitchToUnityMode*
        name: SwitchToUnityMode
        nameWithType: TrainAREditorMenu.SwitchToUnityMode
        qualifiedName: Editor.Scripts.TrainAREditorMenu.SwitchToUnityMode
      VB:
      - id: Editor.Scripts.TrainAREditorMenu.SwitchToUnityMode*
        name: SwitchToUnityMode
        nameWithType: TrainAREditorMenu.SwitchToUnityMode
        qualifiedName: Editor.Scripts.TrainAREditorMenu.SwitchToUnityMode
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainAREditorMenu.SwitchToUnityMode
  Editor.Scripts.TrainAREditorMenu.ResetTrainARSceneToAuthoringToolDefault*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainAREditorMenu.ResetTrainARSceneToAuthoringToolDefault*
        name: ResetTrainARSceneToAuthoringToolDefault
        nameWithType: TrainAREditorMenu.ResetTrainARSceneToAuthoringToolDefault
        qualifiedName: Editor.Scripts.TrainAREditorMenu.ResetTrainARSceneToAuthoringToolDefault
      VB:
      - id: Editor.Scripts.TrainAREditorMenu.ResetTrainARSceneToAuthoringToolDefault*
        name: ResetTrainARSceneToAuthoringToolDefault
        nameWithType: TrainAREditorMenu.ResetTrainARSceneToAuthoringToolDefault
        qualifiedName: Editor.Scripts.TrainAREditorMenu.ResetTrainARSceneToAuthoringToolDefault
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainAREditorMenu.ResetTrainARSceneToAuthoringToolDefault
  Editor.Scripts.TrainAREditorMenu.HideTrainARReferenceScene*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainAREditorMenu.HideTrainARReferenceScene*
        name: HideTrainARReferenceScene
        nameWithType: TrainAREditorMenu.HideTrainARReferenceScene
        qualifiedName: Editor.Scripts.TrainAREditorMenu.HideTrainARReferenceScene
      VB:
      - id: Editor.Scripts.TrainAREditorMenu.HideTrainARReferenceScene*
        name: HideTrainARReferenceScene
        nameWithType: TrainAREditorMenu.HideTrainARReferenceScene
        qualifiedName: Editor.Scripts.TrainAREditorMenu.HideTrainARReferenceScene
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainAREditorMenu.HideTrainARReferenceScene
  Editor.Scripts.TrainAREditorMenu.OpenTrainARScene*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainAREditorMenu.OpenTrainARScene*
        name: OpenTrainARScene
        nameWithType: TrainAREditorMenu.OpenTrainARScene
        qualifiedName: Editor.Scripts.TrainAREditorMenu.OpenTrainARScene
      VB:
      - id: Editor.Scripts.TrainAREditorMenu.OpenTrainARScene*
        name: OpenTrainARScene
        nameWithType: TrainAREditorMenu.OpenTrainARScene
        qualifiedName: Editor.Scripts.TrainAREditorMenu.OpenTrainARScene
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainAREditorMenu.OpenTrainARScene
  Editor.Scripts.TrainAREditorMenu.ResetStatemachineToDefault*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainAREditorMenu.ResetStatemachineToDefault*
        name: ResetStatemachineToDefault
        nameWithType: TrainAREditorMenu.ResetStatemachineToDefault
        qualifiedName: Editor.Scripts.TrainAREditorMenu.ResetStatemachineToDefault
      VB:
      - id: Editor.Scripts.TrainAREditorMenu.ResetStatemachineToDefault*
        name: ResetStatemachineToDefault
        nameWithType: TrainAREditorMenu.ResetStatemachineToDefault
        qualifiedName: Editor.Scripts.TrainAREditorMenu.ResetStatemachineToDefault
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainAREditorMenu.ResetStatemachineToDefault
  Editor.Scripts.TrainAREditorMenu.HideFrameworkHierarchy*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainAREditorMenu.HideFrameworkHierarchy*
        name: HideFrameworkHierarchy
        nameWithType: TrainAREditorMenu.HideFrameworkHierarchy
        qualifiedName: Editor.Scripts.TrainAREditorMenu.HideFrameworkHierarchy
      VB:
      - id: Editor.Scripts.TrainAREditorMenu.HideFrameworkHierarchy*
        name: HideFrameworkHierarchy
        nameWithType: TrainAREditorMenu.HideFrameworkHierarchy
        qualifiedName: Editor.Scripts.TrainAREditorMenu.HideFrameworkHierarchy
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainAREditorMenu.HideFrameworkHierarchy
  Editor.Scripts.TrainAREditorMenu.ShowFrameworkHierarchy*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainAREditorMenu.ShowFrameworkHierarchy*
        name: ShowFrameworkHierarchy
        nameWithType: TrainAREditorMenu.ShowFrameworkHierarchy
        qualifiedName: Editor.Scripts.TrainAREditorMenu.ShowFrameworkHierarchy
      VB:
      - id: Editor.Scripts.TrainAREditorMenu.ShowFrameworkHierarchy*
        name: ShowFrameworkHierarchy
        nameWithType: TrainAREditorMenu.ShowFrameworkHierarchy
        qualifiedName: Editor.Scripts.TrainAREditorMenu.ShowFrameworkHierarchy
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainAREditorMenu.ShowFrameworkHierarchy
  Editor.Scripts.TrainAREditorMenu.OpenDocumentation*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainAREditorMenu.OpenDocumentation*
        name: OpenDocumentation
        nameWithType: TrainAREditorMenu.OpenDocumentation
        qualifiedName: Editor.Scripts.TrainAREditorMenu.OpenDocumentation
      VB:
      - id: Editor.Scripts.TrainAREditorMenu.OpenDocumentation*
        name: OpenDocumentation
        nameWithType: TrainAREditorMenu.OpenDocumentation
        qualifiedName: Editor.Scripts.TrainAREditorMenu.OpenDocumentation
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainAREditorMenu.OpenDocumentation
  Editor.Scripts.TrainAREditorMenu:
    name:
      CSharp:
      - id: Editor.Scripts.TrainAREditorMenu
        name: TrainAREditorMenu
        nameWithType: TrainAREditorMenu
        qualifiedName: Editor.Scripts.TrainAREditorMenu
      VB:
      - id: Editor.Scripts.TrainAREditorMenu
        name: TrainAREditorMenu
        nameWithType: TrainAREditorMenu
        qualifiedName: Editor.Scripts.TrainAREditorMenu
    isDefinition: true
    commentId: T:Editor.Scripts.TrainAREditorMenu
  Editor.Scripts.TrainARObjectConversionWindow.WindowWithObjectAlreadyExists*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainARObjectConversionWindow.WindowWithObjectAlreadyExists*
        name: WindowWithObjectAlreadyExists
        nameWithType: TrainARObjectConversionWindow.WindowWithObjectAlreadyExists
        qualifiedName: Editor.Scripts.TrainARObjectConversionWindow.WindowWithObjectAlreadyExists
      VB:
      - id: Editor.Scripts.TrainARObjectConversionWindow.WindowWithObjectAlreadyExists*
        name: WindowWithObjectAlreadyExists
        nameWithType: TrainARObjectConversionWindow.WindowWithObjectAlreadyExists
        qualifiedName: Editor.Scripts.TrainARObjectConversionWindow.WindowWithObjectAlreadyExists
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainARObjectConversionWindow.WindowWithObjectAlreadyExists
  Editor.Scripts.TrainARObjectConversionWindow:
    name:
      CSharp:
      - id: Editor.Scripts.TrainARObjectConversionWindow
        name: TrainARObjectConversionWindow
        nameWithType: TrainARObjectConversionWindow
        qualifiedName: Editor.Scripts.TrainARObjectConversionWindow
      VB:
      - id: Editor.Scripts.TrainARObjectConversionWindow
        name: TrainARObjectConversionWindow
        nameWithType: TrainARObjectConversionWindow
        qualifiedName: Editor.Scripts.TrainARObjectConversionWindow
    isDefinition: true
    commentId: T:Editor.Scripts.TrainARObjectConversionWindow
  Editor.Scripts.TrainARObjectOffsetToolbar.CreatePanelContent*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainARObjectOffsetToolbar.CreatePanelContent*
        name: CreatePanelContent
        nameWithType: TrainARObjectOffsetToolbar.CreatePanelContent
        qualifiedName: Editor.Scripts.TrainARObjectOffsetToolbar.CreatePanelContent
      VB:
      - id: Editor.Scripts.TrainARObjectOffsetToolbar.CreatePanelContent*
        name: CreatePanelContent
        nameWithType: TrainARObjectOffsetToolbar.CreatePanelContent
        qualifiedName: Editor.Scripts.TrainARObjectOffsetToolbar.CreatePanelContent
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainARObjectOffsetToolbar.CreatePanelContent
  Editor.Scripts.TrainARObjectOffsetToolbar.OnCreated*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainARObjectOffsetToolbar.OnCreated*
        name: OnCreated
        nameWithType: TrainARObjectOffsetToolbar.OnCreated
        qualifiedName: Editor.Scripts.TrainARObjectOffsetToolbar.OnCreated
      VB:
      - id: Editor.Scripts.TrainARObjectOffsetToolbar.OnCreated*
        name: OnCreated
        nameWithType: TrainARObjectOffsetToolbar.OnCreated
        qualifiedName: Editor.Scripts.TrainARObjectOffsetToolbar.OnCreated
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainARObjectOffsetToolbar.OnCreated
  Editor.Scripts.TrainARObjectOffsetToolbar.OnWillBeDestroyed*:
    name:
      CSharp:
      - id: Editor.Scripts.TrainARObjectOffsetToolbar.OnWillBeDestroyed*
        name: OnWillBeDestroyed
        nameWithType: TrainARObjectOffsetToolbar.OnWillBeDestroyed
        qualifiedName: Editor.Scripts.TrainARObjectOffsetToolbar.OnWillBeDestroyed
      VB:
      - id: Editor.Scripts.TrainARObjectOffsetToolbar.OnWillBeDestroyed*
        name: OnWillBeDestroyed
        nameWithType: TrainARObjectOffsetToolbar.OnWillBeDestroyed
        qualifiedName: Editor.Scripts.TrainARObjectOffsetToolbar.OnWillBeDestroyed
    isDefinition: true
    commentId: Overload:Editor.Scripts.TrainARObjectOffsetToolbar.OnWillBeDestroyed
  Editor.Scripts.TrainARObjectOffsetToolbar:
    name:
      CSharp:
      - id: Editor.Scripts.TrainARObjectOffsetToolbar
        name: TrainARObjectOffsetToolbar
        nameWithType: TrainARObjectOffsetToolbar
        qualifiedName: Editor.Scripts.TrainARObjectOffsetToolbar
      VB:
      - id: Editor.Scripts.TrainARObjectOffsetToolbar
        name: TrainARObjectOffsetToolbar
        nameWithType: TrainARObjectOffsetToolbar
        qualifiedName: Editor.Scripts.TrainARObjectOffsetToolbar
    isDefinition: true
    commentId: T:Editor.Scripts.TrainARObjectOffsetToolbar
  Editor.Scripts:
    name:
      CSharp:
      - name: Editor.Scripts
        nameWithType: Editor.Scripts
        qualifiedName: Editor.Scripts
      VB:
      - name: Editor.Scripts
        nameWithType: Editor.Scripts
        qualifiedName: Editor.Scripts
    isDefinition: true
    commentId: N:Editor.Scripts
  Global.AudioClip:
    name:
      CSharp:
      - id: Global.AudioClip
        name: AudioClip
        nameWithType: AudioClip
        qualifiedName: AudioClip
        isExternal: true
      VB:
      - id: Global.AudioClip
        name: AudioClip
        nameWithType: AudioClip
        qualifiedName: AudioClip
        isExternal: true
    isDefinition: true
  Interaction.AudioController:
    name:
      CSharp:
      - id: Interaction.AudioController
        name: AudioController
        nameWithType: AudioController
        qualifiedName: Interaction.AudioController
      VB:
      - id: Interaction.AudioController
        name: AudioController
        nameWithType: AudioController
        qualifiedName: Interaction.AudioController
    isDefinition: true
    commentId: T:Interaction.AudioController
  Global.BoxCollider:
    name:
      CSharp:
      - id: Global.BoxCollider
        name: BoxCollider
        nameWithType: BoxCollider
        qualifiedName: BoxCollider
        isExternal: true
      VB:
      - id: Global.BoxCollider
        name: BoxCollider
        nameWithType: BoxCollider
        qualifiedName: BoxCollider
        isExternal: true
    isDefinition: true
    commentId: '!:Global.BoxCollider'
  Interaction.CollisionController:
    name:
      CSharp:
      - id: Interaction.CollisionController
        name: CollisionController
        nameWithType: CollisionController
        qualifiedName: Interaction.CollisionController
      VB:
      - id: Interaction.CollisionController
        name: CollisionController
        nameWithType: CollisionController
        qualifiedName: Interaction.CollisionController
    isDefinition: true
    commentId: T:Interaction.CollisionController
  System.ValueType:
    name:
      CSharp:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
      VB:
      - id: System.ValueType
        name: ValueType
        nameWithType: ValueType
        qualifiedName: System.ValueType
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ValueType
  Interaction.CollisionController.Intersection.#ctor*:
    name:
      CSharp:
      - id: Interaction.CollisionController.Intersection.#ctor*
        name: Intersection
        nameWithType: CollisionController.Intersection.Intersection
        qualifiedName: Interaction.CollisionController.Intersection.Intersection
      VB:
      - id: Interaction.CollisionController.Intersection.#ctor*
        name: Intersection
        nameWithType: CollisionController.Intersection.Intersection
        qualifiedName: Interaction.CollisionController.Intersection.Intersection
    isDefinition: true
    commentId: Overload:Interaction.CollisionController.Intersection.#ctor
  Interaction.CollisionController.Intersection.SetIntersectedObject*:
    name:
      CSharp:
      - id: Interaction.CollisionController.Intersection.SetIntersectedObject*
        name: SetIntersectedObject
        nameWithType: CollisionController.Intersection.SetIntersectedObject
        qualifiedName: Interaction.CollisionController.Intersection.SetIntersectedObject
      VB:
      - id: Interaction.CollisionController.Intersection.SetIntersectedObject*
        name: SetIntersectedObject
        nameWithType: CollisionController.Intersection.SetIntersectedObject
        qualifiedName: Interaction.CollisionController.Intersection.SetIntersectedObject
    isDefinition: true
    commentId: Overload:Interaction.CollisionController.Intersection.SetIntersectedObject
  Interaction.CollisionController.Intersection.SetIntersectionDetected*:
    name:
      CSharp:
      - id: Interaction.CollisionController.Intersection.SetIntersectionDetected*
        name: SetIntersectionDetected
        nameWithType: CollisionController.Intersection.SetIntersectionDetected
        qualifiedName: Interaction.CollisionController.Intersection.SetIntersectionDetected
      VB:
      - id: Interaction.CollisionController.Intersection.SetIntersectionDetected*
        name: SetIntersectionDetected
        nameWithType: CollisionController.Intersection.SetIntersectionDetected
        qualifiedName: Interaction.CollisionController.Intersection.SetIntersectionDetected
    isDefinition: true
    commentId: Overload:Interaction.CollisionController.Intersection.SetIntersectionDetected
  Interaction.CollisionController.Intersection.GetIntersectedObject*:
    name:
      CSharp:
      - id: Interaction.CollisionController.Intersection.GetIntersectedObject*
        name: GetIntersectedObject
        nameWithType: CollisionController.Intersection.GetIntersectedObject
        qualifiedName: Interaction.CollisionController.Intersection.GetIntersectedObject
      VB:
      - id: Interaction.CollisionController.Intersection.GetIntersectedObject*
        name: GetIntersectedObject
        nameWithType: CollisionController.Intersection.GetIntersectedObject
        qualifiedName: Interaction.CollisionController.Intersection.GetIntersectedObject
    isDefinition: true
    commentId: Overload:Interaction.CollisionController.Intersection.GetIntersectedObject
  Interaction.CollisionController.Intersection.GetIntersectionDetected*:
    name:
      CSharp:
      - id: Interaction.CollisionController.Intersection.GetIntersectionDetected*
        name: GetIntersectionDetected
        nameWithType: CollisionController.Intersection.GetIntersectionDetected
        qualifiedName: Interaction.CollisionController.Intersection.GetIntersectionDetected
      VB:
      - id: Interaction.CollisionController.Intersection.GetIntersectionDetected*
        name: GetIntersectionDetected
        nameWithType: CollisionController.Intersection.GetIntersectionDetected
        qualifiedName: Interaction.CollisionController.Intersection.GetIntersectionDetected
    isDefinition: true
    commentId: Overload:Interaction.CollisionController.Intersection.GetIntersectionDetected
  Interaction.CollisionController.Intersection:
    name:
      CSharp:
      - id: Interaction.CollisionController.Intersection
        name: CollisionController.Intersection
        nameWithType: CollisionController.Intersection
        qualifiedName: Interaction.CollisionController.Intersection
      VB:
      - id: Interaction.CollisionController.Intersection
        name: CollisionController.Intersection
        nameWithType: CollisionController.Intersection
        qualifiedName: Interaction.CollisionController.Intersection
    isDefinition: true
    parent: Interaction
    commentId: T:Interaction.CollisionController.Intersection
  Interaction.CrosshairController.ActivateCrosshair*:
    name:
      CSharp:
      - id: Interaction.CrosshairController.ActivateCrosshair*
        name: ActivateCrosshair
        nameWithType: CrosshairController.ActivateCrosshair
        qualifiedName: Interaction.CrosshairController.ActivateCrosshair
      VB:
      - id: Interaction.CrosshairController.ActivateCrosshair*
        name: ActivateCrosshair
        nameWithType: CrosshairController.ActivateCrosshair
        qualifiedName: Interaction.CrosshairController.ActivateCrosshair
    isDefinition: true
    commentId: Overload:Interaction.CrosshairController.ActivateCrosshair
  Interaction.CrosshairController.DeactivateCrosshair*:
    name:
      CSharp:
      - id: Interaction.CrosshairController.DeactivateCrosshair*
        name: DeactivateCrosshair
        nameWithType: CrosshairController.DeactivateCrosshair
        qualifiedName: Interaction.CrosshairController.DeactivateCrosshair
      VB:
      - id: Interaction.CrosshairController.DeactivateCrosshair*
        name: DeactivateCrosshair
        nameWithType: CrosshairController.DeactivateCrosshair
        qualifiedName: Interaction.CrosshairController.DeactivateCrosshair
    isDefinition: true
    commentId: Overload:Interaction.CrosshairController.DeactivateCrosshair
  Interaction.CrosshairController.DeactivateContextButtons*:
    name:
      CSharp:
      - id: Interaction.CrosshairController.DeactivateContextButtons*
        name: DeactivateContextButtons
        nameWithType: CrosshairController.DeactivateContextButtons
        qualifiedName: Interaction.CrosshairController.DeactivateContextButtons
      VB:
      - id: Interaction.CrosshairController.DeactivateContextButtons*
        name: DeactivateContextButtons
        nameWithType: CrosshairController.DeactivateContextButtons
        qualifiedName: Interaction.CrosshairController.DeactivateContextButtons
    isDefinition: true
    commentId: Overload:Interaction.CrosshairController.DeactivateContextButtons
  Interaction.CrosshairController.ActivateContextButtons*:
    name:
      CSharp:
      - id: Interaction.CrosshairController.ActivateContextButtons*
        name: ActivateContextButtons
        nameWithType: CrosshairController.ActivateContextButtons
        qualifiedName: Interaction.CrosshairController.ActivateContextButtons
      VB:
      - id: Interaction.CrosshairController.ActivateContextButtons*
        name: ActivateContextButtons
        nameWithType: CrosshairController.ActivateContextButtons
        qualifiedName: Interaction.CrosshairController.ActivateContextButtons
    isDefinition: true
    commentId: Overload:Interaction.CrosshairController.ActivateContextButtons
  Interaction.CrosshairController:
    name:
      CSharp:
      - id: Interaction.CrosshairController
        name: CrosshairController
        nameWithType: CrosshairController
        qualifiedName: Interaction.CrosshairController
      VB:
      - id: Interaction.CrosshairController
        name: CrosshairController
        nameWithType: CrosshairController
        qualifiedName: Interaction.CrosshairController
    isDefinition: true
    commentId: T:Interaction.CrosshairController
  Global.RaycastHit:
    name:
      CSharp:
      - id: Global.RaycastHit
        name: RaycastHit
        nameWithType: RaycastHit
        qualifiedName: RaycastHit
        isExternal: true
      VB:
      - id: Global.RaycastHit
        name: RaycastHit
        nameWithType: RaycastHit
        qualifiedName: RaycastHit
        isExternal: true
    isDefinition: true
    commentId: '!:Global.RaycastHit'
  Interaction.InteractionController.GrabObject*:
    name:
      CSharp:
      - id: Interaction.InteractionController.GrabObject*
        name: GrabObject
        nameWithType: InteractionController.GrabObject
        qualifiedName: Interaction.InteractionController.GrabObject
      VB:
      - id: Interaction.InteractionController.GrabObject*
        name: GrabObject
        nameWithType: InteractionController.GrabObject
        qualifiedName: Interaction.InteractionController.GrabObject
    isDefinition: true
    commentId: Overload:Interaction.InteractionController.GrabObject
  Interaction.InteractionController.ReleaseGrabbedObject*:
    name:
      CSharp:
      - id: Interaction.InteractionController.ReleaseGrabbedObject*
        name: ReleaseGrabbedObject
        nameWithType: InteractionController.ReleaseGrabbedObject
        qualifiedName: Interaction.InteractionController.ReleaseGrabbedObject
      VB:
      - id: Interaction.InteractionController.ReleaseGrabbedObject*
        name: ReleaseGrabbedObject
        nameWithType: InteractionController.ReleaseGrabbedObject
        qualifiedName: Interaction.InteractionController.ReleaseGrabbedObject
    isDefinition: true
    commentId: Overload:Interaction.InteractionController.ReleaseGrabbedObject
  Interaction.InteractionController.Interact*:
    name:
      CSharp:
      - id: Interaction.InteractionController.Interact*
        name: Interact
        nameWithType: InteractionController.Interact
        qualifiedName: Interaction.InteractionController.Interact
      VB:
      - id: Interaction.InteractionController.Interact*
        name: Interact
        nameWithType: InteractionController.Interact
        qualifiedName: Interaction.InteractionController.Interact
    isDefinition: true
    commentId: Overload:Interaction.InteractionController.Interact
  Interaction.InteractionController.Combine*:
    name:
      CSharp:
      - id: Interaction.InteractionController.Combine*
        name: Combine
        nameWithType: InteractionController.Combine
        qualifiedName: Interaction.InteractionController.Combine
      VB:
      - id: Interaction.InteractionController.Combine*
        name: Combine
        nameWithType: InteractionController.Combine
        qualifiedName: Interaction.InteractionController.Combine
    isDefinition: true
    commentId: Overload:Interaction.InteractionController.Combine
  Interaction.InteractionController:
    name:
      CSharp:
      - id: Interaction.InteractionController
        name: InteractionController
        nameWithType: InteractionController
        qualifiedName: Interaction.InteractionController
      VB:
      - id: Interaction.InteractionController
        name: InteractionController
        nameWithType: InteractionController
        qualifiedName: Interaction.InteractionController
    isDefinition: true
    commentId: T:Interaction.InteractionController
  Interaction.MaterialController.ActivateOutlines*:
    name:
      CSharp:
      - id: Interaction.MaterialController.ActivateOutlines*
        name: ActivateOutlines
        nameWithType: MaterialController.ActivateOutlines
        qualifiedName: Interaction.MaterialController.ActivateOutlines
      VB:
      - id: Interaction.MaterialController.ActivateOutlines*
        name: ActivateOutlines
        nameWithType: MaterialController.ActivateOutlines
        qualifiedName: Interaction.MaterialController.ActivateOutlines
    isDefinition: true
    commentId: Overload:Interaction.MaterialController.ActivateOutlines
  Interaction.MaterialController.DeactivateOutlines*:
    name:
      CSharp:
      - id: Interaction.MaterialController.DeactivateOutlines*
        name: DeactivateOutlines
        nameWithType: MaterialController.DeactivateOutlines
        qualifiedName: Interaction.MaterialController.DeactivateOutlines
      VB:
      - id: Interaction.MaterialController.DeactivateOutlines*
        name: DeactivateOutlines
        nameWithType: MaterialController.DeactivateOutlines
        qualifiedName: Interaction.MaterialController.DeactivateOutlines
    isDefinition: true
    commentId: Overload:Interaction.MaterialController.DeactivateOutlines
  Interaction.MaterialController.ChangeToCombineMaterial*:
    name:
      CSharp:
      - id: Interaction.MaterialController.ChangeToCombineMaterial*
        name: ChangeToCombineMaterial
        nameWithType: MaterialController.ChangeToCombineMaterial
        qualifiedName: Interaction.MaterialController.ChangeToCombineMaterial
      VB:
      - id: Interaction.MaterialController.ChangeToCombineMaterial*
        name: ChangeToCombineMaterial
        nameWithType: MaterialController.ChangeToCombineMaterial
        qualifiedName: Interaction.MaterialController.ChangeToCombineMaterial
    isDefinition: true
    commentId: Overload:Interaction.MaterialController.ChangeToCombineMaterial
  Interaction.MaterialController.resetOriginalMaterial*:
    name:
      CSharp:
      - id: Interaction.MaterialController.resetOriginalMaterial*
        name: resetOriginalMaterial
        nameWithType: MaterialController.resetOriginalMaterial
        qualifiedName: Interaction.MaterialController.resetOriginalMaterial
      VB:
      - id: Interaction.MaterialController.resetOriginalMaterial*
        name: resetOriginalMaterial
        nameWithType: MaterialController.resetOriginalMaterial
        qualifiedName: Interaction.MaterialController.resetOriginalMaterial
    isDefinition: true
    commentId: Overload:Interaction.MaterialController.resetOriginalMaterial
  Global.Material:
    name:
      CSharp:
      - id: Global.Material
        name: Material
        nameWithType: Material
        qualifiedName: Material
        isExternal: true
      VB:
      - id: Global.Material
        name: Material
        nameWithType: Material
        qualifiedName: Material
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Material'
  Interaction.MaterialController.setNewOriginalMaterial*:
    name:
      CSharp:
      - id: Interaction.MaterialController.setNewOriginalMaterial*
        name: setNewOriginalMaterial
        nameWithType: MaterialController.setNewOriginalMaterial
        qualifiedName: Interaction.MaterialController.setNewOriginalMaterial
      VB:
      - id: Interaction.MaterialController.setNewOriginalMaterial*
        name: setNewOriginalMaterial
        nameWithType: MaterialController.setNewOriginalMaterial
        qualifiedName: Interaction.MaterialController.setNewOriginalMaterial
    isDefinition: true
    commentId: Overload:Interaction.MaterialController.setNewOriginalMaterial
  Interaction.MaterialController.ActivateErrorIndicator*:
    name:
      CSharp:
      - id: Interaction.MaterialController.ActivateErrorIndicator*
        name: ActivateErrorIndicator
        nameWithType: MaterialController.ActivateErrorIndicator
        qualifiedName: Interaction.MaterialController.ActivateErrorIndicator
      VB:
      - id: Interaction.MaterialController.ActivateErrorIndicator*
        name: ActivateErrorIndicator
        nameWithType: MaterialController.ActivateErrorIndicator
        qualifiedName: Interaction.MaterialController.ActivateErrorIndicator
    isDefinition: true
    commentId: Overload:Interaction.MaterialController.ActivateErrorIndicator
  Interaction.MaterialController.ActivateSuccessIndicator*:
    name:
      CSharp:
      - id: Interaction.MaterialController.ActivateSuccessIndicator*
        name: ActivateSuccessIndicator
        nameWithType: MaterialController.ActivateSuccessIndicator
        qualifiedName: Interaction.MaterialController.ActivateSuccessIndicator
      VB:
      - id: Interaction.MaterialController.ActivateSuccessIndicator*
        name: ActivateSuccessIndicator
        nameWithType: MaterialController.ActivateSuccessIndicator
        qualifiedName: Interaction.MaterialController.ActivateSuccessIndicator
    isDefinition: true
    commentId: Overload:Interaction.MaterialController.ActivateSuccessIndicator
  Interaction.MaterialController:
    name:
      CSharp:
      - id: Interaction.MaterialController
        name: MaterialController
        nameWithType: MaterialController
        qualifiedName: Interaction.MaterialController
      VB:
      - id: Interaction.MaterialController
        name: MaterialController
        nameWithType: MaterialController
        qualifiedName: Interaction.MaterialController
    isDefinition: true
    commentId: T:Interaction.MaterialController
  Interaction.ObjectLerpingController:
    name:
      CSharp:
      - id: Interaction.ObjectLerpingController
        name: ObjectLerpingController
        nameWithType: ObjectLerpingController
        qualifiedName: Interaction.ObjectLerpingController
      VB:
      - id: Interaction.ObjectLerpingController
        name: ObjectLerpingController
        nameWithType: ObjectLerpingController
        qualifiedName: Interaction.ObjectLerpingController
    isDefinition: true
    commentId: T:Interaction.ObjectLerpingController
  Interaction:
    name:
      CSharp:
      - name: Interaction
        nameWithType: Interaction
        qualifiedName: Interaction
      VB:
      - name: Interaction
        nameWithType: Interaction
        qualifiedName: Interaction
    isDefinition: true
    commentId: N:Interaction
  Interaction.Outline.Mode:
    name:
      CSharp:
      - id: Interaction.Outline.Mode
        name: Outline.Mode
        nameWithType: Outline.Mode
        qualifiedName: Interaction.Outline.Mode
      VB:
      - id: Interaction.Outline.Mode
        name: Outline.Mode
        nameWithType: Outline.Mode
        qualifiedName: Interaction.Outline.Mode
    isDefinition: true
    parent: Interaction
    commentId: T:Interaction.Outline.Mode
  Interaction.Outline.OutlineMode*:
    name:
      CSharp:
      - id: Interaction.Outline.OutlineMode*
        name: OutlineMode
        nameWithType: Outline.OutlineMode
        qualifiedName: Interaction.Outline.OutlineMode
      VB:
      - id: Interaction.Outline.OutlineMode*
        name: OutlineMode
        nameWithType: Outline.OutlineMode
        qualifiedName: Interaction.Outline.OutlineMode
    isDefinition: true
    commentId: Overload:Interaction.Outline.OutlineMode
  Global.Color:
    name:
      CSharp:
      - id: Global.Color
        name: Color
        nameWithType: Color
        qualifiedName: Color
        isExternal: true
      VB:
      - id: Global.Color
        name: Color
        nameWithType: Color
        qualifiedName: Color
        isExternal: true
    isDefinition: true
  Interaction.Outline.OutlineColor*:
    name:
      CSharp:
      - id: Interaction.Outline.OutlineColor*
        name: OutlineColor
        nameWithType: Outline.OutlineColor
        qualifiedName: Interaction.Outline.OutlineColor
      VB:
      - id: Interaction.Outline.OutlineColor*
        name: OutlineColor
        nameWithType: Outline.OutlineColor
        qualifiedName: Interaction.Outline.OutlineColor
    isDefinition: true
    commentId: Overload:Interaction.Outline.OutlineColor
  Interaction.Outline.OutlineWidth*:
    name:
      CSharp:
      - id: Interaction.Outline.OutlineWidth*
        name: OutlineWidth
        nameWithType: Outline.OutlineWidth
        qualifiedName: Interaction.Outline.OutlineWidth
      VB:
      - id: Interaction.Outline.OutlineWidth*
        name: OutlineWidth
        nameWithType: Outline.OutlineWidth
        qualifiedName: Interaction.Outline.OutlineWidth
    isDefinition: true
    commentId: Overload:Interaction.Outline.OutlineWidth
  Interaction.Outline:
    name:
      CSharp:
      - id: Interaction.Outline
        name: Outline
        nameWithType: Outline
        qualifiedName: Interaction.Outline
      VB:
      - id: Interaction.Outline
        name: Outline
        nameWithType: Outline
        qualifiedName: Interaction.Outline
    isDefinition: true
    commentId: T:Interaction.Outline
  Interaction.ResetLostObjectController:
    name:
      CSharp:
      - id: Interaction.ResetLostObjectController
        name: ResetLostObjectController
        nameWithType: ResetLostObjectController
        qualifiedName: Interaction.ResetLostObjectController
      VB:
      - id: Interaction.ResetLostObjectController
        name: ResetLostObjectController
        nameWithType: ResetLostObjectController
        qualifiedName: Interaction.ResetLostObjectController
    isDefinition: true
    commentId: T:Interaction.ResetLostObjectController
  Interaction.RigidbodyController:
    name:
      CSharp:
      - id: Interaction.RigidbodyController
        name: RigidbodyController
        nameWithType: RigidbodyController
        qualifiedName: Interaction.RigidbodyController
      VB:
      - id: Interaction.RigidbodyController
        name: RigidbodyController
        nameWithType: RigidbodyController
        qualifiedName: Interaction.RigidbodyController
    isDefinition: true
    commentId: T:Interaction.RigidbodyController
  Global.Vector3:
    name:
      CSharp:
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      VB:
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
    isDefinition: true
  Global.UnityEvent:
    name:
      CSharp:
      - id: Global.UnityEvent
        name: UnityEvent
        nameWithType: UnityEvent
        qualifiedName: UnityEvent
        isExternal: true
      VB:
      - id: Global.UnityEvent
        name: UnityEvent
        nameWithType: UnityEvent
        qualifiedName: UnityEvent
        isExternal: true
    isDefinition: true
  Interaction.TrainARObject.CustomUnityEvent:
    name:
      CSharp:
      - id: Interaction.TrainARObject.CustomUnityEvent
        name: TrainARObject.CustomUnityEvent
        nameWithType: TrainARObject.CustomUnityEvent
        qualifiedName: Interaction.TrainARObject.CustomUnityEvent
      VB:
      - id: Interaction.TrainARObject.CustomUnityEvent
        name: TrainARObject.CustomUnityEvent
        nameWithType: TrainARObject.CustomUnityEvent
        qualifiedName: Interaction.TrainARObject.CustomUnityEvent
    isDefinition: true
    parent: Interaction
    commentId: T:Interaction.TrainARObject.CustomUnityEvent
  Interaction.TrainARObject.Select*:
    name:
      CSharp:
      - id: Interaction.TrainARObject.Select*
        name: Select
        nameWithType: TrainARObject.Select
        qualifiedName: Interaction.TrainARObject.Select
      VB:
      - id: Interaction.TrainARObject.Select*
        name: Select
        nameWithType: TrainARObject.Select
        qualifiedName: Interaction.TrainARObject.Select
    isDefinition: true
    commentId: Overload:Interaction.TrainARObject.Select
  Interaction.TrainARObject.Deselect*:
    name:
      CSharp:
      - id: Interaction.TrainARObject.Deselect*
        name: Deselect
        nameWithType: TrainARObject.Deselect
        qualifiedName: Interaction.TrainARObject.Deselect
      VB:
      - id: Interaction.TrainARObject.Deselect*
        name: Deselect
        nameWithType: TrainARObject.Deselect
        qualifiedName: Interaction.TrainARObject.Deselect
    isDefinition: true
    commentId: Overload:Interaction.TrainARObject.Deselect
  Interaction.TrainARObject.Interact*:
    name:
      CSharp:
      - id: Interaction.TrainARObject.Interact*
        name: Interact
        nameWithType: TrainARObject.Interact
        qualifiedName: Interaction.TrainARObject.Interact
      VB:
      - id: Interaction.TrainARObject.Interact*
        name: Interact
        nameWithType: TrainARObject.Interact
        qualifiedName: Interaction.TrainARObject.Interact
    isDefinition: true
    commentId: Overload:Interaction.TrainARObject.Interact
  Interaction.TrainARObject.Combine*:
    name:
      CSharp:
      - id: Interaction.TrainARObject.Combine*
        name: Combine
        nameWithType: TrainARObject.Combine
        qualifiedName: Interaction.TrainARObject.Combine
      VB:
      - id: Interaction.TrainARObject.Combine*
        name: Combine
        nameWithType: TrainARObject.Combine
        qualifiedName: Interaction.TrainARObject.Combine
    isDefinition: true
    commentId: Overload:Interaction.TrainARObject.Combine
  Interaction.TrainARObject.Grab*:
    name:
      CSharp:
      - id: Interaction.TrainARObject.Grab*
        name: Grab
        nameWithType: TrainARObject.Grab
        qualifiedName: Interaction.TrainARObject.Grab
      VB:
      - id: Interaction.TrainARObject.Grab*
        name: Grab
        nameWithType: TrainARObject.Grab
        qualifiedName: Interaction.TrainARObject.Grab
    isDefinition: true
    commentId: Overload:Interaction.TrainARObject.Grab
  Interaction.TrainARObject.Release*:
    name:
      CSharp:
      - id: Interaction.TrainARObject.Release*
        name: Release
        nameWithType: TrainARObject.Release
        qualifiedName: Interaction.TrainARObject.Release
      VB:
      - id: Interaction.TrainARObject.Release*
        name: Release
        nameWithType: TrainARObject.Release
        qualifiedName: Interaction.TrainARObject.Release
    isDefinition: true
    commentId: Overload:Interaction.TrainARObject.Release
  Interaction.TrainARObject.Error*:
    name:
      CSharp:
      - id: Interaction.TrainARObject.Error*
        name: Error
        nameWithType: TrainARObject.Error
        qualifiedName: Interaction.TrainARObject.Error
      VB:
      - id: Interaction.TrainARObject.Error*
        name: Error
        nameWithType: TrainARObject.Error
        qualifiedName: Interaction.TrainARObject.Error
    isDefinition: true
    commentId: Overload:Interaction.TrainARObject.Error
  Interaction.TrainARObject.DisableTrainARObject*:
    name:
      CSharp:
      - id: Interaction.TrainARObject.DisableTrainARObject*
        name: DisableTrainARObject
        nameWithType: TrainARObject.DisableTrainARObject
        qualifiedName: Interaction.TrainARObject.DisableTrainARObject
      VB:
      - id: Interaction.TrainARObject.DisableTrainARObject*
        name: DisableTrainARObject
        nameWithType: TrainARObject.DisableTrainARObject
        qualifiedName: Interaction.TrainARObject.DisableTrainARObject
    isDefinition: true
    commentId: Overload:Interaction.TrainARObject.DisableTrainARObject
  Interaction.TrainARObject.EnableTrainARObject*:
    name:
      CSharp:
      - id: Interaction.TrainARObject.EnableTrainARObject*
        name: EnableTrainARObject
        nameWithType: TrainARObject.EnableTrainARObject
        qualifiedName: Interaction.TrainARObject.EnableTrainARObject
      VB:
      - id: Interaction.TrainARObject.EnableTrainARObject*
        name: EnableTrainARObject
        nameWithType: TrainARObject.EnableTrainARObject
        qualifiedName: Interaction.TrainARObject.EnableTrainARObject
    isDefinition: true
    commentId: Overload:Interaction.TrainARObject.EnableTrainARObject
  Interaction.TrainARObject:
    name:
      CSharp:
      - id: Interaction.TrainARObject
        name: TrainARObject
        nameWithType: TrainARObject
        qualifiedName: Interaction.TrainARObject
      VB:
      - id: Interaction.TrainARObject
        name: TrainARObject
        nameWithType: TrainARObject
        qualifiedName: Interaction.TrainARObject
    isDefinition: true
    commentId: T:Interaction.TrainARObject
  System.SerializableAttribute:
    name:
      CSharp:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
      VB:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.SerializableAttribute
  System.SerializableAttribute.#ctor:
    name:
      CSharp:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.SerializableAttribute
    commentId: M:System.SerializableAttribute.#ctor
  Others.ApplicationRuntimeManager.QuitApplication*:
    name:
      CSharp:
      - id: Others.ApplicationRuntimeManager.QuitApplication*
        name: QuitApplication
        nameWithType: ApplicationRuntimeManager.QuitApplication
        qualifiedName: Others.ApplicationRuntimeManager.QuitApplication
      VB:
      - id: Others.ApplicationRuntimeManager.QuitApplication*
        name: QuitApplication
        nameWithType: ApplicationRuntimeManager.QuitApplication
        qualifiedName: Others.ApplicationRuntimeManager.QuitApplication
    isDefinition: true
    commentId: Overload:Others.ApplicationRuntimeManager.QuitApplication
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  Others.ApplicationRuntimeManager.StartTraining*:
    name:
      CSharp:
      - id: Others.ApplicationRuntimeManager.StartTraining*
        name: StartTraining
        nameWithType: ApplicationRuntimeManager.StartTraining
        qualifiedName: Others.ApplicationRuntimeManager.StartTraining
      VB:
      - id: Others.ApplicationRuntimeManager.StartTraining*
        name: StartTraining
        nameWithType: ApplicationRuntimeManager.StartTraining
        qualifiedName: Others.ApplicationRuntimeManager.StartTraining
    isDefinition: true
    commentId: Overload:Others.ApplicationRuntimeManager.StartTraining
  Others.ApplicationRuntimeManager:
    name:
      CSharp:
      - id: Others.ApplicationRuntimeManager
        name: ApplicationRuntimeManager
        nameWithType: ApplicationRuntimeManager
        qualifiedName: Others.ApplicationRuntimeManager
      VB:
      - id: Others.ApplicationRuntimeManager
        name: ApplicationRuntimeManager
        nameWithType: ApplicationRuntimeManager
        qualifiedName: Others.ApplicationRuntimeManager
    isDefinition: true
    commentId: T:Others.ApplicationRuntimeManager
  Others.ARSessionIsReady:
    name:
      CSharp:
      - id: Others.ARSessionIsReady
        name: ARSessionIsReady
        nameWithType: ARSessionIsReady
        qualifiedName: Others.ARSessionIsReady
      VB:
      - id: Others.ARSessionIsReady
        name: ARSessionIsReady
        nameWithType: ARSessionIsReady
        qualifiedName: Others.ARSessionIsReady
    isDefinition: true
    commentId: T:Others.ARSessionIsReady
  Others.LeaveAndResetARScene.LeaveAndReset*:
    name:
      CSharp:
      - id: Others.LeaveAndResetARScene.LeaveAndReset*
        name: LeaveAndReset
        nameWithType: LeaveAndResetARScene.LeaveAndReset
        qualifiedName: Others.LeaveAndResetARScene.LeaveAndReset
      VB:
      - id: Others.LeaveAndResetARScene.LeaveAndReset*
        name: LeaveAndReset
        nameWithType: LeaveAndResetARScene.LeaveAndReset
        qualifiedName: Others.LeaveAndResetARScene.LeaveAndReset
    isDefinition: true
    commentId: Overload:Others.LeaveAndResetARScene.LeaveAndReset
  Others.LeaveAndResetARScene.QuitApplication*:
    name:
      CSharp:
      - id: Others.LeaveAndResetARScene.QuitApplication*
        name: QuitApplication
        nameWithType: LeaveAndResetARScene.QuitApplication
        qualifiedName: Others.LeaveAndResetARScene.QuitApplication
      VB:
      - id: Others.LeaveAndResetARScene.QuitApplication*
        name: QuitApplication
        nameWithType: LeaveAndResetARScene.QuitApplication
        qualifiedName: Others.LeaveAndResetARScene.QuitApplication
    isDefinition: true
    commentId: Overload:Others.LeaveAndResetARScene.QuitApplication
  Others.LeaveAndResetARScene:
    name:
      CSharp:
      - id: Others.LeaveAndResetARScene
        name: LeaveAndResetARScene
        nameWithType: LeaveAndResetARScene
        qualifiedName: Others.LeaveAndResetARScene
      VB:
      - id: Others.LeaveAndResetARScene
        name: LeaveAndResetARScene
        nameWithType: LeaveAndResetARScene
        qualifiedName: Others.LeaveAndResetARScene
    isDefinition: true
    commentId: T:Others.LeaveAndResetARScene
  Others.MeshCombiner.CreateMultiMaterialMesh*:
    name:
      CSharp:
      - id: Others.MeshCombiner.CreateMultiMaterialMesh*
        name: CreateMultiMaterialMesh
        nameWithType: MeshCombiner.CreateMultiMaterialMesh
        qualifiedName: Others.MeshCombiner.CreateMultiMaterialMesh
      VB:
      - id: Others.MeshCombiner.CreateMultiMaterialMesh*
        name: CreateMultiMaterialMesh
        nameWithType: MeshCombiner.CreateMultiMaterialMesh
        qualifiedName: Others.MeshCombiner.CreateMultiMaterialMesh
    isDefinition: true
    commentId: Overload:Others.MeshCombiner.CreateMultiMaterialMesh
  Others.MeshCombiner.CombineInactiveChildren*:
    name:
      CSharp:
      - id: Others.MeshCombiner.CombineInactiveChildren*
        name: CombineInactiveChildren
        nameWithType: MeshCombiner.CombineInactiveChildren
        qualifiedName: Others.MeshCombiner.CombineInactiveChildren
      VB:
      - id: Others.MeshCombiner.CombineInactiveChildren*
        name: CombineInactiveChildren
        nameWithType: MeshCombiner.CombineInactiveChildren
        qualifiedName: Others.MeshCombiner.CombineInactiveChildren
    isDefinition: true
    commentId: Overload:Others.MeshCombiner.CombineInactiveChildren
  Others.MeshCombiner.DeactivateCombinedChildren*:
    name:
      CSharp:
      - id: Others.MeshCombiner.DeactivateCombinedChildren*
        name: DeactivateCombinedChildren
        nameWithType: MeshCombiner.DeactivateCombinedChildren
        qualifiedName: Others.MeshCombiner.DeactivateCombinedChildren
      VB:
      - id: Others.MeshCombiner.DeactivateCombinedChildren*
        name: DeactivateCombinedChildren
        nameWithType: MeshCombiner.DeactivateCombinedChildren
        qualifiedName: Others.MeshCombiner.DeactivateCombinedChildren
    isDefinition: true
    commentId: Overload:Others.MeshCombiner.DeactivateCombinedChildren
  Others.MeshCombiner.DeactivateCombinedChildrenMeshRenderers*:
    name:
      CSharp:
      - id: Others.MeshCombiner.DeactivateCombinedChildrenMeshRenderers*
        name: DeactivateCombinedChildrenMeshRenderers
        nameWithType: MeshCombiner.DeactivateCombinedChildrenMeshRenderers
        qualifiedName: Others.MeshCombiner.DeactivateCombinedChildrenMeshRenderers
      VB:
      - id: Others.MeshCombiner.DeactivateCombinedChildrenMeshRenderers*
        name: DeactivateCombinedChildrenMeshRenderers
        nameWithType: MeshCombiner.DeactivateCombinedChildrenMeshRenderers
        qualifiedName: Others.MeshCombiner.DeactivateCombinedChildrenMeshRenderers
    isDefinition: true
    commentId: Overload:Others.MeshCombiner.DeactivateCombinedChildrenMeshRenderers
  Others.MeshCombiner.GenerateUVMap*:
    name:
      CSharp:
      - id: Others.MeshCombiner.GenerateUVMap*
        name: GenerateUVMap
        nameWithType: MeshCombiner.GenerateUVMap
        qualifiedName: Others.MeshCombiner.GenerateUVMap
      VB:
      - id: Others.MeshCombiner.GenerateUVMap*
        name: GenerateUVMap
        nameWithType: MeshCombiner.GenerateUVMap
        qualifiedName: Others.MeshCombiner.GenerateUVMap
    isDefinition: true
    commentId: Overload:Others.MeshCombiner.GenerateUVMap
  Others.MeshCombiner.DestroyCombinedChildren*:
    name:
      CSharp:
      - id: Others.MeshCombiner.DestroyCombinedChildren*
        name: DestroyCombinedChildren
        nameWithType: MeshCombiner.DestroyCombinedChildren
        qualifiedName: Others.MeshCombiner.DestroyCombinedChildren
      VB:
      - id: Others.MeshCombiner.DestroyCombinedChildren*
        name: DestroyCombinedChildren
        nameWithType: MeshCombiner.DestroyCombinedChildren
        qualifiedName: Others.MeshCombiner.DestroyCombinedChildren
    isDefinition: true
    commentId: Overload:Others.MeshCombiner.DestroyCombinedChildren
  Others.MeshCombiner.FolderPath*:
    name:
      CSharp:
      - id: Others.MeshCombiner.FolderPath*
        name: FolderPath
        nameWithType: MeshCombiner.FolderPath
        qualifiedName: Others.MeshCombiner.FolderPath
      VB:
      - id: Others.MeshCombiner.FolderPath*
        name: FolderPath
        nameWithType: MeshCombiner.FolderPath
        qualifiedName: Others.MeshCombiner.FolderPath
    isDefinition: true
    commentId: Overload:Others.MeshCombiner.FolderPath
  Others.MeshCombiner.CombineMeshes*:
    name:
      CSharp:
      - id: Others.MeshCombiner.CombineMeshes*
        name: CombineMeshes
        nameWithType: MeshCombiner.CombineMeshes
        qualifiedName: Others.MeshCombiner.CombineMeshes
      VB:
      - id: Others.MeshCombiner.CombineMeshes*
        name: CombineMeshes
        nameWithType: MeshCombiner.CombineMeshes
        qualifiedName: Others.MeshCombiner.CombineMeshes
    isDefinition: true
    commentId: Overload:Others.MeshCombiner.CombineMeshes
  Others.MeshCombiner:
    name:
      CSharp:
      - id: Others.MeshCombiner
        name: MeshCombiner
        nameWithType: MeshCombiner
        qualifiedName: Others.MeshCombiner
      VB:
      - id: Others.MeshCombiner
        name: MeshCombiner
        nameWithType: MeshCombiner
        qualifiedName: Others.MeshCombiner
    isDefinition: true
    commentId: T:Others.MeshCombiner
  Others.ObjectInsideCollider:
    name:
      CSharp:
      - id: Others.ObjectInsideCollider
        name: ObjectInsideCollider
        nameWithType: ObjectInsideCollider
        qualifiedName: Others.ObjectInsideCollider
      VB:
      - id: Others.ObjectInsideCollider
        name: ObjectInsideCollider
        nameWithType: ObjectInsideCollider
        qualifiedName: Others.ObjectInsideCollider
    isDefinition: true
    commentId: T:Others.ObjectInsideCollider
  Global.Action:
    name:
      CSharp:
      - id: Global.Action
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      VB:
      - id: Global.Action
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
    isDefinition: true
  Others.PrefabSpawningController.GetSpawnedObject*:
    name:
      CSharp:
      - id: Others.PrefabSpawningController.GetSpawnedObject*
        name: GetSpawnedObject
        nameWithType: PrefabSpawningController.GetSpawnedObject
        qualifiedName: Others.PrefabSpawningController.GetSpawnedObject
      VB:
      - id: Others.PrefabSpawningController.GetSpawnedObject*
        name: GetSpawnedObject
        nameWithType: PrefabSpawningController.GetSpawnedObject
        qualifiedName: Others.PrefabSpawningController.GetSpawnedObject
    isDefinition: true
    commentId: Overload:Others.PrefabSpawningController.GetSpawnedObject
  Others.PrefabSpawningController.Reposition*:
    name:
      CSharp:
      - id: Others.PrefabSpawningController.Reposition*
        name: Reposition
        nameWithType: PrefabSpawningController.Reposition
        qualifiedName: Others.PrefabSpawningController.Reposition
      VB:
      - id: Others.PrefabSpawningController.Reposition*
        name: Reposition
        nameWithType: PrefabSpawningController.Reposition
        qualifiedName: Others.PrefabSpawningController.Reposition
    isDefinition: true
    commentId: Overload:Others.PrefabSpawningController.Reposition
  Others.PrefabSpawningController:
    name:
      CSharp:
      - id: Others.PrefabSpawningController
        name: PrefabSpawningController
        nameWithType: PrefabSpawningController
        qualifiedName: Others.PrefabSpawningController
      VB:
      - id: Others.PrefabSpawningController
        name: PrefabSpawningController
        nameWithType: PrefabSpawningController
        qualifiedName: Others.PrefabSpawningController
    isDefinition: true
    commentId: T:Others.PrefabSpawningController
  Others.ScenarioCompleted:
    name:
      CSharp:
      - id: Others.ScenarioCompleted
        name: ScenarioCompleted
        nameWithType: ScenarioCompleted
        qualifiedName: Others.ScenarioCompleted
      VB:
      - id: Others.ScenarioCompleted
        name: ScenarioCompleted
        nameWithType: ScenarioCompleted
        qualifiedName: Others.ScenarioCompleted
    isDefinition: true
    commentId: T:Others.ScenarioCompleted
  Others.SelectionBase:
    name:
      CSharp:
      - id: Others.SelectionBase
        name: SelectionBase
        nameWithType: SelectionBase
        qualifiedName: Others.SelectionBase
      VB:
      - id: Others.SelectionBase
        name: SelectionBase
        nameWithType: SelectionBase
        qualifiedName: Others.SelectionBase
    isDefinition: true
    commentId: T:Others.SelectionBase
  Others.StartARScene.LoadArScene*:
    name:
      CSharp:
      - id: Others.StartARScene.LoadArScene*
        name: LoadArScene
        nameWithType: StartARScene.LoadArScene
        qualifiedName: Others.StartARScene.LoadArScene
      VB:
      - id: Others.StartARScene.LoadArScene*
        name: LoadArScene
        nameWithType: StartARScene.LoadArScene
        qualifiedName: Others.StartARScene.LoadArScene
    isDefinition: true
    commentId: Overload:Others.StartARScene.LoadArScene
  Others.StartARScene.QuitApplication*:
    name:
      CSharp:
      - id: Others.StartARScene.QuitApplication*
        name: QuitApplication
        nameWithType: StartARScene.QuitApplication
        qualifiedName: Others.StartARScene.QuitApplication
      VB:
      - id: Others.StartARScene.QuitApplication*
        name: QuitApplication
        nameWithType: StartARScene.QuitApplication
        qualifiedName: Others.StartARScene.QuitApplication
    isDefinition: true
    commentId: Overload:Others.StartARScene.QuitApplication
  Others.StartARScene:
    name:
      CSharp:
      - id: Others.StartARScene
        name: StartARScene
        nameWithType: StartARScene
        qualifiedName: Others.StartARScene
      VB:
      - id: Others.StartARScene
        name: StartARScene
        nameWithType: StartARScene
        qualifiedName: Others.StartARScene
    isDefinition: true
    commentId: T:Others.StartARScene
  Global.InteractionType:
    name:
      CSharp:
      - id: Global.InteractionType
        name: InteractionType
        nameWithType: InteractionType
        qualifiedName: InteractionType
        isExternal: true
      VB:
      - id: Global.InteractionType
        name: InteractionType
        nameWithType: InteractionType
        qualifiedName: InteractionType
        isExternal: true
    isDefinition: true
    commentId: '!:Global.InteractionType'
  Others.StateRequestSimulator:
    name:
      CSharp:
      - id: Others.StateRequestSimulator
        name: StateRequestSimulator
        nameWithType: StateRequestSimulator
        qualifiedName: Others.StateRequestSimulator
      VB:
      - id: Others.StateRequestSimulator
        name: StateRequestSimulator
        nameWithType: StateRequestSimulator
        qualifiedName: Others.StateRequestSimulator
    isDefinition: true
    commentId: T:Others.StateRequestSimulator
  Others:
    name:
      CSharp:
      - name: Others
        nameWithType: Others
        qualifiedName: Others
      VB:
      - name: Others
        nameWithType: Others
        qualifiedName: Others
    isDefinition: true
    commentId: N:Others
  Static.CustomAction.DynamicTrigger*:
    name:
      CSharp:
      - id: Static.CustomAction.DynamicTrigger*
        name: DynamicTrigger
        nameWithType: CustomAction.DynamicTrigger
        qualifiedName: Static.CustomAction.DynamicTrigger
      VB:
      - id: Static.CustomAction.DynamicTrigger*
        name: DynamicTrigger
        nameWithType: CustomAction.DynamicTrigger
        qualifiedName: Static.CustomAction.DynamicTrigger
    isDefinition: true
    commentId: Overload:Static.CustomAction.DynamicTrigger
  Static.CustomAction.StaticTrigger*:
    name:
      CSharp:
      - id: Static.CustomAction.StaticTrigger*
        name: StaticTrigger
        nameWithType: CustomAction.StaticTrigger
        qualifiedName: Static.CustomAction.StaticTrigger
      VB:
      - id: Static.CustomAction.StaticTrigger*
        name: StaticTrigger
        nameWithType: CustomAction.StaticTrigger
        qualifiedName: Static.CustomAction.StaticTrigger
    isDefinition: true
    commentId: Overload:Static.CustomAction.StaticTrigger
  Static.CustomAction:
    name:
      CSharp:
      - id: Static.CustomAction
        name: CustomAction
        nameWithType: CustomAction
        qualifiedName: Static.CustomAction
      VB:
      - id: Static.CustomAction
        name: CustomAction
        nameWithType: CustomAction
        qualifiedName: Static.CustomAction
    isDefinition: true
    commentId: T:Static.CustomAction
  Static:
    name:
      CSharp:
      - name: Static
        nameWithType: Static
        qualifiedName: Static
      VB:
      - name: Static
        nameWithType: Static
        qualifiedName: Static
    isDefinition: true
    commentId: N:Static
  Static.InteractionType:
    name:
      CSharp:
      - id: Static.InteractionType
        name: InteractionType
        nameWithType: InteractionType
        qualifiedName: Static.InteractionType
      VB:
      - id: Static.InteractionType
        name: InteractionType
        nameWithType: InteractionType
        qualifiedName: Static.InteractionType
    isDefinition: true
    parent: Static
    commentId: T:Static.InteractionType
  Static.StateInformation.#ctor*:
    name:
      CSharp:
      - id: Static.StateInformation.#ctor*
        name: StateInformation
        nameWithType: StateInformation.StateInformation
        qualifiedName: Static.StateInformation.StateInformation
      VB:
      - id: Static.StateInformation.#ctor*
        name: StateInformation
        nameWithType: StateInformation.StateInformation
        qualifiedName: Static.StateInformation.StateInformation
    isDefinition: true
    commentId: Overload:Static.StateInformation.#ctor
  Static.StateInformation:
    name:
      CSharp:
      - id: Static.StateInformation
        name: StateInformation
        nameWithType: StateInformation
        qualifiedName: Static.StateInformation
      VB:
      - id: Static.StateInformation
        name: StateInformation
        nameWithType: StateInformation
        qualifiedName: Static.StateInformation
    isDefinition: true
    parent: Static
    commentId: T:Static.StateInformation
  Static.StatemachineConnector:
    name:
      CSharp:
      - id: Static.StatemachineConnector
        name: StatemachineConnector
        nameWithType: StatemachineConnector
        qualifiedName: Static.StatemachineConnector
      VB:
      - id: Static.StatemachineConnector
        name: StatemachineConnector
        nameWithType: StatemachineConnector
        qualifiedName: Static.StatemachineConnector
    isDefinition: true
    parent: Static
    commentId: T:Static.StatemachineConnector
  Global.Action`2:
    name:
      CSharp:
      - id: Global.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  Global.Action{System.String,System.Int32}:
    name:
      CSharp:
      - id: Global.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.Action`2
    commentId: '!:Global.Action{System.String,System.Int32}'
  Global.Action`1:
    name:
      CSharp:
      - id: Global.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:Global.Action`1'
  Global.Action{System.Boolean}:
    name:
      CSharp:
      - id: Global.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Action`1
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.Action`1
    commentId: '!:Global.Action{System.Boolean}'
  Global.Action{System.String,System.String}:
    name:
      CSharp:
      - id: Global.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Action`2
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.Action`2
    commentId: '!:Global.Action{System.String,System.String}'
  Global.Action`3:
    name:
      CSharp:
      - id: Global.Action`3
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Action`3
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  Global.Action{AudioClip,Sprite,System.String}:
    name:
      CSharp:
      - id: Global.Action`3
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.AudioClip
        name: AudioClip
        nameWithType: AudioClip
        qualifiedName: AudioClip
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.Sprite
        name: Sprite
        nameWithType: Sprite
        qualifiedName: Sprite
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Action`3
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.AudioClip
        name: AudioClip
        nameWithType: AudioClip
        qualifiedName: AudioClip
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: Global.Sprite
        name: Sprite
        nameWithType: Sprite
        qualifiedName: Sprite
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.Action`3
    commentId: '!:Global.Action{AudioClip,Sprite,System.String}'
  Global.Action{QuestionUITypes,System.String,System.Collections.Generic.List{Answer}}:
    name:
      CSharp:
      - id: Global.Action`3
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.QuestionUITypes
        name: QuestionUITypes
        nameWithType: QuestionUITypes
        qualifiedName: QuestionUITypes
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.Answer
        name: Answer
        nameWithType: Answer
        qualifiedName: Answer
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Action`3
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.QuestionUITypes
        name: QuestionUITypes
        nameWithType: QuestionUITypes
        qualifiedName: QuestionUITypes
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.Answer
        name: Answer
        nameWithType: Answer
        qualifiedName: Answer
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.Action`3
    commentId: '!:Global.Action{QuestionUITypes,System.String,System.Collections.Generic.List{Answer}}'
  Global.Func`2:
    name:
      CSharp:
      - id: Global.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:Global.Func`2'
  Global.Func{Static.StateInformation,System.Boolean}:
    name:
      CSharp:
      - id: Global.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Static.StateInformation
        name: StateInformation
        nameWithType: StateInformation
        qualifiedName: Static.StateInformation
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Global.Func`2
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Static.StateInformation
        name: StateInformation
        nameWithType: StateInformation
        qualifiedName: Static.StateInformation
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Global.Func`2
    commentId: '!:Global.Func{Static.StateInformation,System.Boolean}'
  Static.StatemachineConnector.RegisterNewStateChangeTrigger*:
    name:
      CSharp:
      - id: Static.StatemachineConnector.RegisterNewStateChangeTrigger*
        name: RegisterNewStateChangeTrigger
        nameWithType: StatemachineConnector.RegisterNewStateChangeTrigger
        qualifiedName: Static.StatemachineConnector.RegisterNewStateChangeTrigger
      VB:
      - id: Static.StatemachineConnector.RegisterNewStateChangeTrigger*
        name: RegisterNewStateChangeTrigger
        nameWithType: StatemachineConnector.RegisterNewStateChangeTrigger
        qualifiedName: Static.StatemachineConnector.RegisterNewStateChangeTrigger
    isDefinition: true
    commentId: Overload:Static.StatemachineConnector.RegisterNewStateChangeTrigger
  Static.StatemachineConnector.RequestStateChange*:
    name:
      CSharp:
      - id: Static.StatemachineConnector.RequestStateChange*
        name: RequestStateChange
        nameWithType: StatemachineConnector.RequestStateChange
        qualifiedName: Static.StatemachineConnector.RequestStateChange
      VB:
      - id: Static.StatemachineConnector.RequestStateChange*
        name: RequestStateChange
        nameWithType: StatemachineConnector.RequestStateChange
        qualifiedName: Static.StatemachineConnector.RequestStateChange
    isDefinition: true
    commentId: Overload:Static.StatemachineConnector.RequestStateChange
  Static.StatemachineConnector.UpdateTopPanel*:
    name:
      CSharp:
      - id: Static.StatemachineConnector.UpdateTopPanel*
        name: UpdateTopPanel
        nameWithType: StatemachineConnector.UpdateTopPanel
        qualifiedName: Static.StatemachineConnector.UpdateTopPanel
      VB:
      - id: Static.StatemachineConnector.UpdateTopPanel*
        name: UpdateTopPanel
        nameWithType: StatemachineConnector.UpdateTopPanel
        qualifiedName: Static.StatemachineConnector.UpdateTopPanel
    isDefinition: true
    commentId: Overload:Static.StatemachineConnector.UpdateTopPanel
  Static.StatemachineConnector.AcceptedStateChange*:
    name:
      CSharp:
      - id: Static.StatemachineConnector.AcceptedStateChange*
        name: AcceptedStateChange
        nameWithType: StatemachineConnector.AcceptedStateChange
        qualifiedName: Static.StatemachineConnector.AcceptedStateChange
      VB:
      - id: Static.StatemachineConnector.AcceptedStateChange*
        name: AcceptedStateChange
        nameWithType: StatemachineConnector.AcceptedStateChange
        qualifiedName: Static.StatemachineConnector.AcceptedStateChange
    isDefinition: true
    commentId: Overload:Static.StatemachineConnector.AcceptedStateChange
  Static.StatemachineConnector.ShowErrorOverlay*:
    name:
      CSharp:
      - id: Static.StatemachineConnector.ShowErrorOverlay*
        name: ShowErrorOverlay
        nameWithType: StatemachineConnector.ShowErrorOverlay
        qualifiedName: Static.StatemachineConnector.ShowErrorOverlay
      VB:
      - id: Static.StatemachineConnector.ShowErrorOverlay*
        name: ShowErrorOverlay
        nameWithType: StatemachineConnector.ShowErrorOverlay
        qualifiedName: Static.StatemachineConnector.ShowErrorOverlay
    isDefinition: true
    commentId: Overload:Static.StatemachineConnector.ShowErrorOverlay
  Global.Sprite:
    name:
      CSharp:
      - id: Global.Sprite
        name: Sprite
        nameWithType: Sprite
        qualifiedName: Sprite
        isExternal: true
      VB:
      - id: Global.Sprite
        name: Sprite
        nameWithType: Sprite
        qualifiedName: Sprite
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Sprite'
  Static.StatemachineConnector.ShowExpertInsights*:
    name:
      CSharp:
      - id: Static.StatemachineConnector.ShowExpertInsights*
        name: ShowExpertInsights
        nameWithType: StatemachineConnector.ShowExpertInsights
        qualifiedName: Static.StatemachineConnector.ShowExpertInsights
      VB:
      - id: Static.StatemachineConnector.ShowExpertInsights*
        name: ShowExpertInsights
        nameWithType: StatemachineConnector.ShowExpertInsights
        qualifiedName: Static.StatemachineConnector.ShowExpertInsights
    isDefinition: true
    commentId: Overload:Static.StatemachineConnector.ShowExpertInsights
  Static.StatemachineConnector.ShowCompletionOverlay*:
    name:
      CSharp:
      - id: Static.StatemachineConnector.ShowCompletionOverlay*
        name: ShowCompletionOverlay
        nameWithType: StatemachineConnector.ShowCompletionOverlay
        qualifiedName: Static.StatemachineConnector.ShowCompletionOverlay
      VB:
      - id: Static.StatemachineConnector.ShowCompletionOverlay*
        name: ShowCompletionOverlay
        nameWithType: StatemachineConnector.ShowCompletionOverlay
        qualifiedName: Static.StatemachineConnector.ShowCompletionOverlay
    isDefinition: true
    commentId: Overload:Static.StatemachineConnector.ShowCompletionOverlay
  Global.QuestionUITypes:
    name:
      CSharp:
      - id: Global.QuestionUITypes
        name: QuestionUITypes
        nameWithType: QuestionUITypes
        qualifiedName: QuestionUITypes
        isExternal: true
      VB:
      - id: Global.QuestionUITypes
        name: QuestionUITypes
        nameWithType: QuestionUITypes
        qualifiedName: QuestionUITypes
        isExternal: true
    isDefinition: true
    commentId: '!:Global.QuestionUITypes'
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic.List{Answer}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.Answer
        name: Answer
        nameWithType: Answer
        qualifiedName: Answer
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.Answer
        name: Answer
        nameWithType: Answer
        qualifiedName: Answer
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Answer}
  Static.StatemachineConnector.StartQuestionUI*:
    name:
      CSharp:
      - id: Static.StatemachineConnector.StartQuestionUI*
        name: StartQuestionUI
        nameWithType: StatemachineConnector.StartQuestionUI
        qualifiedName: Static.StatemachineConnector.StartQuestionUI
      VB:
      - id: Static.StatemachineConnector.StartQuestionUI*
        name: StartQuestionUI
        nameWithType: StatemachineConnector.StartQuestionUI
        qualifiedName: Static.StatemachineConnector.StartQuestionUI
    isDefinition: true
    commentId: Overload:Static.StatemachineConnector.StartQuestionUI
  Static.StatemachineConnector.Reset*:
    name:
      CSharp:
      - id: Static.StatemachineConnector.Reset*
        name: Reset
        nameWithType: StatemachineConnector.Reset
        qualifiedName: Static.StatemachineConnector.Reset
      VB:
      - id: Static.StatemachineConnector.Reset*
        name: Reset
        nameWithType: StatemachineConnector.Reset
        qualifiedName: Static.StatemachineConnector.Reset
    isDefinition: true
    commentId: Overload:Static.StatemachineConnector.Reset
  Tracking.FetchAspectRatioFromARCamera:
    name:
      CSharp:
      - id: Tracking.FetchAspectRatioFromARCamera
        name: FetchAspectRatioFromARCamera
        nameWithType: FetchAspectRatioFromARCamera
        qualifiedName: Tracking.FetchAspectRatioFromARCamera
      VB:
      - id: Tracking.FetchAspectRatioFromARCamera
        name: FetchAspectRatioFromARCamera
        nameWithType: FetchAspectRatioFromARCamera
        qualifiedName: Tracking.FetchAspectRatioFromARCamera
    isDefinition: true
    commentId: T:Tracking.FetchAspectRatioFromARCamera
  Tracking:
    name:
      CSharp:
      - name: Tracking
        nameWithType: Tracking
        qualifiedName: Tracking
      VB:
      - name: Tracking
        nameWithType: Tracking
        qualifiedName: Tracking
    isDefinition: true
    commentId: N:Tracking
  UI.CrosshairOnOff:
    name:
      CSharp:
      - id: UI.CrosshairOnOff
        name: CrosshairOnOff
        nameWithType: CrosshairOnOff
        qualifiedName: UI.CrosshairOnOff
      VB:
      - id: UI.CrosshairOnOff
        name: CrosshairOnOff
        nameWithType: CrosshairOnOff
        qualifiedName: UI.CrosshairOnOff
    isDefinition: true
    commentId: T:UI.CrosshairOnOff
  UI.DirectInfoController:
    name:
      CSharp:
      - id: UI.DirectInfoController
        name: DirectInfoController
        nameWithType: DirectInfoController
        qualifiedName: UI.DirectInfoController
      VB:
      - id: UI.DirectInfoController
        name: DirectInfoController
        nameWithType: DirectInfoController
        qualifiedName: UI.DirectInfoController
    isDefinition: true
    commentId: T:UI.DirectInfoController
  UI.ErrorOverlayController:
    name:
      CSharp:
      - id: UI.ErrorOverlayController
        name: ErrorOverlayController
        nameWithType: ErrorOverlayController
        qualifiedName: UI.ErrorOverlayController
      VB:
      - id: UI.ErrorOverlayController
        name: ErrorOverlayController
        nameWithType: ErrorOverlayController
        qualifiedName: UI.ErrorOverlayController
    isDefinition: true
    commentId: T:UI.ErrorOverlayController
  UI.InputFieldAdjust.AdjustInputFieldPosition*:
    name:
      CSharp:
      - id: UI.InputFieldAdjust.AdjustInputFieldPosition*
        name: AdjustInputFieldPosition
        nameWithType: InputFieldAdjust.AdjustInputFieldPosition
        qualifiedName: UI.InputFieldAdjust.AdjustInputFieldPosition
      VB:
      - id: UI.InputFieldAdjust.AdjustInputFieldPosition*
        name: AdjustInputFieldPosition
        nameWithType: InputFieldAdjust.AdjustInputFieldPosition
        qualifiedName: UI.InputFieldAdjust.AdjustInputFieldPosition
    isDefinition: true
    commentId: Overload:UI.InputFieldAdjust.AdjustInputFieldPosition
  UI.InputFieldAdjust:
    name:
      CSharp:
      - id: UI.InputFieldAdjust
        name: InputFieldAdjust
        nameWithType: InputFieldAdjust
        qualifiedName: UI.InputFieldAdjust
      VB:
      - id: UI.InputFieldAdjust
        name: InputFieldAdjust
        nameWithType: InputFieldAdjust
        qualifiedName: UI.InputFieldAdjust
    isDefinition: true
    commentId: T:UI.InputFieldAdjust
  UI.InteractButton.ReleaseInteract*:
    name:
      CSharp:
      - id: UI.InteractButton.ReleaseInteract*
        name: ReleaseInteract
        nameWithType: InteractButton.ReleaseInteract
        qualifiedName: UI.InteractButton.ReleaseInteract
      VB:
      - id: UI.InteractButton.ReleaseInteract*
        name: ReleaseInteract
        nameWithType: InteractButton.ReleaseInteract
        qualifiedName: UI.InteractButton.ReleaseInteract
    isDefinition: true
    commentId: Overload:UI.InteractButton.ReleaseInteract
  UI.InteractButton:
    name:
      CSharp:
      - id: UI.InteractButton
        name: InteractButton
        nameWithType: InteractButton
        qualifiedName: UI.InteractButton
      VB:
      - id: UI.InteractButton
        name: InteractButton
        nameWithType: InteractButton
        qualifiedName: UI.InteractButton
    isDefinition: true
    commentId: T:UI.InteractButton
  UI.InteractionButtonController.ActivateInteractButtons*:
    name:
      CSharp:
      - id: UI.InteractionButtonController.ActivateInteractButtons*
        name: ActivateInteractButtons
        nameWithType: InteractionButtonController.ActivateInteractButtons
        qualifiedName: UI.InteractionButtonController.ActivateInteractButtons
      VB:
      - id: UI.InteractionButtonController.ActivateInteractButtons*
        name: ActivateInteractButtons
        nameWithType: InteractionButtonController.ActivateInteractButtons
        qualifiedName: UI.InteractionButtonController.ActivateInteractButtons
    isDefinition: true
    commentId: Overload:UI.InteractionButtonController.ActivateInteractButtons
  UI.InteractionButtonController.DeactivateInteractButtons*:
    name:
      CSharp:
      - id: UI.InteractionButtonController.DeactivateInteractButtons*
        name: DeactivateInteractButtons
        nameWithType: InteractionButtonController.DeactivateInteractButtons
        qualifiedName: UI.InteractionButtonController.DeactivateInteractButtons
      VB:
      - id: UI.InteractionButtonController.DeactivateInteractButtons*
        name: DeactivateInteractButtons
        nameWithType: InteractionButtonController.DeactivateInteractButtons
        qualifiedName: UI.InteractionButtonController.DeactivateInteractButtons
    isDefinition: true
    commentId: Overload:UI.InteractionButtonController.DeactivateInteractButtons
  UI.InteractionButtonController.GrabRelease*:
    name:
      CSharp:
      - id: UI.InteractionButtonController.GrabRelease*
        name: GrabRelease
        nameWithType: InteractionButtonController.GrabRelease
        qualifiedName: UI.InteractionButtonController.GrabRelease
      VB:
      - id: UI.InteractionButtonController.GrabRelease*
        name: GrabRelease
        nameWithType: InteractionButtonController.GrabRelease
        qualifiedName: UI.InteractionButtonController.GrabRelease
    isDefinition: true
    commentId: Overload:UI.InteractionButtonController.GrabRelease
  UI.InteractionButtonController:
    name:
      CSharp:
      - id: UI.InteractionButtonController
        name: InteractionButtonController
        nameWithType: InteractionButtonController
        qualifiedName: UI.InteractionButtonController
      VB:
      - id: UI.InteractionButtonController
        name: InteractionButtonController
        nameWithType: InteractionButtonController
        qualifiedName: UI.InteractionButtonController
    isDefinition: true
    commentId: T:UI.InteractionButtonController
  UI.OnBoardingController:
    name:
      CSharp:
      - id: UI.OnBoardingController
        name: OnBoardingController
        nameWithType: OnBoardingController
        qualifiedName: UI.OnBoardingController
      VB:
      - id: UI.OnBoardingController
        name: OnBoardingController
        nameWithType: OnBoardingController
        qualifiedName: UI.OnBoardingController
    isDefinition: true
    commentId: T:UI.OnBoardingController
  UI.OpenSidePanel.TogglePanel*:
    name:
      CSharp:
      - id: UI.OpenSidePanel.TogglePanel*
        name: TogglePanel
        nameWithType: OpenSidePanel.TogglePanel
        qualifiedName: UI.OpenSidePanel.TogglePanel
      VB:
      - id: UI.OpenSidePanel.TogglePanel*
        name: TogglePanel
        nameWithType: OpenSidePanel.TogglePanel
        qualifiedName: UI.OpenSidePanel.TogglePanel
    isDefinition: true
    commentId: Overload:UI.OpenSidePanel.TogglePanel
  UI.OpenSidePanel:
    name:
      CSharp:
      - id: UI.OpenSidePanel
        name: OpenSidePanel
        nameWithType: OpenSidePanel
        qualifiedName: UI.OpenSidePanel
      VB:
      - id: UI.OpenSidePanel
        name: OpenSidePanel
        nameWithType: OpenSidePanel
        qualifiedName: UI.OpenSidePanel
    isDefinition: true
    commentId: T:UI.OpenSidePanel
  UI.Question:
    name:
      CSharp:
      - id: UI.Question
        name: Question
        nameWithType: Question
        qualifiedName: UI.Question
      VB:
      - id: UI.Question
        name: Question
        nameWithType: Question
        qualifiedName: UI.Question
    isDefinition: true
    commentId: T:UI.Question
  Global.TextMeshProUGUI:
    name:
      CSharp:
      - id: Global.TextMeshProUGUI
        name: TextMeshProUGUI
        nameWithType: TextMeshProUGUI
        qualifiedName: TextMeshProUGUI
        isExternal: true
      VB:
      - id: Global.TextMeshProUGUI
        name: TextMeshProUGUI
        nameWithType: TextMeshProUGUI
        qualifiedName: TextMeshProUGUI
        isExternal: true
    isDefinition: true
  Global.RectTransform:
    name:
      CSharp:
      - id: Global.RectTransform
        name: RectTransform
        nameWithType: RectTransform
        qualifiedName: RectTransform
        isExternal: true
      VB:
      - id: Global.RectTransform
        name: RectTransform
        nameWithType: RectTransform
        qualifiedName: RectTransform
        isExternal: true
    isDefinition: true
    commentId: '!:Global.RectTransform'
  System.Collections.Generic.List{Button}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.Button
        name: Button
        nameWithType: Button
        qualifiedName: Button
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.Button
        name: Button
        nameWithType: Button
        qualifiedName: Button
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{Button}
  Global.Button:
    name:
      CSharp:
      - id: Global.Button
        name: Button
        nameWithType: Button
        qualifiedName: Button
        isExternal: true
      VB:
      - id: Global.Button
        name: Button
        nameWithType: Button
        qualifiedName: Button
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Button'
  System.Collections.Generic.List{System.String}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{System.String}
  System.Collections.Generic.List{UI.QuestionnaireController.Answer}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: UI.QuestionnaireController.Answer
        name: QuestionnaireController.Answer
        nameWithType: QuestionnaireController.Answer
        qualifiedName: UI.QuestionnaireController.Answer
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: UI.QuestionnaireController.Answer
        name: QuestionnaireController.Answer
        nameWithType: QuestionnaireController.Answer
        qualifiedName: UI.QuestionnaireController.Answer
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{UI.QuestionnaireController.Answer}
  UI.QuestionnaireController.InitQuestion*:
    name:
      CSharp:
      - id: UI.QuestionnaireController.InitQuestion*
        name: InitQuestion
        nameWithType: QuestionnaireController.InitQuestion
        qualifiedName: UI.QuestionnaireController.InitQuestion
      VB:
      - id: UI.QuestionnaireController.InitQuestion*
        name: InitQuestion
        nameWithType: QuestionnaireController.InitQuestion
        qualifiedName: UI.QuestionnaireController.InitQuestion
    isDefinition: true
    commentId: Overload:UI.QuestionnaireController.InitQuestion
  UI.QuestionnaireController.InitInputfield*:
    name:
      CSharp:
      - id: UI.QuestionnaireController.InitInputfield*
        name: InitInputfield
        nameWithType: QuestionnaireController.InitInputfield
        qualifiedName: UI.QuestionnaireController.InitInputfield
      VB:
      - id: UI.QuestionnaireController.InitInputfield*
        name: InitInputfield
        nameWithType: QuestionnaireController.InitInputfield
        qualifiedName: UI.QuestionnaireController.InitInputfield
    isDefinition: true
    commentId: Overload:UI.QuestionnaireController.InitInputfield
  UI.QuestionnaireController.InitQuestionList*:
    name:
      CSharp:
      - id: UI.QuestionnaireController.InitQuestionList*
        name: InitQuestionList
        nameWithType: QuestionnaireController.InitQuestionList
        qualifiedName: UI.QuestionnaireController.InitQuestionList
      VB:
      - id: UI.QuestionnaireController.InitQuestionList*
        name: InitQuestionList
        nameWithType: QuestionnaireController.InitQuestionList
        qualifiedName: UI.QuestionnaireController.InitQuestionList
    isDefinition: true
    commentId: Overload:UI.QuestionnaireController.InitQuestionList
  UI.QuestionnaireController.QuestionInputValidate*:
    name:
      CSharp:
      - id: UI.QuestionnaireController.QuestionInputValidate*
        name: QuestionInputValidate
        nameWithType: QuestionnaireController.QuestionInputValidate
        qualifiedName: UI.QuestionnaireController.QuestionInputValidate
      VB:
      - id: UI.QuestionnaireController.QuestionInputValidate*
        name: QuestionInputValidate
        nameWithType: QuestionnaireController.QuestionInputValidate
        qualifiedName: UI.QuestionnaireController.QuestionInputValidate
    isDefinition: true
    commentId: Overload:UI.QuestionnaireController.QuestionInputValidate
  UI:
    name:
      CSharp:
      - name: UI
        nameWithType: UI
        qualifiedName: UI
      VB:
      - name: UI
        nameWithType: UI
        qualifiedName: UI
    isDefinition: true
    commentId: N:UI
  UI.QuestionnaireController.QuestionUITypes:
    name:
      CSharp:
      - id: UI.QuestionnaireController.QuestionUITypes
        name: QuestionnaireController.QuestionUITypes
        nameWithType: QuestionnaireController.QuestionUITypes
        qualifiedName: UI.QuestionnaireController.QuestionUITypes
      VB:
      - id: UI.QuestionnaireController.QuestionUITypes
        name: QuestionnaireController.QuestionUITypes
        nameWithType: QuestionnaireController.QuestionUITypes
        qualifiedName: UI.QuestionnaireController.QuestionUITypes
    isDefinition: true
    parent: UI
    commentId: T:UI.QuestionnaireController.QuestionUITypes
  UI.QuestionnaireController.NotifyStatemachine*:
    name:
      CSharp:
      - id: UI.QuestionnaireController.NotifyStatemachine*
        name: NotifyStatemachine
        nameWithType: QuestionnaireController.NotifyStatemachine
        qualifiedName: UI.QuestionnaireController.NotifyStatemachine
      VB:
      - id: UI.QuestionnaireController.NotifyStatemachine*
        name: NotifyStatemachine
        nameWithType: QuestionnaireController.NotifyStatemachine
        qualifiedName: UI.QuestionnaireController.NotifyStatemachine
    isDefinition: true
    commentId: Overload:UI.QuestionnaireController.NotifyStatemachine
  UI.QuestionnaireController.ContinueButtonOnClick*:
    name:
      CSharp:
      - id: UI.QuestionnaireController.ContinueButtonOnClick*
        name: ContinueButtonOnClick
        nameWithType: QuestionnaireController.ContinueButtonOnClick
        qualifiedName: UI.QuestionnaireController.ContinueButtonOnClick
      VB:
      - id: UI.QuestionnaireController.ContinueButtonOnClick*
        name: ContinueButtonOnClick
        nameWithType: QuestionnaireController.ContinueButtonOnClick
        qualifiedName: UI.QuestionnaireController.ContinueButtonOnClick
    isDefinition: true
    commentId: Overload:UI.QuestionnaireController.ContinueButtonOnClick
  UI.QuestionnaireController:
    name:
      CSharp:
      - id: UI.QuestionnaireController
        name: QuestionnaireController
        nameWithType: QuestionnaireController
        qualifiedName: UI.QuestionnaireController
      VB:
      - id: UI.QuestionnaireController
        name: QuestionnaireController
        nameWithType: QuestionnaireController
        qualifiedName: UI.QuestionnaireController
    isDefinition: true
    commentId: T:UI.QuestionnaireController
  UI.QuestionnaireController.Answer.#ctor*:
    name:
      CSharp:
      - id: UI.QuestionnaireController.Answer.#ctor*
        name: Answer
        nameWithType: QuestionnaireController.Answer.Answer
        qualifiedName: UI.QuestionnaireController.Answer.Answer
      VB:
      - id: UI.QuestionnaireController.Answer.#ctor*
        name: Answer
        nameWithType: QuestionnaireController.Answer.Answer
        qualifiedName: UI.QuestionnaireController.Answer.Answer
    isDefinition: true
    commentId: Overload:UI.QuestionnaireController.Answer.#ctor
  UI.QuestionnaireController.Answer:
    name:
      CSharp:
      - id: UI.QuestionnaireController.Answer
        name: QuestionnaireController.Answer
        nameWithType: QuestionnaireController.Answer
        qualifiedName: UI.QuestionnaireController.Answer
      VB:
      - id: UI.QuestionnaireController.Answer
        name: QuestionnaireController.Answer
        nameWithType: QuestionnaireController.Answer
        qualifiedName: UI.QuestionnaireController.Answer
    isDefinition: true
    commentId: T:UI.QuestionnaireController.Answer
  UI.SaveArea:
    name:
      CSharp:
      - id: UI.SaveArea
        name: SaveArea
        nameWithType: SaveArea
        qualifiedName: UI.SaveArea
      VB:
      - id: UI.SaveArea
        name: SaveArea
        nameWithType: SaveArea
        qualifiedName: UI.SaveArea
    isDefinition: true
    commentId: T:UI.SaveArea
  UI.StreamVideo.StartVideo*:
    name:
      CSharp:
      - id: UI.StreamVideo.StartVideo*
        name: StartVideo
        nameWithType: StreamVideo.StartVideo
        qualifiedName: UI.StreamVideo.StartVideo
      VB:
      - id: UI.StreamVideo.StartVideo*
        name: StartVideo
        nameWithType: StreamVideo.StartVideo
        qualifiedName: UI.StreamVideo.StartVideo
    isDefinition: true
    commentId: Overload:UI.StreamVideo.StartVideo
  UI.StreamVideo:
    name:
      CSharp:
      - id: UI.StreamVideo
        name: StreamVideo
        nameWithType: StreamVideo
        qualifiedName: UI.StreamVideo
      VB:
      - id: UI.StreamVideo
        name: StreamVideo
        nameWithType: StreamVideo
        qualifiedName: UI.StreamVideo
    isDefinition: true
    commentId: T:UI.StreamVideo
  UI.TopPanelController:
    name:
      CSharp:
      - id: UI.TopPanelController
        name: TopPanelController
        nameWithType: TopPanelController
        qualifiedName: UI.TopPanelController
      VB:
      - id: UI.TopPanelController
        name: TopPanelController
        nameWithType: TopPanelController
        qualifiedName: UI.TopPanelController
    isDefinition: true
    commentId: T:UI.TopPanelController
  Visual_Scripting:
    name:
      CSharp:
      - name: Visual_Scripting
        nameWithType: Visual_Scripting
        qualifiedName: Visual_Scripting
      VB:
      - name: Visual_Scripting
        nameWithType: Visual_Scripting
        qualifiedName: Visual_Scripting
    isDefinition: true
    commentId: N:Visual_Scripting
  Visual_Scripting.Action.TrainARActionChoices:
    name:
      CSharp:
      - id: Visual_Scripting.Action.TrainARActionChoices
        name: Action.TrainARActionChoices
        nameWithType: Action.TrainARActionChoices
        qualifiedName: Visual_Scripting.Action.TrainARActionChoices
      VB:
      - id: Visual_Scripting.Action.TrainARActionChoices
        name: Action.TrainARActionChoices
        nameWithType: Action.TrainARActionChoices
        qualifiedName: Visual_Scripting.Action.TrainARActionChoices
    isDefinition: true
    parent: Visual_Scripting
    commentId: T:Visual_Scripting.Action.TrainARActionChoices
  Global.ControlInput:
    name:
      CSharp:
      - id: Global.ControlInput
        name: ControlInput
        nameWithType: ControlInput
        qualifiedName: ControlInput
        isExternal: true
      VB:
      - id: Global.ControlInput
        name: ControlInput
        nameWithType: ControlInput
        qualifiedName: ControlInput
        isExternal: true
    isDefinition: true
  Visual_Scripting.Action.InputFlow*:
    name:
      CSharp:
      - id: Visual_Scripting.Action.InputFlow*
        name: InputFlow
        nameWithType: Action.InputFlow
        qualifiedName: Visual_Scripting.Action.InputFlow
      VB:
      - id: Visual_Scripting.Action.InputFlow*
        name: InputFlow
        nameWithType: Action.InputFlow
        qualifiedName: Visual_Scripting.Action.InputFlow
    isDefinition: true
    commentId: Overload:Visual_Scripting.Action.InputFlow
  Global.ControlOutput:
    name:
      CSharp:
      - id: Global.ControlOutput
        name: ControlOutput
        nameWithType: ControlOutput
        qualifiedName: ControlOutput
        isExternal: true
      VB:
      - id: Global.ControlOutput
        name: ControlOutput
        nameWithType: ControlOutput
        qualifiedName: ControlOutput
        isExternal: true
    isDefinition: true
  Visual_Scripting.Action.CorrectAction*:
    name:
      CSharp:
      - id: Visual_Scripting.Action.CorrectAction*
        name: CorrectAction
        nameWithType: Action.CorrectAction
        qualifiedName: Visual_Scripting.Action.CorrectAction
      VB:
      - id: Visual_Scripting.Action.CorrectAction*
        name: CorrectAction
        nameWithType: Action.CorrectAction
        qualifiedName: Visual_Scripting.Action.CorrectAction
    isDefinition: true
    commentId: Overload:Visual_Scripting.Action.CorrectAction
  Visual_Scripting.Action.IncorrectAction*:
    name:
      CSharp:
      - id: Visual_Scripting.Action.IncorrectAction*
        name: IncorrectAction
        nameWithType: Action.IncorrectAction
        qualifiedName: Visual_Scripting.Action.IncorrectAction
      VB:
      - id: Visual_Scripting.Action.IncorrectAction*
        name: IncorrectAction
        nameWithType: Action.IncorrectAction
        qualifiedName: Visual_Scripting.Action.IncorrectAction
    isDefinition: true
    commentId: Overload:Visual_Scripting.Action.IncorrectAction
  Global.ValueInput:
    name:
      CSharp:
      - id: Global.ValueInput
        name: ValueInput
        nameWithType: ValueInput
        qualifiedName: ValueInput
        isExternal: true
      VB:
      - id: Global.ValueInput
        name: ValueInput
        nameWithType: ValueInput
        qualifiedName: ValueInput
        isExternal: true
    isDefinition: true
  Visual_Scripting.Action.ARCombinableName1*:
    name:
      CSharp:
      - id: Visual_Scripting.Action.ARCombinableName1*
        name: ARCombinableName1
        nameWithType: Action.ARCombinableName1
        qualifiedName: Visual_Scripting.Action.ARCombinableName1
      VB:
      - id: Visual_Scripting.Action.ARCombinableName1*
        name: ARCombinableName1
        nameWithType: Action.ARCombinableName1
        qualifiedName: Visual_Scripting.Action.ARCombinableName1
    isDefinition: true
    commentId: Overload:Visual_Scripting.Action.ARCombinableName1
  Visual_Scripting.Action.ARCombinableName2*:
    name:
      CSharp:
      - id: Visual_Scripting.Action.ARCombinableName2*
        name: ARCombinableName2
        nameWithType: Action.ARCombinableName2
        qualifiedName: Visual_Scripting.Action.ARCombinableName2
      VB:
      - id: Visual_Scripting.Action.ARCombinableName2*
        name: ARCombinableName2
        nameWithType: Action.ARCombinableName2
        qualifiedName: Visual_Scripting.Action.ARCombinableName2
    isDefinition: true
    commentId: Overload:Visual_Scripting.Action.ARCombinableName2
  Global.GraphReference:
    name:
      CSharp:
      - id: Global.GraphReference
        name: GraphReference
        nameWithType: GraphReference
        qualifiedName: GraphReference
        isExternal: true
      VB:
      - id: Global.GraphReference
        name: GraphReference
        nameWithType: GraphReference
        qualifiedName: GraphReference
        isExternal: true
    isDefinition: true
  Visual_Scripting.Action.graphReference*:
    name:
      CSharp:
      - id: Visual_Scripting.Action.graphReference*
        name: graphReference
        nameWithType: Action.graphReference
        qualifiedName: Visual_Scripting.Action.graphReference
      VB:
      - id: Visual_Scripting.Action.graphReference*
        name: graphReference
        nameWithType: Action.graphReference
        qualifiedName: Visual_Scripting.Action.graphReference
    isDefinition: true
    commentId: Overload:Visual_Scripting.Action.graphReference
  Visual_Scripting.Action.ARInteractableName*:
    name:
      CSharp:
      - id: Visual_Scripting.Action.ARInteractableName*
        name: ARInteractableName
        nameWithType: Action.ARInteractableName
        qualifiedName: Visual_Scripting.Action.ARInteractableName
      VB:
      - id: Visual_Scripting.Action.ARInteractableName*
        name: ARInteractableName
        nameWithType: Action.ARInteractableName
        qualifiedName: Visual_Scripting.Action.ARInteractableName
    isDefinition: true
    commentId: Overload:Visual_Scripting.Action.ARInteractableName
  Visual_Scripting.Action.CorrectParameterText*:
    name:
      CSharp:
      - id: Visual_Scripting.Action.CorrectParameterText*
        name: CorrectParameterText
        nameWithType: Action.CorrectParameterText
        qualifiedName: Visual_Scripting.Action.CorrectParameterText
      VB:
      - id: Visual_Scripting.Action.CorrectParameterText*
        name: CorrectParameterText
        nameWithType: Action.CorrectParameterText
        qualifiedName: Visual_Scripting.Action.CorrectParameterText
    isDefinition: true
    commentId: Overload:Visual_Scripting.Action.CorrectParameterText
  Visual_Scripting.Action.Definition*:
    name:
      CSharp:
      - id: Visual_Scripting.Action.Definition*
        name: Definition
        nameWithType: Action.Definition
        qualifiedName: Visual_Scripting.Action.Definition
      VB:
      - id: Visual_Scripting.Action.Definition*
        name: Definition
        nameWithType: Action.Definition
        qualifiedName: Visual_Scripting.Action.Definition
    isDefinition: true
    commentId: Overload:Visual_Scripting.Action.Definition
  Visual_Scripting.Action:
    name:
      CSharp:
      - id: Visual_Scripting.Action
        name: Action
        nameWithType: Action
        qualifiedName: Visual_Scripting.Action
      VB:
      - id: Visual_Scripting.Action
        name: Action
        nameWithType: Action
        qualifiedName: Visual_Scripting.Action
    isDefinition: true
    commentId: T:Visual_Scripting.Action
  Visual_Scripting.ActionFork.TrainARActionChoices:
    name:
      CSharp:
      - id: Visual_Scripting.ActionFork.TrainARActionChoices
        name: ActionFork.TrainARActionChoices
        nameWithType: ActionFork.TrainARActionChoices
        qualifiedName: Visual_Scripting.ActionFork.TrainARActionChoices
      VB:
      - id: Visual_Scripting.ActionFork.TrainARActionChoices
        name: ActionFork.TrainARActionChoices
        nameWithType: ActionFork.TrainARActionChoices
        qualifiedName: Visual_Scripting.ActionFork.TrainARActionChoices
    isDefinition: true
    parent: Visual_Scripting
    commentId: T:Visual_Scripting.ActionFork.TrainARActionChoices
  Visual_Scripting.ActionFork.InputFlow*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionFork.InputFlow*
        name: InputFlow
        nameWithType: ActionFork.InputFlow
        qualifiedName: Visual_Scripting.ActionFork.InputFlow
      VB:
      - id: Visual_Scripting.ActionFork.InputFlow*
        name: InputFlow
        nameWithType: ActionFork.InputFlow
        qualifiedName: Visual_Scripting.ActionFork.InputFlow
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionFork.InputFlow
  System.Collections.Generic.List{ControlOutput}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.ControlOutput
        name: ControlOutput
        nameWithType: ControlOutput
        qualifiedName: ControlOutput
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.ControlOutput
        name: ControlOutput
        nameWithType: ControlOutput
        qualifiedName: ControlOutput
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{ControlOutput}
  Visual_Scripting.ActionFork.CorrectActions*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionFork.CorrectActions*
        name: CorrectActions
        nameWithType: ActionFork.CorrectActions
        qualifiedName: Visual_Scripting.ActionFork.CorrectActions
      VB:
      - id: Visual_Scripting.ActionFork.CorrectActions*
        name: CorrectActions
        nameWithType: ActionFork.CorrectActions
        qualifiedName: Visual_Scripting.ActionFork.CorrectActions
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionFork.CorrectActions
  Visual_Scripting.ActionFork.IncorrectAction*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionFork.IncorrectAction*
        name: IncorrectAction
        nameWithType: ActionFork.IncorrectAction
        qualifiedName: Visual_Scripting.ActionFork.IncorrectAction
      VB:
      - id: Visual_Scripting.ActionFork.IncorrectAction*
        name: IncorrectAction
        nameWithType: ActionFork.IncorrectAction
        qualifiedName: Visual_Scripting.ActionFork.IncorrectAction
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionFork.IncorrectAction
  System.Collections.Generic.List{ValueInput}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Global.ValueInput
        name: ValueInput
        nameWithType: ValueInput
        qualifiedName: ValueInput
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Global.ValueInput
        name: ValueInput
        nameWithType: ValueInput
        qualifiedName: ValueInput
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{ValueInput}
  Visual_Scripting.ActionFork.ARCombinableName1s*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionFork.ARCombinableName1s*
        name: ARCombinableName1s
        nameWithType: ActionFork.ARCombinableName1s
        qualifiedName: Visual_Scripting.ActionFork.ARCombinableName1s
      VB:
      - id: Visual_Scripting.ActionFork.ARCombinableName1s*
        name: ARCombinableName1s
        nameWithType: ActionFork.ARCombinableName1s
        qualifiedName: Visual_Scripting.ActionFork.ARCombinableName1s
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionFork.ARCombinableName1s
  Visual_Scripting.ActionFork.ARCombinableName2s*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionFork.ARCombinableName2s*
        name: ARCombinableName2s
        nameWithType: ActionFork.ARCombinableName2s
        qualifiedName: Visual_Scripting.ActionFork.ARCombinableName2s
      VB:
      - id: Visual_Scripting.ActionFork.ARCombinableName2s*
        name: ARCombinableName2s
        nameWithType: ActionFork.ARCombinableName2s
        qualifiedName: Visual_Scripting.ActionFork.ARCombinableName2s
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionFork.ARCombinableName2s
  Visual_Scripting.ActionFork.graphReference*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionFork.graphReference*
        name: graphReference
        nameWithType: ActionFork.graphReference
        qualifiedName: Visual_Scripting.ActionFork.graphReference
      VB:
      - id: Visual_Scripting.ActionFork.graphReference*
        name: graphReference
        nameWithType: ActionFork.graphReference
        qualifiedName: Visual_Scripting.ActionFork.graphReference
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionFork.graphReference
  Visual_Scripting.ActionFork.ARInteractableNames*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionFork.ARInteractableNames*
        name: ARInteractableNames
        nameWithType: ActionFork.ARInteractableNames
        qualifiedName: Visual_Scripting.ActionFork.ARInteractableNames
      VB:
      - id: Visual_Scripting.ActionFork.ARInteractableNames*
        name: ARInteractableNames
        nameWithType: ActionFork.ARInteractableNames
        qualifiedName: Visual_Scripting.ActionFork.ARInteractableNames
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionFork.ARInteractableNames
  Visual_Scripting.ActionFork.CorrectParameterTexts*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionFork.CorrectParameterTexts*
        name: CorrectParameterTexts
        nameWithType: ActionFork.CorrectParameterTexts
        qualifiedName: Visual_Scripting.ActionFork.CorrectParameterTexts
      VB:
      - id: Visual_Scripting.ActionFork.CorrectParameterTexts*
        name: CorrectParameterTexts
        nameWithType: ActionFork.CorrectParameterTexts
        qualifiedName: Visual_Scripting.ActionFork.CorrectParameterTexts
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionFork.CorrectParameterTexts
  Visual_Scripting.ActionFork.Definition*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionFork.Definition*
        name: Definition
        nameWithType: ActionFork.Definition
        qualifiedName: Visual_Scripting.ActionFork.Definition
      VB:
      - id: Visual_Scripting.ActionFork.Definition*
        name: Definition
        nameWithType: ActionFork.Definition
        qualifiedName: Visual_Scripting.ActionFork.Definition
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionFork.Definition
  Visual_Scripting.ActionFork:
    name:
      CSharp:
      - id: Visual_Scripting.ActionFork
        name: ActionFork
        nameWithType: ActionFork
        qualifiedName: Visual_Scripting.ActionFork
      VB:
      - id: Visual_Scripting.ActionFork
        name: ActionFork
        nameWithType: ActionFork
        qualifiedName: Visual_Scripting.ActionFork
    isDefinition: true
    commentId: T:Visual_Scripting.ActionFork
  Visual_Scripting.ActionMulti.TrainARActionChoices:
    name:
      CSharp:
      - id: Visual_Scripting.ActionMulti.TrainARActionChoices
        name: ActionMulti.TrainARActionChoices
        nameWithType: ActionMulti.TrainARActionChoices
        qualifiedName: Visual_Scripting.ActionMulti.TrainARActionChoices
      VB:
      - id: Visual_Scripting.ActionMulti.TrainARActionChoices
        name: ActionMulti.TrainARActionChoices
        nameWithType: ActionMulti.TrainARActionChoices
        qualifiedName: Visual_Scripting.ActionMulti.TrainARActionChoices
    isDefinition: true
    parent: Visual_Scripting
    commentId: T:Visual_Scripting.ActionMulti.TrainARActionChoices
  Visual_Scripting.ActionMulti.InputFlow*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionMulti.InputFlow*
        name: InputFlow
        nameWithType: ActionMulti.InputFlow
        qualifiedName: Visual_Scripting.ActionMulti.InputFlow
      VB:
      - id: Visual_Scripting.ActionMulti.InputFlow*
        name: InputFlow
        nameWithType: ActionMulti.InputFlow
        qualifiedName: Visual_Scripting.ActionMulti.InputFlow
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionMulti.InputFlow
  Visual_Scripting.ActionMulti.AllActionsCorrect*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionMulti.AllActionsCorrect*
        name: AllActionsCorrect
        nameWithType: ActionMulti.AllActionsCorrect
        qualifiedName: Visual_Scripting.ActionMulti.AllActionsCorrect
      VB:
      - id: Visual_Scripting.ActionMulti.AllActionsCorrect*
        name: AllActionsCorrect
        nameWithType: ActionMulti.AllActionsCorrect
        qualifiedName: Visual_Scripting.ActionMulti.AllActionsCorrect
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionMulti.AllActionsCorrect
  Visual_Scripting.ActionMulti.IncorrectAction*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionMulti.IncorrectAction*
        name: IncorrectAction
        nameWithType: ActionMulti.IncorrectAction
        qualifiedName: Visual_Scripting.ActionMulti.IncorrectAction
      VB:
      - id: Visual_Scripting.ActionMulti.IncorrectAction*
        name: IncorrectAction
        nameWithType: ActionMulti.IncorrectAction
        qualifiedName: Visual_Scripting.ActionMulti.IncorrectAction
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionMulti.IncorrectAction
  Visual_Scripting.ActionMulti.ARCombinableName1s*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionMulti.ARCombinableName1s*
        name: ARCombinableName1s
        nameWithType: ActionMulti.ARCombinableName1s
        qualifiedName: Visual_Scripting.ActionMulti.ARCombinableName1s
      VB:
      - id: Visual_Scripting.ActionMulti.ARCombinableName1s*
        name: ARCombinableName1s
        nameWithType: ActionMulti.ARCombinableName1s
        qualifiedName: Visual_Scripting.ActionMulti.ARCombinableName1s
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionMulti.ARCombinableName1s
  Visual_Scripting.ActionMulti.ARCombinableName2s*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionMulti.ARCombinableName2s*
        name: ARCombinableName2s
        nameWithType: ActionMulti.ARCombinableName2s
        qualifiedName: Visual_Scripting.ActionMulti.ARCombinableName2s
      VB:
      - id: Visual_Scripting.ActionMulti.ARCombinableName2s*
        name: ARCombinableName2s
        nameWithType: ActionMulti.ARCombinableName2s
        qualifiedName: Visual_Scripting.ActionMulti.ARCombinableName2s
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionMulti.ARCombinableName2s
  Visual_Scripting.ActionMulti.graphReference*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionMulti.graphReference*
        name: graphReference
        nameWithType: ActionMulti.graphReference
        qualifiedName: Visual_Scripting.ActionMulti.graphReference
      VB:
      - id: Visual_Scripting.ActionMulti.graphReference*
        name: graphReference
        nameWithType: ActionMulti.graphReference
        qualifiedName: Visual_Scripting.ActionMulti.graphReference
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionMulti.graphReference
  Visual_Scripting.ActionMulti.ARInteractableNames*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionMulti.ARInteractableNames*
        name: ARInteractableNames
        nameWithType: ActionMulti.ARInteractableNames
        qualifiedName: Visual_Scripting.ActionMulti.ARInteractableNames
      VB:
      - id: Visual_Scripting.ActionMulti.ARInteractableNames*
        name: ARInteractableNames
        nameWithType: ActionMulti.ARInteractableNames
        qualifiedName: Visual_Scripting.ActionMulti.ARInteractableNames
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionMulti.ARInteractableNames
  Visual_Scripting.ActionMulti.CorrectParameterTexts*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionMulti.CorrectParameterTexts*
        name: CorrectParameterTexts
        nameWithType: ActionMulti.CorrectParameterTexts
        qualifiedName: Visual_Scripting.ActionMulti.CorrectParameterTexts
      VB:
      - id: Visual_Scripting.ActionMulti.CorrectParameterTexts*
        name: CorrectParameterTexts
        nameWithType: ActionMulti.CorrectParameterTexts
        qualifiedName: Visual_Scripting.ActionMulti.CorrectParameterTexts
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionMulti.CorrectParameterTexts
  Visual_Scripting.ActionMulti.Definition*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionMulti.Definition*
        name: Definition
        nameWithType: ActionMulti.Definition
        qualifiedName: Visual_Scripting.ActionMulti.Definition
      VB:
      - id: Visual_Scripting.ActionMulti.Definition*
        name: Definition
        nameWithType: ActionMulti.Definition
        qualifiedName: Visual_Scripting.ActionMulti.Definition
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionMulti.Definition
  Visual_Scripting.ActionMulti:
    name:
      CSharp:
      - id: Visual_Scripting.ActionMulti
        name: ActionMulti
        nameWithType: ActionMulti
        qualifiedName: Visual_Scripting.ActionMulti
      VB:
      - id: Visual_Scripting.ActionMulti
        name: ActionMulti
        nameWithType: ActionMulti
        qualifiedName: Visual_Scripting.ActionMulti
    isDefinition: true
    commentId: T:Visual_Scripting.ActionMulti
  Visual_Scripting.ActionUI.TrainARUIActionChoices:
    name:
      CSharp:
      - id: Visual_Scripting.ActionUI.TrainARUIActionChoices
        name: ActionUI.TrainARUIActionChoices
        nameWithType: ActionUI.TrainARUIActionChoices
        qualifiedName: Visual_Scripting.ActionUI.TrainARUIActionChoices
      VB:
      - id: Visual_Scripting.ActionUI.TrainARUIActionChoices
        name: ActionUI.TrainARUIActionChoices
        nameWithType: ActionUI.TrainARUIActionChoices
        qualifiedName: Visual_Scripting.ActionUI.TrainARUIActionChoices
    isDefinition: true
    parent: Visual_Scripting
    commentId: T:Visual_Scripting.ActionUI.TrainARUIActionChoices
  Visual_Scripting.ActionUI.InputFlow*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionUI.InputFlow*
        name: InputFlow
        nameWithType: ActionUI.InputFlow
        qualifiedName: Visual_Scripting.ActionUI.InputFlow
      VB:
      - id: Visual_Scripting.ActionUI.InputFlow*
        name: InputFlow
        nameWithType: ActionUI.InputFlow
        qualifiedName: Visual_Scripting.ActionUI.InputFlow
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionUI.InputFlow
  Visual_Scripting.ActionUI.CorrectAction*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionUI.CorrectAction*
        name: CorrectAction
        nameWithType: ActionUI.CorrectAction
        qualifiedName: Visual_Scripting.ActionUI.CorrectAction
      VB:
      - id: Visual_Scripting.ActionUI.CorrectAction*
        name: CorrectAction
        nameWithType: ActionUI.CorrectAction
        qualifiedName: Visual_Scripting.ActionUI.CorrectAction
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionUI.CorrectAction
  Visual_Scripting.ActionUI.IncorrectAction*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionUI.IncorrectAction*
        name: IncorrectAction
        nameWithType: ActionUI.IncorrectAction
        qualifiedName: Visual_Scripting.ActionUI.IncorrectAction
      VB:
      - id: Visual_Scripting.ActionUI.IncorrectAction*
        name: IncorrectAction
        nameWithType: ActionUI.IncorrectAction
        qualifiedName: Visual_Scripting.ActionUI.IncorrectAction
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionUI.IncorrectAction
  Visual_Scripting.ActionUI.Question*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionUI.Question*
        name: Question
        nameWithType: ActionUI.Question
        qualifiedName: Visual_Scripting.ActionUI.Question
      VB:
      - id: Visual_Scripting.ActionUI.Question*
        name: Question
        nameWithType: ActionUI.Question
        qualifiedName: Visual_Scripting.ActionUI.Question
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionUI.Question
  Visual_Scripting.ActionUI.CorrectAnswers*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionUI.CorrectAnswers*
        name: CorrectAnswers
        nameWithType: ActionUI.CorrectAnswers
        qualifiedName: Visual_Scripting.ActionUI.CorrectAnswers
      VB:
      - id: Visual_Scripting.ActionUI.CorrectAnswers*
        name: CorrectAnswers
        nameWithType: ActionUI.CorrectAnswers
        qualifiedName: Visual_Scripting.ActionUI.CorrectAnswers
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionUI.CorrectAnswers
  Visual_Scripting.ActionUI.CorrectAnswersFeedback*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionUI.CorrectAnswersFeedback*
        name: CorrectAnswersFeedback
        nameWithType: ActionUI.CorrectAnswersFeedback
        qualifiedName: Visual_Scripting.ActionUI.CorrectAnswersFeedback
      VB:
      - id: Visual_Scripting.ActionUI.CorrectAnswersFeedback*
        name: CorrectAnswersFeedback
        nameWithType: ActionUI.CorrectAnswersFeedback
        qualifiedName: Visual_Scripting.ActionUI.CorrectAnswersFeedback
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionUI.CorrectAnswersFeedback
  Visual_Scripting.ActionUI.WrongAnswers*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionUI.WrongAnswers*
        name: WrongAnswers
        nameWithType: ActionUI.WrongAnswers
        qualifiedName: Visual_Scripting.ActionUI.WrongAnswers
      VB:
      - id: Visual_Scripting.ActionUI.WrongAnswers*
        name: WrongAnswers
        nameWithType: ActionUI.WrongAnswers
        qualifiedName: Visual_Scripting.ActionUI.WrongAnswers
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionUI.WrongAnswers
  Visual_Scripting.ActionUI.WrongAnswersFeedback*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionUI.WrongAnswersFeedback*
        name: WrongAnswersFeedback
        nameWithType: ActionUI.WrongAnswersFeedback
        qualifiedName: Visual_Scripting.ActionUI.WrongAnswersFeedback
      VB:
      - id: Visual_Scripting.ActionUI.WrongAnswersFeedback*
        name: WrongAnswersFeedback
        nameWithType: ActionUI.WrongAnswersFeedback
        qualifiedName: Visual_Scripting.ActionUI.WrongAnswersFeedback
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionUI.WrongAnswersFeedback
  Visual_Scripting.ActionUI.graphReference*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionUI.graphReference*
        name: graphReference
        nameWithType: ActionUI.graphReference
        qualifiedName: Visual_Scripting.ActionUI.graphReference
      VB:
      - id: Visual_Scripting.ActionUI.graphReference*
        name: graphReference
        nameWithType: ActionUI.graphReference
        qualifiedName: Visual_Scripting.ActionUI.graphReference
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionUI.graphReference
  Visual_Scripting.ActionUI.Definition*:
    name:
      CSharp:
      - id: Visual_Scripting.ActionUI.Definition*
        name: Definition
        nameWithType: ActionUI.Definition
        qualifiedName: Visual_Scripting.ActionUI.Definition
      VB:
      - id: Visual_Scripting.ActionUI.Definition*
        name: Definition
        nameWithType: ActionUI.Definition
        qualifiedName: Visual_Scripting.ActionUI.Definition
    isDefinition: true
    commentId: Overload:Visual_Scripting.ActionUI.Definition
  Visual_Scripting.ActionUI:
    name:
      CSharp:
      - id: Visual_Scripting.ActionUI
        name: ActionUI
        nameWithType: ActionUI
        qualifiedName: Visual_Scripting.ActionUI
      VB:
      - id: Visual_Scripting.ActionUI
        name: ActionUI
        nameWithType: ActionUI
        qualifiedName: Visual_Scripting.ActionUI
    isDefinition: true
    commentId: T:Visual_Scripting.ActionUI
  Visual_Scripting.Conclusion.InputFlow*:
    name:
      CSharp:
      - id: Visual_Scripting.Conclusion.InputFlow*
        name: InputFlow
        nameWithType: Conclusion.InputFlow
        qualifiedName: Visual_Scripting.Conclusion.InputFlow
      VB:
      - id: Visual_Scripting.Conclusion.InputFlow*
        name: InputFlow
        nameWithType: Conclusion.InputFlow
        qualifiedName: Visual_Scripting.Conclusion.InputFlow
    isDefinition: true
    commentId: Overload:Visual_Scripting.Conclusion.InputFlow
  Visual_Scripting.Conclusion.Definition*:
    name:
      CSharp:
      - id: Visual_Scripting.Conclusion.Definition*
        name: Definition
        nameWithType: Conclusion.Definition
        qualifiedName: Visual_Scripting.Conclusion.Definition
      VB:
      - id: Visual_Scripting.Conclusion.Definition*
        name: Definition
        nameWithType: Conclusion.Definition
        qualifiedName: Visual_Scripting.Conclusion.Definition
    isDefinition: true
    commentId: Overload:Visual_Scripting.Conclusion.Definition
  Visual_Scripting.Conclusion:
    name:
      CSharp:
      - id: Visual_Scripting.Conclusion
        name: Conclusion
        nameWithType: Conclusion
        qualifiedName: Visual_Scripting.Conclusion
      VB:
      - id: Visual_Scripting.Conclusion
        name: Conclusion
        nameWithType: Conclusion
        qualifiedName: Visual_Scripting.Conclusion
    isDefinition: true
    commentId: T:Visual_Scripting.Conclusion
  Visual_Scripting.Feedback.InputFlow*:
    name:
      CSharp:
      - id: Visual_Scripting.Feedback.InputFlow*
        name: InputFlow
        nameWithType: Feedback.InputFlow
        qualifiedName: Visual_Scripting.Feedback.InputFlow
      VB:
      - id: Visual_Scripting.Feedback.InputFlow*
        name: InputFlow
        nameWithType: Feedback.InputFlow
        qualifiedName: Visual_Scripting.Feedback.InputFlow
    isDefinition: true
    commentId: Overload:Visual_Scripting.Feedback.InputFlow
  Visual_Scripting.Feedback.OutputFlow*:
    name:
      CSharp:
      - id: Visual_Scripting.Feedback.OutputFlow*
        name: OutputFlow
        nameWithType: Feedback.OutputFlow
        qualifiedName: Visual_Scripting.Feedback.OutputFlow
      VB:
      - id: Visual_Scripting.Feedback.OutputFlow*
        name: OutputFlow
        nameWithType: Feedback.OutputFlow
        qualifiedName: Visual_Scripting.Feedback.OutputFlow
    isDefinition: true
    commentId: Overload:Visual_Scripting.Feedback.OutputFlow
  Visual_Scripting.Feedback.HeaderText*:
    name:
      CSharp:
      - id: Visual_Scripting.Feedback.HeaderText*
        name: HeaderText
        nameWithType: Feedback.HeaderText
        qualifiedName: Visual_Scripting.Feedback.HeaderText
      VB:
      - id: Visual_Scripting.Feedback.HeaderText*
        name: HeaderText
        nameWithType: Feedback.HeaderText
        qualifiedName: Visual_Scripting.Feedback.HeaderText
    isDefinition: true
    commentId: Overload:Visual_Scripting.Feedback.HeaderText
  Visual_Scripting.Feedback.ErrorText*:
    name:
      CSharp:
      - id: Visual_Scripting.Feedback.ErrorText*
        name: ErrorText
        nameWithType: Feedback.ErrorText
        qualifiedName: Visual_Scripting.Feedback.ErrorText
      VB:
      - id: Visual_Scripting.Feedback.ErrorText*
        name: ErrorText
        nameWithType: Feedback.ErrorText
        qualifiedName: Visual_Scripting.Feedback.ErrorText
    isDefinition: true
    commentId: Overload:Visual_Scripting.Feedback.ErrorText
  Visual_Scripting.Feedback.Definition*:
    name:
      CSharp:
      - id: Visual_Scripting.Feedback.Definition*
        name: Definition
        nameWithType: Feedback.Definition
        qualifiedName: Visual_Scripting.Feedback.Definition
      VB:
      - id: Visual_Scripting.Feedback.Definition*
        name: Definition
        nameWithType: Feedback.Definition
        qualifiedName: Visual_Scripting.Feedback.Definition
    isDefinition: true
    commentId: Overload:Visual_Scripting.Feedback.Definition
  Visual_Scripting.Feedback:
    name:
      CSharp:
      - id: Visual_Scripting.Feedback
        name: Feedback
        nameWithType: Feedback
        qualifiedName: Visual_Scripting.Feedback
      VB:
      - id: Visual_Scripting.Feedback
        name: Feedback
        nameWithType: Feedback
        qualifiedName: Visual_Scripting.Feedback
    isDefinition: true
    commentId: T:Visual_Scripting.Feedback
  Visual_Scripting.Insights.InputFlow*:
    name:
      CSharp:
      - id: Visual_Scripting.Insights.InputFlow*
        name: InputFlow
        nameWithType: Insights.InputFlow
        qualifiedName: Visual_Scripting.Insights.InputFlow
      VB:
      - id: Visual_Scripting.Insights.InputFlow*
        name: InputFlow
        nameWithType: Insights.InputFlow
        qualifiedName: Visual_Scripting.Insights.InputFlow
    isDefinition: true
    commentId: Overload:Visual_Scripting.Insights.InputFlow
  Visual_Scripting.Insights.OutputFlow*:
    name:
      CSharp:
      - id: Visual_Scripting.Insights.OutputFlow*
        name: OutputFlow
        nameWithType: Insights.OutputFlow
        qualifiedName: Visual_Scripting.Insights.OutputFlow
      VB:
      - id: Visual_Scripting.Insights.OutputFlow*
        name: OutputFlow
        nameWithType: Insights.OutputFlow
        qualifiedName: Visual_Scripting.Insights.OutputFlow
    isDefinition: true
    commentId: Overload:Visual_Scripting.Insights.OutputFlow
  Visual_Scripting.Insights.InsightText*:
    name:
      CSharp:
      - id: Visual_Scripting.Insights.InsightText*
        name: InsightText
        nameWithType: Insights.InsightText
        qualifiedName: Visual_Scripting.Insights.InsightText
      VB:
      - id: Visual_Scripting.Insights.InsightText*
        name: InsightText
        nameWithType: Insights.InsightText
        qualifiedName: Visual_Scripting.Insights.InsightText
    isDefinition: true
    commentId: Overload:Visual_Scripting.Insights.InsightText
  Visual_Scripting.Insights.InsightAudioClip*:
    name:
      CSharp:
      - id: Visual_Scripting.Insights.InsightAudioClip*
        name: InsightAudioClip
        nameWithType: Insights.InsightAudioClip
        qualifiedName: Visual_Scripting.Insights.InsightAudioClip
      VB:
      - id: Visual_Scripting.Insights.InsightAudioClip*
        name: InsightAudioClip
        nameWithType: Insights.InsightAudioClip
        qualifiedName: Visual_Scripting.Insights.InsightAudioClip
    isDefinition: true
    commentId: Overload:Visual_Scripting.Insights.InsightAudioClip
  Visual_Scripting.Insights.InsightExpertImage*:
    name:
      CSharp:
      - id: Visual_Scripting.Insights.InsightExpertImage*
        name: InsightExpertImage
        nameWithType: Insights.InsightExpertImage
        qualifiedName: Visual_Scripting.Insights.InsightExpertImage
      VB:
      - id: Visual_Scripting.Insights.InsightExpertImage*
        name: InsightExpertImage
        nameWithType: Insights.InsightExpertImage
        qualifiedName: Visual_Scripting.Insights.InsightExpertImage
    isDefinition: true
    commentId: Overload:Visual_Scripting.Insights.InsightExpertImage
  Visual_Scripting.Insights.Definition*:
    name:
      CSharp:
      - id: Visual_Scripting.Insights.Definition*
        name: Definition
        nameWithType: Insights.Definition
        qualifiedName: Visual_Scripting.Insights.Definition
      VB:
      - id: Visual_Scripting.Insights.Definition*
        name: Definition
        nameWithType: Insights.Definition
        qualifiedName: Visual_Scripting.Insights.Definition
    isDefinition: true
    commentId: Overload:Visual_Scripting.Insights.Definition
  Visual_Scripting.Insights:
    name:
      CSharp:
      - id: Visual_Scripting.Insights
        name: Insights
        nameWithType: Insights
        qualifiedName: Visual_Scripting.Insights
      VB:
      - id: Visual_Scripting.Insights
        name: Insights
        nameWithType: Insights
        qualifiedName: Visual_Scripting.Insights
    isDefinition: true
    commentId: T:Visual_Scripting.Insights
  Visual_Scripting.Instructions.InputFlow*:
    name:
      CSharp:
      - id: Visual_Scripting.Instructions.InputFlow*
        name: InputFlow
        nameWithType: Instructions.InputFlow
        qualifiedName: Visual_Scripting.Instructions.InputFlow
      VB:
      - id: Visual_Scripting.Instructions.InputFlow*
        name: InputFlow
        nameWithType: Instructions.InputFlow
        qualifiedName: Visual_Scripting.Instructions.InputFlow
    isDefinition: true
    commentId: Overload:Visual_Scripting.Instructions.InputFlow
  Visual_Scripting.Instructions.OutputFlow*:
    name:
      CSharp:
      - id: Visual_Scripting.Instructions.OutputFlow*
        name: OutputFlow
        nameWithType: Instructions.OutputFlow
        qualifiedName: Visual_Scripting.Instructions.OutputFlow
      VB:
      - id: Visual_Scripting.Instructions.OutputFlow*
        name: OutputFlow
        nameWithType: Instructions.OutputFlow
        qualifiedName: Visual_Scripting.Instructions.OutputFlow
    isDefinition: true
    commentId: Overload:Visual_Scripting.Instructions.OutputFlow
  Visual_Scripting.Instructions.instructionText*:
    name:
      CSharp:
      - id: Visual_Scripting.Instructions.instructionText*
        name: instructionText
        nameWithType: Instructions.instructionText
        qualifiedName: Visual_Scripting.Instructions.instructionText
      VB:
      - id: Visual_Scripting.Instructions.instructionText*
        name: instructionText
        nameWithType: Instructions.instructionText
        qualifiedName: Visual_Scripting.Instructions.instructionText
    isDefinition: true
    commentId: Overload:Visual_Scripting.Instructions.instructionText
  Visual_Scripting.Instructions.progressPercentage*:
    name:
      CSharp:
      - id: Visual_Scripting.Instructions.progressPercentage*
        name: progressPercentage
        nameWithType: Instructions.progressPercentage
        qualifiedName: Visual_Scripting.Instructions.progressPercentage
      VB:
      - id: Visual_Scripting.Instructions.progressPercentage*
        name: progressPercentage
        nameWithType: Instructions.progressPercentage
        qualifiedName: Visual_Scripting.Instructions.progressPercentage
    isDefinition: true
    commentId: Overload:Visual_Scripting.Instructions.progressPercentage
  Visual_Scripting.Instructions.Definition*:
    name:
      CSharp:
      - id: Visual_Scripting.Instructions.Definition*
        name: Definition
        nameWithType: Instructions.Definition
        qualifiedName: Visual_Scripting.Instructions.Definition
      VB:
      - id: Visual_Scripting.Instructions.Definition*
        name: Definition
        nameWithType: Instructions.Definition
        qualifiedName: Visual_Scripting.Instructions.Definition
    isDefinition: true
    commentId: Overload:Visual_Scripting.Instructions.Definition
  Visual_Scripting.Instructions:
    name:
      CSharp:
      - id: Visual_Scripting.Instructions
        name: Instructions
        nameWithType: Instructions
        qualifiedName: Visual_Scripting.Instructions
      VB:
      - id: Visual_Scripting.Instructions
        name: Instructions
        nameWithType: Instructions
        qualifiedName: Visual_Scripting.Instructions
    isDefinition: true
    commentId: T:Visual_Scripting.Instructions
  Visual_Scripting.ObjectHelper.TrainARHelperChoices:
    name:
      CSharp:
      - id: Visual_Scripting.ObjectHelper.TrainARHelperChoices
        name: ObjectHelper.TrainARHelperChoices
        nameWithType: ObjectHelper.TrainARHelperChoices
        qualifiedName: Visual_Scripting.ObjectHelper.TrainARHelperChoices
      VB:
      - id: Visual_Scripting.ObjectHelper.TrainARHelperChoices
        name: ObjectHelper.TrainARHelperChoices
        nameWithType: ObjectHelper.TrainARHelperChoices
        qualifiedName: Visual_Scripting.ObjectHelper.TrainARHelperChoices
    isDefinition: true
    parent: Visual_Scripting
    commentId: T:Visual_Scripting.ObjectHelper.TrainARHelperChoices
  Visual_Scripting.ObjectHelper.InputFlow*:
    name:
      CSharp:
      - id: Visual_Scripting.ObjectHelper.InputFlow*
        name: InputFlow
        nameWithType: ObjectHelper.InputFlow
        qualifiedName: Visual_Scripting.ObjectHelper.InputFlow
      VB:
      - id: Visual_Scripting.ObjectHelper.InputFlow*
        name: InputFlow
        nameWithType: ObjectHelper.InputFlow
        qualifiedName: Visual_Scripting.ObjectHelper.InputFlow
    isDefinition: true
    commentId: Overload:Visual_Scripting.ObjectHelper.InputFlow
  Visual_Scripting.ObjectHelper.OutputFlow*:
    name:
      CSharp:
      - id: Visual_Scripting.ObjectHelper.OutputFlow*
        name: OutputFlow
        nameWithType: ObjectHelper.OutputFlow
        qualifiedName: Visual_Scripting.ObjectHelper.OutputFlow
      VB:
      - id: Visual_Scripting.ObjectHelper.OutputFlow*
        name: OutputFlow
        nameWithType: ObjectHelper.OutputFlow
        qualifiedName: Visual_Scripting.ObjectHelper.OutputFlow
    isDefinition: true
    commentId: Overload:Visual_Scripting.ObjectHelper.OutputFlow
  Visual_Scripting.ObjectHelper.TrainARObjectName*:
    name:
      CSharp:
      - id: Visual_Scripting.ObjectHelper.TrainARObjectName*
        name: TrainARObjectName
        nameWithType: ObjectHelper.TrainARObjectName
        qualifiedName: Visual_Scripting.ObjectHelper.TrainARObjectName
      VB:
      - id: Visual_Scripting.ObjectHelper.TrainARObjectName*
        name: TrainARObjectName
        nameWithType: ObjectHelper.TrainARObjectName
        qualifiedName: Visual_Scripting.ObjectHelper.TrainARObjectName
    isDefinition: true
    commentId: Overload:Visual_Scripting.ObjectHelper.TrainARObjectName
  Visual_Scripting.ObjectHelper.VisibilityToggle*:
    name:
      CSharp:
      - id: Visual_Scripting.ObjectHelper.VisibilityToggle*
        name: VisibilityToggle
        nameWithType: ObjectHelper.VisibilityToggle
        qualifiedName: Visual_Scripting.ObjectHelper.VisibilityToggle
      VB:
      - id: Visual_Scripting.ObjectHelper.VisibilityToggle*
        name: VisibilityToggle
        nameWithType: ObjectHelper.VisibilityToggle
        qualifiedName: Visual_Scripting.ObjectHelper.VisibilityToggle
    isDefinition: true
    commentId: Overload:Visual_Scripting.ObjectHelper.VisibilityToggle
  Visual_Scripting.ObjectHelper.GrabbabilityToggle*:
    name:
      CSharp:
      - id: Visual_Scripting.ObjectHelper.GrabbabilityToggle*
        name: GrabbabilityToggle
        nameWithType: ObjectHelper.GrabbabilityToggle
        qualifiedName: Visual_Scripting.ObjectHelper.GrabbabilityToggle
      VB:
      - id: Visual_Scripting.ObjectHelper.GrabbabilityToggle*
        name: GrabbabilityToggle
        nameWithType: ObjectHelper.GrabbabilityToggle
        qualifiedName: Visual_Scripting.ObjectHelper.GrabbabilityToggle
    isDefinition: true
    commentId: Overload:Visual_Scripting.ObjectHelper.GrabbabilityToggle
  Visual_Scripting.ObjectHelper.InteractabilityToggle*:
    name:
      CSharp:
      - id: Visual_Scripting.ObjectHelper.InteractabilityToggle*
        name: InteractabilityToggle
        nameWithType: ObjectHelper.InteractabilityToggle
        qualifiedName: Visual_Scripting.ObjectHelper.InteractabilityToggle
      VB:
      - id: Visual_Scripting.ObjectHelper.InteractabilityToggle*
        name: InteractabilityToggle
        nameWithType: ObjectHelper.InteractabilityToggle
        qualifiedName: Visual_Scripting.ObjectHelper.InteractabilityToggle
    isDefinition: true
    commentId: Overload:Visual_Scripting.ObjectHelper.InteractabilityToggle
  Visual_Scripting.ObjectHelper.CombinabilityToggle*:
    name:
      CSharp:
      - id: Visual_Scripting.ObjectHelper.CombinabilityToggle*
        name: CombinabilityToggle
        nameWithType: ObjectHelper.CombinabilityToggle
        qualifiedName: Visual_Scripting.ObjectHelper.CombinabilityToggle
      VB:
      - id: Visual_Scripting.ObjectHelper.CombinabilityToggle*
        name: CombinabilityToggle
        nameWithType: ObjectHelper.CombinabilityToggle
        qualifiedName: Visual_Scripting.ObjectHelper.CombinabilityToggle
    isDefinition: true
    commentId: Overload:Visual_Scripting.ObjectHelper.CombinabilityToggle
  Global.ValueOutput:
    name:
      CSharp:
      - id: Global.ValueOutput
        name: ValueOutput
        nameWithType: ValueOutput
        qualifiedName: ValueOutput
        isExternal: true
      VB:
      - id: Global.ValueOutput
        name: ValueOutput
        nameWithType: ValueOutput
        qualifiedName: ValueOutput
        isExternal: true
    isDefinition: true
    commentId: '!:Global.ValueOutput'
  Visual_Scripting.ObjectHelper.objectReference*:
    name:
      CSharp:
      - id: Visual_Scripting.ObjectHelper.objectReference*
        name: objectReference
        nameWithType: ObjectHelper.objectReference
        qualifiedName: Visual_Scripting.ObjectHelper.objectReference
      VB:
      - id: Visual_Scripting.ObjectHelper.objectReference*
        name: objectReference
        nameWithType: ObjectHelper.objectReference
        qualifiedName: Visual_Scripting.ObjectHelper.objectReference
    isDefinition: true
    commentId: Overload:Visual_Scripting.ObjectHelper.objectReference
  Visual_Scripting.ObjectHelper.ObjectMesh*:
    name:
      CSharp:
      - id: Visual_Scripting.ObjectHelper.ObjectMesh*
        name: ObjectMesh
        nameWithType: ObjectHelper.ObjectMesh
        qualifiedName: Visual_Scripting.ObjectHelper.ObjectMesh
      VB:
      - id: Visual_Scripting.ObjectHelper.ObjectMesh*
        name: ObjectMesh
        nameWithType: ObjectHelper.ObjectMesh
        qualifiedName: Visual_Scripting.ObjectHelper.ObjectMesh
    isDefinition: true
    commentId: Overload:Visual_Scripting.ObjectHelper.ObjectMesh
  Visual_Scripting.ObjectHelper.ObjectMaterial*:
    name:
      CSharp:
      - id: Visual_Scripting.ObjectHelper.ObjectMaterial*
        name: ObjectMaterial
        nameWithType: ObjectHelper.ObjectMaterial
        qualifiedName: Visual_Scripting.ObjectHelper.ObjectMaterial
      VB:
      - id: Visual_Scripting.ObjectHelper.ObjectMaterial*
        name: ObjectMaterial
        nameWithType: ObjectHelper.ObjectMaterial
        qualifiedName: Visual_Scripting.ObjectHelper.ObjectMaterial
    isDefinition: true
    commentId: Overload:Visual_Scripting.ObjectHelper.ObjectMaterial
  Visual_Scripting.ObjectHelper.InteractableText*:
    name:
      CSharp:
      - id: Visual_Scripting.ObjectHelper.InteractableText*
        name: InteractableText
        nameWithType: ObjectHelper.InteractableText
        qualifiedName: Visual_Scripting.ObjectHelper.InteractableText
      VB:
      - id: Visual_Scripting.ObjectHelper.InteractableText*
        name: InteractableText
        nameWithType: ObjectHelper.InteractableText
        qualifiedName: Visual_Scripting.ObjectHelper.InteractableText
    isDefinition: true
    commentId: Overload:Visual_Scripting.ObjectHelper.InteractableText
  Visual_Scripting.ObjectHelper.Lerpingdistance*:
    name:
      CSharp:
      - id: Visual_Scripting.ObjectHelper.Lerpingdistance*
        name: Lerpingdistance
        nameWithType: ObjectHelper.Lerpingdistance
        qualifiedName: Visual_Scripting.ObjectHelper.Lerpingdistance
      VB:
      - id: Visual_Scripting.ObjectHelper.Lerpingdistance*
        name: Lerpingdistance
        nameWithType: ObjectHelper.Lerpingdistance
        qualifiedName: Visual_Scripting.ObjectHelper.Lerpingdistance
    isDefinition: true
    commentId: Overload:Visual_Scripting.ObjectHelper.Lerpingdistance
  Visual_Scripting.ObjectHelper.ObjectTwo*:
    name:
      CSharp:
      - id: Visual_Scripting.ObjectHelper.ObjectTwo*
        name: ObjectTwo
        nameWithType: ObjectHelper.ObjectTwo
        qualifiedName: Visual_Scripting.ObjectHelper.ObjectTwo
      VB:
      - id: Visual_Scripting.ObjectHelper.ObjectTwo*
        name: ObjectTwo
        nameWithType: ObjectHelper.ObjectTwo
        qualifiedName: Visual_Scripting.ObjectHelper.ObjectTwo
    isDefinition: true
    commentId: Overload:Visual_Scripting.ObjectHelper.ObjectTwo
  Visual_Scripting.ObjectHelper.FusionOffsetPosition*:
    name:
      CSharp:
      - id: Visual_Scripting.ObjectHelper.FusionOffsetPosition*
        name: FusionOffsetPosition
        nameWithType: ObjectHelper.FusionOffsetPosition
        qualifiedName: Visual_Scripting.ObjectHelper.FusionOffsetPosition
      VB:
      - id: Visual_Scripting.ObjectHelper.FusionOffsetPosition*
        name: FusionOffsetPosition
        nameWithType: ObjectHelper.FusionOffsetPosition
        qualifiedName: Visual_Scripting.ObjectHelper.FusionOffsetPosition
    isDefinition: true
    commentId: Overload:Visual_Scripting.ObjectHelper.FusionOffsetPosition
  Visual_Scripting.ObjectHelper.FusionOffsetRotation*:
    name:
      CSharp:
      - id: Visual_Scripting.ObjectHelper.FusionOffsetRotation*
        name: FusionOffsetRotation
        nameWithType: ObjectHelper.FusionOffsetRotation
        qualifiedName: Visual_Scripting.ObjectHelper.FusionOffsetRotation
      VB:
      - id: Visual_Scripting.ObjectHelper.FusionOffsetRotation*
        name: FusionOffsetRotation
        nameWithType: ObjectHelper.FusionOffsetRotation
        qualifiedName: Visual_Scripting.ObjectHelper.FusionOffsetRotation
    isDefinition: true
    commentId: Overload:Visual_Scripting.ObjectHelper.FusionOffsetRotation
  Visual_Scripting.ObjectHelper.Definition*:
    name:
      CSharp:
      - id: Visual_Scripting.ObjectHelper.Definition*
        name: Definition
        nameWithType: ObjectHelper.Definition
        qualifiedName: Visual_Scripting.ObjectHelper.Definition
      VB:
      - id: Visual_Scripting.ObjectHelper.Definition*
        name: Definition
        nameWithType: ObjectHelper.Definition
        qualifiedName: Visual_Scripting.ObjectHelper.Definition
    isDefinition: true
    commentId: Overload:Visual_Scripting.ObjectHelper.Definition
  Visual_Scripting.ObjectHelper:
    name:
      CSharp:
      - id: Visual_Scripting.ObjectHelper
        name: ObjectHelper
        nameWithType: ObjectHelper
        qualifiedName: Visual_Scripting.ObjectHelper
      VB:
      - id: Visual_Scripting.ObjectHelper
        name: ObjectHelper
        nameWithType: ObjectHelper
        qualifiedName: Visual_Scripting.ObjectHelper
    isDefinition: true
    commentId: T:Visual_Scripting.ObjectHelper
  Visual_Scripting.VisualScriptingEventNames:
    name:
      CSharp:
      - id: Visual_Scripting.VisualScriptingEventNames
        name: VisualScriptingEventNames
        nameWithType: VisualScriptingEventNames
        qualifiedName: Visual_Scripting.VisualScriptingEventNames
      VB:
      - id: Visual_Scripting.VisualScriptingEventNames
        name: VisualScriptingEventNames
        nameWithType: VisualScriptingEventNames
        qualifiedName: Visual_Scripting.VisualScriptingEventNames
    isDefinition: true
    commentId: T:Visual_Scripting.VisualScriptingEventNames
  Visual_Scripting.OnboardingSetup.register*:
    name:
      CSharp:
      - id: Visual_Scripting.OnboardingSetup.register*
        name: register
        nameWithType: OnboardingSetup.register
        qualifiedName: Visual_Scripting.OnboardingSetup.register
      VB:
      - id: Visual_Scripting.OnboardingSetup.register*
        name: register
        nameWithType: OnboardingSetup.register
        qualifiedName: Visual_Scripting.OnboardingSetup.register
    isDefinition: true
    commentId: Overload:Visual_Scripting.OnboardingSetup.register
  Global.EventHook:
    name:
      CSharp:
      - id: Global.EventHook
        name: EventHook
        nameWithType: EventHook
        qualifiedName: EventHook
        isExternal: true
      VB:
      - id: Global.EventHook
        name: EventHook
        nameWithType: EventHook
        qualifiedName: EventHook
        isExternal: true
    isDefinition: true
    commentId: '!:Global.EventHook'
  Visual_Scripting.OnboardingSetup.GetHook*:
    name:
      CSharp:
      - id: Visual_Scripting.OnboardingSetup.GetHook*
        name: GetHook
        nameWithType: OnboardingSetup.GetHook
        qualifiedName: Visual_Scripting.OnboardingSetup.GetHook
      VB:
      - id: Visual_Scripting.OnboardingSetup.GetHook*
        name: GetHook
        nameWithType: OnboardingSetup.GetHook
        qualifiedName: Visual_Scripting.OnboardingSetup.GetHook
    isDefinition: true
    commentId: Overload:Visual_Scripting.OnboardingSetup.GetHook
  Visual_Scripting.OnboardingSetup:
    name:
      CSharp:
      - id: Visual_Scripting.OnboardingSetup
        name: OnboardingSetup
        nameWithType: OnboardingSetup
        qualifiedName: Visual_Scripting.OnboardingSetup
      VB:
      - id: Visual_Scripting.OnboardingSetup
        name: OnboardingSetup
        nameWithType: OnboardingSetup
        qualifiedName: Visual_Scripting.OnboardingSetup
    isDefinition: true
    commentId: T:Visual_Scripting.OnboardingSetup
